-- addDependentFile examples/type_naturals.h
n :: CInt
n = 3 :: CInt
m :: CInt
m = (+) (1 :: CInt) n
f :: forall a_0 b_1 . (Add a_0 (MultRes CInt b_1),
                       Sub (AddRes a_0 (MultRes CInt b_1)) CInt,
                       Mult CInt b_1) =>
     a_0 -> b_1 -> SubRes (AddRes a_0 (MultRes CInt b_1)) CInt
f = \a_0 -> \b_1 -> (-) ((+) a_0 ((*) (2 :: CInt) b_1)) (1 :: CInt)
g :: forall a_0 b_1 c_2 . (Add (MultRes CInt a_0)
                               (MultRes CInt b_1),
                           Mult CInt b_1,
                           Mult CInt a_0) =>
     c_2 -> a_0 -> b_1 -> AddRes (MultRes CInt a_0) (MultRes CInt b_1)
g = \u_0 -> \x_1 -> \y_2 -> (+) ((*) (10 :: CInt) x_1) ((*) (16 :: CInt) y_2)
k :: forall a_0 . (Add CInt (MultRes CInt a_0), Mult CInt a_0) =>
     a_0 -> AddRes CInt (MultRes CInt a_0)
k = g (11.769999999999999573674358543939888477325439453125 :: CDouble) (f (f (2 :: CInt) m) n)
newtype Arr1 = Arr1 {un_Arr1 :: (ConstantArray 3 CInt)}
deriving newtype instance Storable Arr1
deriving stock instance Eq Arr1
deriving stock instance Show Arr1
newtype Arr2 = Arr2 {un_Arr2 :: (ConstantArray 8 CInt)}
deriving newtype instance Storable Arr2
deriving stock instance Eq Arr2
deriving stock instance Show Arr2
newtype Arr3 = Arr3 {un_Arr3 :: (ConstantArray 18 CInt)}
deriving newtype instance Storable Arr3
deriving stock instance Eq Arr3
deriving stock instance Show Arr3
newtype Arr4 = Arr4 {un_Arr4 :: (ConstantArray 252 CInt)}
deriving newtype instance Storable Arr4
deriving stock instance Eq Arr4
deriving stock instance Show Arr4
