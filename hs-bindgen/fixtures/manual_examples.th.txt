-- addDependentFile examples/golden/manual_examples.h
-- #include "manual_examples.h"
-- void test_internal_mk_triple (signed int arg1, signed int arg2, signed int arg3, triple *arg4) { mk_triple(arg1, arg2, arg3, arg4); }
-- signed int test_internal_index_triple (triple *arg1, index arg2) { return index_triple(arg1, arg2); }
-- sum test_internal_sum_triple (triple *arg1) { return sum_triple(arg1); }
-- average test_internal_average_triple (triple *arg1) { return average_triple(arg1); }
-- YEAR test_internal_getYear (date *arg1) { return getYear(arg1); }
-- void test_internal_print_occupation (signed int arg1, occupation *arg2) { print_occupation(arg1, arg2); }
-- void test_internal_拜拜 (void) { 拜拜(); }
-- void test_internal_ϒ (void) { ϒ(); }
-- void test_internal_import (void) { import(); }
-- signed int test_internal_mod_10 (signed int arg1) { return mod_10(arg1); }
data Triple
    = Triple {triple_a :: CInt, triple_b :: CInt, triple_c :: CInt}
    deriving stock (Eq, Show)
instance Storable Triple
    where {sizeOf = \_ -> 12 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> ((pure Triple <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Triple triple_a_3
                                            triple_b_4
                                            triple_c_5 -> pokeByteOff ptr_1 (0 :: Int) triple_a_3 >> (pokeByteOff ptr_1 (4 :: Int) triple_b_4 >> pokeByteOff ptr_1 (8 :: Int) triple_c_5)}}
foreign import ccall safe "test_internal_mk_triple" mk_triple :: CInt ->
                                                                 CInt ->
                                                                 CInt -> Ptr Triple -> IO Unit
newtype Index = Index {un_Index :: CUInt} deriving stock (Eq, Ord)
instance Storable Index
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Index <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Index un_Index_3 -> pokeByteOff ptr_1 (0 :: Int) un_Index_3}}
instance CEnum Index
    where {type CEnumZ Index = CUInt;
           toCEnum = Index;
           fromCEnum = un_Index;
           declaredValues = \_ -> declaredValuesFromList [(0, singleton "A"),
                                                          (1, singleton "B"),
                                                          (2, singleton "C")];
           showsUndeclared = showsWrappedUndeclared "Index";
           readPrecUndeclared = readPrecWrappedUndeclared "Index";
           isDeclared = seqIsDeclared;
           mkDeclared = seqMkDeclared}
instance SequentialCEnum Index
    where {minDeclaredValue = A; maxDeclaredValue = C}
instance Show Index
    where {showsPrec = showsCEnum}
instance Read Index
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern A :: Index
pattern A = Index 0
pattern B :: Index
pattern B = Index 1
pattern C :: Index
pattern C = Index 2
foreign import ccall safe "test_internal_index_triple" index_triple :: Ptr Triple ->
                                                                       Index -> IO CInt
newtype Sum
    = Sum {un_Sum :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype Average
    = Average {un_Average :: CDouble}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Enum,
                      Floating,
                      Fractional,
                      Num,
                      Real,
                      RealFloat,
                      RealFrac)
foreign import ccall safe "test_internal_sum_triple" sum_triple :: Ptr Triple ->
                                                                   IO Sum
foreign import ccall safe "test_internal_average_triple" average_triple :: Ptr Triple ->
                                                                           IO Average
fIELD_OFFSET :: CInt
fIELD_OFFSET = 4 :: CInt
ePSILON :: CDouble
ePSILON = 0.1000000000000000055511151231257827021181583404541015625 :: CDouble
pTR_TO_FIELD :: forall a_0 . Add a_0 CInt => a_0 -> AddRes a_0 CInt
pTR_TO_FIELD = \ptr_0 -> (+) ptr_0 (4 :: CInt)
newtype YEAR
    = YEAR {un_YEAR :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype MONTH
    = MONTH {un_MONTH :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype DAY
    = DAY {un_DAY :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
data Date
    = Date {date_year :: YEAR, date_month :: MONTH, date_day :: DAY}
    deriving stock (Eq, Show)
instance Storable Date
    where {sizeOf = \_ -> 12 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> ((pure Date <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Date date_year_3
                                          date_month_4
                                          date_day_5 -> pokeByteOff ptr_1 (0 :: Int) date_year_3 >> (pokeByteOff ptr_1 (4 :: Int) date_month_4 >> pokeByteOff ptr_1 (8 :: Int) date_day_5)}}
foreign import ccall safe "test_internal_getYear" getYear :: Ptr Date ->
                                                             IO YEAR
data Student
    = Student {student_university :: (Ptr CChar), student_year :: CInt}
    deriving stock (Eq, Show)
instance Storable Student
    where {sizeOf = \_ -> 16 :: Int;
           alignment = \_ -> 8 :: Int;
           peek = \ptr_0 -> (pure Student <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Student student_university_3
                                             student_year_4 -> pokeByteOff ptr_1 (0 :: Int) student_university_3 >> pokeByteOff ptr_1 (8 :: Int) student_year_4}}
data Person
data Employee
    = Employee {employee_company :: (Ptr CChar),
                employee_supervisor :: (Ptr Person),
                employee_salary :: CInt}
    deriving stock (Eq, Show)
instance Storable Employee
    where {sizeOf = \_ -> 24 :: Int;
           alignment = \_ -> 8 :: Int;
           peek = \ptr_0 -> ((pure Employee <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int)) <*> peekByteOff ptr_0 (16 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Employee employee_company_3
                                              employee_supervisor_4
                                              employee_salary_5 -> pokeByteOff ptr_1 (0 :: Int) employee_company_3 >> (pokeByteOff ptr_1 (8 :: Int) employee_supervisor_4 >> pokeByteOff ptr_1 (16 :: Int) employee_salary_5)}}
newtype Occupation = Occupation {un_Occupation :: ByteArray}
deriving via (SizedByteArray 24 8) instance Storable Occupation
get_occupation_student :: Occupation -> Student
get_occupation_student = getUnionPayload
set_occupation_student :: Student -> Occupation
set_occupation_student = setUnionPayload
get_occupation_employee :: Occupation -> Employee
get_occupation_employee = getUnionPayload
set_occupation_employee :: Employee -> Occupation
set_occupation_employee = setUnionPayload
foreign import ccall safe "test_internal_print_occupation" print_occupation :: CInt ->
                                                                               Ptr Occupation ->
                                                                               IO Unit
data Rect_lower_left
    = Rect_lower_left {rect_lower_left_x :: CInt,
                       rect_lower_left_y :: CInt}
    deriving stock (Eq, Show)
instance Storable Rect_lower_left
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure Rect_lower_left <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Rect_lower_left rect_lower_left_x_3
                                                     rect_lower_left_y_4 -> pokeByteOff ptr_1 (0 :: Int) rect_lower_left_x_3 >> pokeByteOff ptr_1 (4 :: Int) rect_lower_left_y_4}}
data Rect_upper_right
    = Rect_upper_right {rect_upper_right_x :: CInt,
                        rect_upper_right_y :: CInt}
    deriving stock (Eq, Show)
instance Storable Rect_upper_right
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure Rect_upper_right <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Rect_upper_right rect_upper_right_x_3
                                                      rect_upper_right_y_4 -> pokeByteOff ptr_1 (0 :: Int) rect_upper_right_x_3 >> pokeByteOff ptr_1 (4 :: Int) rect_upper_right_y_4}}
data Rect
    = Rect {rect_lower_left :: Rect_lower_left,
            rect_upper_right :: Rect_upper_right}
    deriving stock (Eq, Show)
instance Storable Rect
    where {sizeOf = \_ -> 16 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure Rect <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Rect rect_lower_left_3
                                          rect_upper_right_4 -> pokeByteOff ptr_1 (0 :: Int) rect_lower_left_3 >> pokeByteOff ptr_1 (8 :: Int) rect_upper_right_4}}
data Config_Deref
    = Config_Deref {config_Deref_width :: CInt,
                    config_Deref_height :: CInt}
    deriving stock (Eq, Show)
instance Storable Config_Deref
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure Config_Deref <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Config_Deref config_Deref_width_3
                                                  config_Deref_height_4 -> pokeByteOff ptr_1 (0 :: Int) config_Deref_width_3 >> pokeByteOff ptr_1 (4 :: Int) config_Deref_height_4}}
newtype Config
    = Config {un_Config :: (Ptr Config_Deref)}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
newtype Adio'0301s
    = Adio'0301s {un_Adio'0301s :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
foreign import ccall safe "test_internal_\25308\25308" 拜拜 :: IO Unit
newtype C数字
    = C数字 {un_C数字 :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
foreign import ccall safe "test_internal_\978" cϒ :: IO Unit
newtype Data
    = Data {un_Data :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
foreign import ccall safe "test_internal_import" import' :: IO Unit
newtype Signal
    = Signal {un_Signal :: CUInt}
    deriving stock (Eq, Ord)
instance Storable Signal
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Signal <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Signal un_Signal_3 -> pokeByteOff ptr_1 (0 :: Int) un_Signal_3}}
instance CEnum Signal
    where {type CEnumZ Signal = CUInt;
           toCEnum = Signal;
           fromCEnum = un_Signal;
           declaredValues = \_ -> declaredValuesFromList [(1,
                                                           singleton "Start"),
                                                          (2, singleton "Pause"),
                                                          (3, singleton "Resume"),
                                                          (4, singleton "Stop")];
           showsUndeclared = showsWrappedUndeclared "Signal";
           readPrecUndeclared = readPrecWrappedUndeclared "Signal";
           isDeclared = seqIsDeclared;
           mkDeclared = seqMkDeclared}
instance SequentialCEnum Signal
    where {minDeclaredValue = Start; maxDeclaredValue = Stop}
instance Show Signal
    where {showsPrec = showsCEnum}
instance Read Signal
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern Start :: Signal
pattern Start = Signal 1
pattern Pause :: Signal
pattern Pause = Signal 2
pattern Resume :: Signal
pattern Resume = Signal 3
pattern Stop :: Signal
pattern Stop = Signal 4
newtype HTTP_status
    = HTTP_status {un_HTTP_status :: CUInt}
    deriving stock (Eq, Ord)
instance Storable HTTP_status
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure HTTP_status <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {HTTP_status un_HTTP_status_3 -> pokeByteOff ptr_1 (0 :: Int) un_HTTP_status_3}}
instance CEnum HTTP_status
    where {type CEnumZ HTTP_status = CUInt;
           toCEnum = HTTP_status;
           fromCEnum = un_HTTP_status;
           declaredValues = \_ -> declaredValuesFromList [(200,
                                                           singleton "Ok"),
                                                          (301, singleton "Moved"),
                                                          (400, singleton "Bad_request"),
                                                          (401, singleton "Unauthorized"),
                                                          (404, singleton "Not_found")];
           showsUndeclared = showsWrappedUndeclared "HTTP_status";
           readPrecUndeclared = readPrecWrappedUndeclared "HTTP_status"}
instance Show HTTP_status
    where {showsPrec = showsCEnum}
instance Read HTTP_status
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern Ok :: HTTP_status
pattern Ok = HTTP_status 200
pattern Moved :: HTTP_status
pattern Moved = HTTP_status 301
pattern Bad_request :: HTTP_status
pattern Bad_request = HTTP_status 400
pattern Unauthorized :: HTTP_status
pattern Unauthorized = HTTP_status 401
pattern Not_found :: HTTP_status
pattern Not_found = HTTP_status 404
newtype Descending
    = Descending {un_Descending :: CUInt}
    deriving stock (Eq, Ord)
instance Storable Descending
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Descending <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Descending un_Descending_3 -> pokeByteOff ptr_1 (0 :: Int) un_Descending_3}}
instance CEnum Descending
    where {type CEnumZ Descending = CUInt;
           toCEnum = Descending;
           fromCEnum = un_Descending;
           declaredValues = \_ -> declaredValuesFromList [(98, singleton "Z"),
                                                          (99, "Y" :| ["Y_alias"]),
                                                          (100, singleton "X")];
           showsUndeclared = showsWrappedUndeclared "Descending";
           readPrecUndeclared = readPrecWrappedUndeclared "Descending";
           isDeclared = seqIsDeclared;
           mkDeclared = seqMkDeclared}
instance SequentialCEnum Descending
    where {minDeclaredValue = Z; maxDeclaredValue = X}
instance Show Descending
    where {showsPrec = showsCEnum}
instance Read Descending
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern X :: Descending
pattern X = Descending 100
pattern Y :: Descending
pattern Y = Descending 99
pattern Y_alias :: Descending
pattern Y_alias = Descending 99
pattern Z :: Descending
pattern Z = Descending 98
newtype Result
    = Result {un_Result :: CInt}
    deriving stock (Eq, Ord)
instance Storable Result
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Result <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Result un_Result_3 -> pokeByteOff ptr_1 (0 :: Int) un_Result_3}}
instance CEnum Result
    where {type CEnumZ Result = CInt;
           toCEnum = Result;
           fromCEnum = un_Result;
           declaredValues = \_ -> declaredValuesFromList [(-1,
                                                           singleton "Failed"),
                                                          (0, singleton "Success"),
                                                          (1, singleton "Postponed"),
                                                          (2, singleton "Already_done")];
           showsUndeclared = showsWrappedUndeclared "Result";
           readPrecUndeclared = readPrecWrappedUndeclared "Result";
           isDeclared = seqIsDeclared;
           mkDeclared = seqMkDeclared}
instance SequentialCEnum Result
    where {minDeclaredValue = Failed; maxDeclaredValue = Already_done}
instance Show Result
    where {showsPrec = showsCEnum}
instance Read Result
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern Failed :: Result
pattern Failed = Result (-1)
pattern Success :: Result
pattern Success = Result 0
pattern Postponed :: Result
pattern Postponed = Result 1
pattern Already_done :: Result
pattern Already_done = Result 2
newtype Vote = Vote {un_Vote :: CUChar} deriving stock (Eq, Ord)
instance Storable Vote
    where {sizeOf = \_ -> 1 :: Int;
           alignment = \_ -> 1 :: Int;
           peek = \ptr_0 -> pure Vote <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Vote un_Vote_3 -> pokeByteOff ptr_1 (0 :: Int) un_Vote_3}}
instance CEnum Vote
    where {type CEnumZ Vote = CUChar;
           toCEnum = Vote;
           fromCEnum = un_Vote;
           declaredValues = \_ -> declaredValuesFromList [(0,
                                                           singleton "Infavour"),
                                                          (1, singleton "Against"),
                                                          (2, singleton "Abstain")];
           showsUndeclared = showsWrappedUndeclared "Vote";
           readPrecUndeclared = readPrecWrappedUndeclared "Vote";
           isDeclared = seqIsDeclared;
           mkDeclared = seqMkDeclared}
instance SequentialCEnum Vote
    where {minDeclaredValue = Infavour; maxDeclaredValue = Abstain}
instance Show Vote
    where {showsPrec = showsCEnum}
instance Read Vote
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern Infavour :: Vote
pattern Infavour = Vote 0
pattern Against :: Vote
pattern Against = Vote 1
pattern Abstain :: Vote
pattern Abstain = Vote 2
newtype CXCursorKind
    = CXCursorKind {un_CXCursorKind :: CUInt}
    deriving stock (Eq, Ord)
instance Storable CXCursorKind
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure CXCursorKind <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {CXCursorKind un_CXCursorKind_3 -> pokeByteOff ptr_1 (0 :: Int) un_CXCursorKind_3}}
instance CEnum CXCursorKind
    where {type CEnumZ CXCursorKind = CUInt;
           toCEnum = CXCursorKind;
           fromCEnum = un_CXCursorKind;
           declaredValues = \_ -> declaredValuesFromList [(100,
                                                           "CXCursor_FirstExpr" :| ["CXCursor_UnexposedExpr"]),
                                                          (101, singleton "CXCursor_DeclRefExpr"),
                                                          (102, singleton "CXCursor_MemberRefExpr"),
                                                          (156,
                                                           "CXCursor_PackIndexingExpr" :| ["CXCursor_LastExpr"]),
                                                          (200,
                                                           "CXCursor_FirstStmt" :| ["CXCursor_UnexposedStmt"]),
                                                          (201, singleton "CXCursor_LabelStmt"),
                                                          (202, singleton "CXCursor_CompoundStmt"),
                                                          (331,
                                                           "CXCursor_OpenACCUpdateConstruct" :| ["CXCursor_LastStmt"])];
           showsUndeclared = showsWrappedUndeclared "CXCursorKind";
           readPrecUndeclared = readPrecWrappedUndeclared "CXCursorKind"}
instance Show CXCursorKind
    where {showsPrec = showsCEnum}
instance Read CXCursorKind
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern CXCursor_FirstExpr :: CXCursorKind
pattern CXCursor_FirstExpr = CXCursorKind 100
pattern CXCursor_UnexposedExpr :: CXCursorKind
pattern CXCursor_UnexposedExpr = CXCursorKind 100
pattern CXCursor_DeclRefExpr :: CXCursorKind
pattern CXCursor_DeclRefExpr = CXCursorKind 101
pattern CXCursor_MemberRefExpr :: CXCursorKind
pattern CXCursor_MemberRefExpr = CXCursorKind 102
pattern CXCursor_PackIndexingExpr :: CXCursorKind
pattern CXCursor_PackIndexingExpr = CXCursorKind 156
pattern CXCursor_LastExpr :: CXCursorKind
pattern CXCursor_LastExpr = CXCursorKind 156
pattern CXCursor_FirstStmt :: CXCursorKind
pattern CXCursor_FirstStmt = CXCursorKind 200
pattern CXCursor_UnexposedStmt :: CXCursorKind
pattern CXCursor_UnexposedStmt = CXCursorKind 200
pattern CXCursor_LabelStmt :: CXCursorKind
pattern CXCursor_LabelStmt = CXCursorKind 201
pattern CXCursor_CompoundStmt :: CXCursorKind
pattern CXCursor_CompoundStmt = CXCursorKind 202
pattern CXCursor_OpenACCUpdateConstruct :: CXCursorKind
pattern CXCursor_OpenACCUpdateConstruct = CXCursorKind 331
pattern CXCursor_LastStmt :: CXCursorKind
pattern CXCursor_LastStmt = CXCursorKind 331
foreign import ccall safe "test_internal_mod_10" mod_10 :: CInt ->
                                                           IO CInt
