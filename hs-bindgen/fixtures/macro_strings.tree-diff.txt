TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:4:9",
        declId = NamePair {
          nameC = Name "C1",
          nameHsIdent = Identifier "c1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'a'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [97],
                    unicodeCodePoint = Just 'a'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:5:9",
        declId = NamePair {
          nameC = Name "C2",
          nameHsIdent = Identifier "c2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\"'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [34],
                    unicodeCodePoint = Just
                      `'"'`}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:6:9",
        declId = NamePair {
          nameC = Name "C3",
          nameHsIdent = Identifier "c3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\t'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [9],
                    unicodeCodePoint = Just '\t'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:7:9",
        declId = NamePair {
          nameC = Name "C4",
          nameHsIdent = Identifier "c4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\0'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [0],
                    unicodeCodePoint = Just
                      '\NUL'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:8:9",
        declId = NamePair {
          nameC = Name "C5",
          nameHsIdent = Identifier "c5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\''",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [39],
                    unicodeCodePoint = Just '\''}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_strings.h:9:9",
        declId = NamePair {
          nameC = Name "C6",
          nameHsIdent = Identifier "c6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\?'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [63],
                    unicodeCodePoint = Just '?'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:10:9",
        declId = NamePair {
          nameC = Name "C7",
          nameHsIdent = Identifier "c7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\123'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [83],
                    unicodeCodePoint = Nothing}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:11:9",
        declId = NamePair {
          nameC = Name "C8",
          nameHsIdent = Identifier "c8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\x53'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [83],
                    unicodeCodePoint = Nothing}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:13:9",
        declId = NamePair {
          nameC = Name "D",
          nameHsIdent = Identifier "d"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\777'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList [1, 255],
                    unicodeCodePoint = Nothing}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:15:9",
        declId = NamePair {
          nameC = Name "J1",
          nameHsIdent = Identifier "j1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\12354'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList
                      [227, 129, 130],
                    unicodeCodePoint = Just
                      '\12354'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:16:9",
        declId = NamePair {
          nameC = Name "J2",
          nameHsIdent = Identifier "j2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText = "'\\u3042'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList
                      [227, 129, 130],
                    unicodeCodePoint = Just
                      '\12354'}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:17:9",
        declId = NamePair {
          nameC = Name "J3",
          nameHsIdent = Identifier "j3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MChar
                CharLiteral {
                  charLiteralText =
                  "'\\xE3\\x81\\x82'",
                  charLiteralValue = CharValue {
                    charValue =
                    Prim.byteArrayFromList
                      [227, 129, 130],
                    unicodeCodePoint = Nothing}}),
            macroExprType = "CharLit"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:20:9",
        declId = NamePair {
          nameC = Name "S1",
          nameHsIdent = Identifier "s1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"a\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [97],
                      unicodeCodePoint = Just 'a'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:21:9",
        declId = NamePair {
          nameC = Name "S2",
          nameHsIdent = Identifier "s2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"'\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [39],
                      unicodeCodePoint = Just
                        '\''}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:22:9",
        declId = NamePair {
          nameC = Name "S3",
          nameHsIdent = Identifier "s3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\t\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [9],
                      unicodeCodePoint = Just
                        '\t'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:23:9",
        declId = NamePair {
          nameC = Name "S4",
          nameHsIdent = Identifier "s4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\0\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [0],
                      unicodeCodePoint = Just
                        '\NUL'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:24:9",
        declId = NamePair {
          nameC = Name "S5",
          nameHsIdent = Identifier "s5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\'\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [39],
                      unicodeCodePoint = Just
                        '\''}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:25:9",
        declId = NamePair {
          nameC = Name "S6",
          nameHsIdent = Identifier "s6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\?\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [63],
                      unicodeCodePoint = Just '?'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:26:9",
        declId = NamePair {
          nameC = Name "S7",
          nameHsIdent = Identifier "s7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\123\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [83],
                      unicodeCodePoint = Nothing}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:27:9",
        declId = NamePair {
          nameC = Name "S8",
          nameHsIdent = Identifier "s8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText = "\"\\x53\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [83],
                      unicodeCodePoint = Nothing}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:29:9",
        declId = NamePair {
          nameC = Name "T1",
          nameHsIdent = Identifier "t1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"\12354\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList
                        [227, 129, 130],
                      unicodeCodePoint = Just
                        '\12354'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:30:9",
        declId = NamePair {
          nameC = Name "T2",
          nameHsIdent = Identifier "t2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"\\u3042\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList
                        [227, 129, 130],
                      unicodeCodePoint = Just
                        '\12354'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:31:9",
        declId = NamePair {
          nameC = Name "T3",
          nameHsIdent = Identifier "t3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"\\xE3\\x81\\x82\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [227],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [129],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [130],
                      unicodeCodePoint = Nothing}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:33:9",
        declId = NamePair {
          nameC = Name "U",
          nameHsIdent = Identifier "u"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"\\777\\777\\777\\777\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [1, 255],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [1, 255],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [1, 255],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [1, 255],
                      unicodeCodePoint = Nothing}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:34:9",
        declId = NamePair {
          nameC = Name "V",
          nameHsIdent = Identifier "v"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"\\1\\2\\3\\4\\5\\6\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [1],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [2],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [3],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [4],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [5],
                      unicodeCodePoint = Nothing},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [6],
                      unicodeCodePoint = Nothing}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:36:9",
        declId = NamePair {
          nameC = Name "W1",
          nameHsIdent = Identifier "w1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"hij\\0\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [104],
                      unicodeCodePoint = Just 'h'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [105],
                      unicodeCodePoint = Just 'i'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [106],
                      unicodeCodePoint = Just 'j'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [0],
                      unicodeCodePoint = Just
                        '\NUL'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_strings.h:37:9",
        declId = NamePair {
          nameC = Name "W2",
          nameHsIdent = Identifier "w2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_strings.h"],
            headerInclude =
            "macro_strings.h"},
        declComment = Nothing},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MString
                StringLiteral {
                  stringLiteralText =
                  "\"abc\\0def\\0g\"",
                  stringLiteralValue = [
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [97],
                      unicodeCodePoint = Just 'a'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [98],
                      unicodeCodePoint = Just 'b'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [99],
                      unicodeCodePoint = Just 'c'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [0],
                      unicodeCodePoint = Just '\NUL'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [100],
                      unicodeCodePoint = Just 'd'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [101],
                      unicodeCodePoint = Just 'e'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [102],
                      unicodeCodePoint = Just 'f'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [0],
                      unicodeCodePoint = Just '\NUL'},
                    CharValue {
                      charValue =
                      Prim.byteArrayFromList [103],
                      unicodeCodePoint = Just 'g'}]}),
            macroExprType =
            "Tuple2 (Ptr (IntLike (CIntegralType (CharLike Char)))) (IntLike HsIntType)"}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["macro_strings"]}
