newtype Uint64_t = Uint64_t {unUint64_t :: CULong}
deriving newtype instance Storable Uint64_t
deriving stock instance Eq Uint64_t
deriving stock instance Ord Uint64_t
deriving stock instance Read Uint64_t
deriving stock instance Show Uint64_t
deriving newtype instance Enum Uint64_t
deriving newtype instance Ix Uint64_t
deriving newtype instance Bounded Uint64_t
deriving newtype instance Bits Uint64_t
deriving newtype instance FiniteBits Uint64_t
deriving newtype instance Integral Uint64_t
deriving newtype instance Num Uint64_t
deriving newtype instance Real Uint64_t
newtype Uint32_t = Uint32_t {unUint32_t :: CUInt}
deriving newtype instance Storable Uint32_t
deriving stock instance Eq Uint32_t
deriving stock instance Ord Uint32_t
deriving stock instance Read Uint32_t
deriving stock instance Show Uint32_t
deriving newtype instance Enum Uint32_t
deriving newtype instance Ix Uint32_t
deriving newtype instance Bounded Uint32_t
deriving newtype instance Bits Uint32_t
deriving newtype instance FiniteBits Uint32_t
deriving newtype instance Integral Uint32_t
deriving newtype instance Num Uint32_t
deriving newtype instance Real Uint32_t
data Foo
    = Foo {foo_sixty_four :: Uint64_t, foo_thirty_two :: Uint32_t}
instance Storable Foo
    where {sizeOf = \_ -> 16;
           alignment = \_ -> 8;
           peek = \ptr_0 -> (pure Foo <*> peekByteOff ptr_0 0) <*> peekByteOff ptr_0 8;
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Foo foo_sixty_four_3
                                         foo_thirty_two_4 -> pokeByteOff ptr_1 0 foo_sixty_four_3 >> pokeByteOff ptr_1 8 foo_thirty_two_4}}
deriving stock instance Show Foo
deriving stock instance Eq Foo
