TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:4:9",
        declId = NamePair {
          nameC = Name "MC",
          nameHsIdent = Identifier "MC"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "MC",
              newtypeField = Name
                "@NsVar"
                "un_MC"},
            macroType = TypePrim
              (PrimChar
                (PrimSignImplicit Nothing))}),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:5:14",
        declId = NamePair {
          nameC = Name "TC",
          nameHsIdent = Identifier "TC"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "TC",
            newtypeField = Name
              "@NsVar"
              "un_TC"},
          typedefType = TypePrim
            (PrimChar
              (PrimSignImplicit
                (Just Signed)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:8:6",
        declId = NamePair {
          nameC = Name "quux1",
          nameHsIdent = Identifier
            "quux1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "TC",
                    nameHsIdent = Identifier
                      "TC"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimChar
              (PrimSignImplicit Nothing))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:9:4",
        declId = NamePair {
          nameC = Name "quux2",
          nameHsIdent = Identifier
            "quux2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypePrim
                (PrimChar
                  (PrimSignImplicit Nothing)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeTypedef
            (TypedefRegular
              NamePair {
                nameC = Name "TC",
                nameHsIdent = Identifier
                  "TC"})},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:10:5",
        declId = NamePair {
          nameC = Name "wam1",
          nameHsIdent = Identifier
            "wam1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypePointer
                (TypeTypedef
                  (TypedefRegular
                    NamePair {
                      nameC = Name "TC",
                      nameHsIdent = Identifier
                        "TC"})))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeMacroTypedef
              NamePair {
                nameC = Name "MC",
                nameHsIdent = Identifier "MC"}
              NameOriginInSource)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:11:5",
        declId = NamePair {
          nameC = Name "wam2",
          nameHsIdent = Identifier
            "wam2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypePointer
                (TypeMacroTypedef
                  NamePair {
                    nameC = Name "MC",
                    nameHsIdent = Identifier "MC"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "TC",
                  nameHsIdent = Identifier
                    "TC"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:18:16",
        declId = NamePair {
          nameC = Name "struct1",
          nameHsIdent = Identifier
            "Struct1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Struct1"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "macro_in_fundecl_vs_typedef.h:18:30",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier
                    "struct1_a"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:19:9",
        declId = NamePair {
          nameC = Name "struct2",
          nameHsIdent = Identifier
            "Struct2"},
        declOrigin = NameOriginGenerated
          (AnonId
            "macro_in_fundecl_vs_typedef.h:19:9"),
        declAliases = [Name "struct2"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Struct2"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "macro_in_fundecl_vs_typedef.h:19:30",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier
                    "struct2_a"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:20:16",
        declId = NamePair {
          nameC = Name "struct3",
          nameHsIdent = Identifier
            "Struct3"},
        declOrigin = NameOriginInSource,
        declAliases = [
          Name "struct3_t"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Struct3"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "macro_in_fundecl_vs_typedef.h:20:30",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier
                    "struct3_a"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:20:35",
        declId = NamePair {
          nameC = Name "struct3_t",
          nameHsIdent = Identifier
            "Struct3_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Struct3_t",
            newtypeField = Name
              "@NsVar"
              "un_Struct3_t"},
          typedefType = TypeStruct
            NamePair {
              nameC = Name "struct3",
              nameHsIdent = Identifier
                "Struct3"}
            NameOriginInSource},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:21:16",
        declId = NamePair {
          nameC = Name "struct4",
          nameHsIdent = Identifier
            "Struct4"},
        declOrigin = NameOriginInSource,
        declAliases = [Name "struct4"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Struct4"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "macro_in_fundecl_vs_typedef.h:21:30",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier
                    "struct4_a"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:23:6",
        declId = NamePair {
          nameC = Name "struct_typedef1",
          nameHsIdent = Identifier
            "struct_typedef1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeTypedef
                  (TypedefSquashed
                    (Name "struct2")
                    (TypeStruct
                      NamePair {
                        nameC = Name "struct2",
                        nameHsIdent = Identifier
                          "Struct2"}
                      (NameOriginGenerated
                        (AnonId
                          "macro_in_fundecl_vs_typedef.h:19:9")))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:24:6",
        declId = NamePair {
          nameC = Name "struct_typedef2",
          nameHsIdent = Identifier
            "struct_typedef2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeTypedef
                  (TypedefRegular
                    NamePair {
                      nameC = Name "struct3_t",
                      nameHsIdent = Identifier
                        "Struct3_t"}))),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:25:6",
        declId = NamePair {
          nameC = Name "struct_typedef3",
          nameHsIdent = Identifier
            "struct_typedef3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeTypedef
                  (TypedefSquashed
                    (Name "struct4")
                    (TypeStruct
                      NamePair {
                        nameC = Name "struct4",
                        nameHsIdent = Identifier
                          "Struct4"}
                      NameOriginInSource)))),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:27:6",
        declId = NamePair {
          nameC = Name "struct_name1",
          nameHsIdent = Identifier
            "struct_name1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "struct1",
                    nameHsIdent = Identifier
                      "Struct1"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:28:6",
        declId = NamePair {
          nameC = Name "struct_name2",
          nameHsIdent = Identifier
            "struct_name2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "struct3",
                    nameHsIdent = Identifier
                      "Struct3"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl_vs_typedef.h:29:6",
        declId = NamePair {
          nameC = Name "struct_name3",
          nameHsIdent = Identifier
            "struct_name3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              [
                "macro_in_fundecl_vs_typedef.h"],
            headerInclude =
            "macro_in_fundecl_vs_typedef.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier "s"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "struct4",
                    nameHsIdent = Identifier
                      "Struct4"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "MC",
                  nameHsIdent = Identifier "MC"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = [
    "macro_in_fundecl_vs_typedef"]}
