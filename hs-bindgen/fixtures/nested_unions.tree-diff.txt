TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "nested_unions.h:2:15",
        declId = NamePair {
          nameC = Name "unionA",
          nameHsIdent = HsIdentifier
            "UnionA"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_unions.h"],
            headerInclude =
            "nested_unions.h"},
        declComment = Nothing},
      declKind = DeclUnion
        Union {
          unionNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "UnionA",
            newtypeField = HsName
              "@NsVar"
              "un_UnionA"},
          unionSizeof = 4,
          unionAlignment = 4,
          unionFields = [
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:3:21",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = HsIdentifier
                    "unionA_a"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimIntegral PrimInt Signed)},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:4:22",
                fieldName = NamePair {
                  nameC = Name "b",
                  nameHsIdent = HsIdentifier
                    "unionA_b"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed)))}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_unions.h:1:8",
        declId = NamePair {
          nameC = Name "exA",
          nameHsIdent = HsIdentifier
            "ExA"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_unions.h"],
            headerInclude =
            "nested_unions.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName "@NsConstr" "ExA"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:5:11",
                fieldName = NamePair {
                  nameC = Name "fieldA1",
                  nameHsIdent = HsIdentifier
                    "exA_fieldA1"},
                fieldComment = Nothing},
              structFieldType = TypeUnion
                NamePair {
                  nameC = Name "unionA",
                  nameHsIdent = HsIdentifier
                    "UnionA"}
                NameOriginInSource,
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_unions.h:9:9",
        declId = NamePair {
          nameC = Name "exB_fieldB1",
          nameHsIdent = HsIdentifier
            "ExB_fieldB1"},
        declOrigin = NameOriginGenerated
          (AnonId "nested_unions.h:9:9"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_unions.h"],
            headerInclude =
            "nested_unions.h"},
        declComment = Nothing},
      declKind = DeclUnion
        Union {
          unionNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "ExB_fieldB1",
            newtypeField = HsName
              "@NsVar"
              "un_ExB_fieldB1"},
          unionSizeof = 4,
          unionAlignment = 4,
          unionFields = [
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:10:21",
                fieldName = NamePair {
                  nameC = Name "a",
                  nameHsIdent = HsIdentifier
                    "exB_fieldB1_a"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimIntegral PrimInt Signed)},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:11:22",
                fieldName = NamePair {
                  nameC = Name "b",
                  nameHsIdent = HsIdentifier
                    "exB_fieldB1_b"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed)))}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_unions.h:8:8",
        declId = NamePair {
          nameC = Name "exB",
          nameHsIdent = HsIdentifier
            "ExB"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_unions.h"],
            headerInclude =
            "nested_unions.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName "@NsConstr" "ExB"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_unions.h:12:11",
                fieldName = NamePair {
                  nameC = Name "fieldB1",
                  nameHsIdent = HsIdentifier
                    "exB_fieldB1"},
                fieldComment = Nothing},
              structFieldType = TypeUnion
                NamePair {
                  nameC = Name "exB_fieldB1",
                  nameHsIdent = HsIdentifier
                    "ExB_fieldB1"}
                (NameOriginGenerated
                  (AnonId "nested_unions.h:9:9")),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["nested_unions"]}
