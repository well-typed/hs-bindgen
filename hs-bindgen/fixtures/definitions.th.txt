-- addDependentFile examples/golden/definitions.h
-- #include <definitions.h>
-- signed int hs_bindgen_test_definitions_a7d624773bb0585c (double arg1) { return foo(arg1); }
-- /* get_foo_ptr */ __attribute__ ((const)) signed int (*hs_bindgen_test_definitions_fb3e409881d8c524 (void)) (double arg1) { return &foo; } 
-- /* get_n_ptr */ __attribute__ ((const)) signed int *hs_bindgen_test_definitions_fc2aad2af9befead (void) { return &n; } 
{-| -}
foreign import ccall safe "hs_bindgen_test_definitions_a7d624773bb0585c" foo :: CDouble ->
                                                                                IO CInt
foreign import ccall safe "hs_bindgen_test_definitions_fb3e409881d8c524" hs_bindgen_test_definitions_fb3e409881d8c524 :: IO (FunPtr (CDouble ->
                                                                                                                                     IO CInt))
{-# NOINLINE foo_ptr #-}
foo_ptr :: FunPtr (CDouble -> IO CInt)
foo_ptr = unsafePerformIO hs_bindgen_test_definitions_fb3e409881d8c524
foreign import ccall safe "hs_bindgen_test_definitions_fc2aad2af9befead" hs_bindgen_test_definitions_fc2aad2af9befead :: IO (Ptr CInt)
{-# NOINLINE n_ptr #-}
n_ptr :: Ptr CInt
n_ptr = unsafePerformIO hs_bindgen_test_definitions_fc2aad2af9befead
data X = X {x_n :: CInt} deriving stock (Eq, Show)
instance Storable X
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> pure X <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   X x_n_3 -> pokeByteOff ptr_1 (0 :: Int) x_n_3
newtype Y = Y {un_Y :: ByteArray}
deriving via (SizedByteArray 4 4) instance Storable Y
{-|

  __See:__ 'set_y_m'

-}
get_y_m :: Y -> CInt
{-|

  __See:__ 'set_y_m'

-}
get_y_m = getUnionPayload
{-|

  __See:__ 'get_y_m'

-}
set_y_m :: CInt -> Y
{-|

  __See:__ 'get_y_m'

-}
set_y_m = setUnionPayload
{-|

  __See:__ 'set_y_o'

-}
get_y_o :: Y -> CInt
{-|

  __See:__ 'set_y_o'

-}
get_y_o = getUnionPayload
{-|

  __See:__ 'get_y_o'

-}
set_y_o :: CInt -> Y
{-|

  __See:__ 'get_y_o'

-}
set_y_o = setUnionPayload
