#!/usr/bin/env bash

usage() {
    echo "Usage: $(basename "$0") [OPTIONS] [FILE]"
    echo
    echo "If no FILE is provided, compile '*.pp.hs' files."
    echo "Skip expected failures (but see below)."
    echo
    echo "Options:"
    echo "  -f    Force compilation of all fixtures"
}

force_compilation=""
OPTIND=1
while getopts "hf" opt; do
    case "$opt" in
    h)
        usage
        exit 0
        ;;
    f)
        force_compilation=TRUE
        ;;
    \?)
        usage
        exit 1
        ;;
    :)
        echo "Missing option argument for -$OPTARG" >&2
        usage
        exit 1
        ;;
    *)
        echo "Unimplemented option: -$OPTARG" >&2
        usage
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))
[ "${1:-}" = "--" ] && shift

failures=(
    # GCC compilation errors (error happens when parsing inlined C source).
    "bool_c23.pp.hs"           # Unknown type error.
    "decls_in_signature.pp.hs" # Invalid use of undefined type.
    "fun_attributes.pp.hs"     # Aliased to undefined symbol error.
    "globals.pp.hs"            # Missing `const` error.
    "iterator.pp.hs"           # Expected declaration specifiers or ‘...’ before ‘^’ token.

    # GHC compilation errors.
    "enum_cpp_syntax.pp.hs"        # Parse error.
    "macro_strings.pp.hs"          # "A section must be enclosed in parentheses".
    "macro_types.pp.hs"            # Illegal type.
    "program_slicing_simple.pp.hs" # Module graph contains a cycle.
    "redeclaration.pp.hs"          # Multiple declarations.
    "typedef_vs_macro.pp.hs"       # Illegal type.
    "typenames.pp.hs"              # Multiple declarations.
    "type_naturals.pp.hs"          # Illegal type.

    # Notes.
    #
    # - "vector.pp.hs": Seems to be fixed, but may still be broken
    #     "unknown type name ‘import’"
    #     (wrong import from 'vector-algorithms/vector.h')?
)
export failures

compile_one() {
    file="$1"
    echo "================================================================================"
    echo "Compiling $file"
    cabal exec -- \
        ghc -fforce-recomp -optc \
        -I"../examples" \
        -I"../examples/failing" \
        -I"../examples/golden" \
        -I"../examples/golden-norust" \
        "$file" 2>&1

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        echo "Compilation of $file succeeded."
    else
        echo "Compilation of $file failed."
    fi
    echo "================================================================================"
}
export -f compile_one

handle_one() {
    f="$1"
    echo
    if [[ (-z $force_compilation) && (" ${failures[*]} " =~ [[:space:]]${f}[[:space:]]) ]]; then
        echo "Skipping test $f; expected failure; use -f to force compilation"
    else
        compile_one "$f"
    fi
}
export -f handle_one

handle_all() {
    parallel handle_one {} ::: *.pp.hs
}

# Ensure the build is up-to-date.
cabal build all

if [ $# -lt 1 ]; then
    handle_all
elif [ $# -eq 1 ]; then
    handle_one "$1"
else
    usage
fi
