TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_qualifiers.h:5:18",
        declId = NamePair {
          nameC = Name "a",
          nameHsIdent = Identifier "a"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_qualifiers.h"],
            headerInclude =
            "type_qualifiers.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeConst
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_qualifiers.h:7:19",
        declId = NamePair {
          nameC = Name "b",
          nameHsIdent = Identifier "b"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_qualifiers.h"],
            headerInclude =
            "type_qualifiers.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePointer
          (TypeConst
            (TypePrim
              (PrimIntegral
                PrimInt
                Signed)))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_qualifiers.h:9:19",
        declId = NamePair {
          nameC = Name "c",
          nameHsIdent = Identifier "c"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_qualifiers.h"],
            headerInclude =
            "type_qualifiers.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeConst
          (TypePointer
            (TypePrim
              (PrimIntegral
                PrimInt
                Signed)))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_qualifiers.h:11:25",
        declId = NamePair {
          nameC = Name "d",
          nameHsIdent = Identifier "d"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_qualifiers.h"],
            headerInclude =
            "type_qualifiers.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeConst
          (TypePointer
            (TypeConst
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_qualifiers.h:14:6",
        declId = NamePair {
          nameC = Name "list_example",
          nameHsIdent = Identifier
            "list_example"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_qualifiers.h"],
            headerInclude =
            "type_qualifiers.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "items",
                  nameHsIdent = Identifier
                    "items"})
              (TypePointer
                (TypePointer
                  (TypeConst
                    (TypePrim
                      (PrimChar
                        (PrimSignImplicit Nothing)))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "count",
                  nameHsIdent = Identifier
                    "count"})
              (TypePrim PrimSize)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            PrimBool},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = [
    "alltypes",
    "stddef",
    "stdbool",
    "type_qualifiers"]}
