newtype M1 = M1 {unM1 :: CInt}
newtype M2 = M2 {unM2 :: CChar}
newtype T1 = T1 {unT1 :: CInt}
deriving newtype instance Storable T1
deriving stock instance Eq T1
deriving stock instance Ord T1
deriving stock instance Read T1
deriving stock instance Show T1
deriving newtype instance Enum T1
deriving newtype instance Ix T1
deriving newtype instance Bounded T1
deriving newtype instance Bits T1
deriving newtype instance FiniteBits T1
deriving newtype instance Integral T1
deriving newtype instance Num T1
deriving newtype instance Real T1
newtype T2 = T2 {unT2 :: CChar}
deriving newtype instance Storable T2
deriving stock instance Eq T2
deriving stock instance Ord T2
deriving stock instance Read T2
deriving stock instance Show T2
deriving newtype instance Enum T2
deriving newtype instance Ix T2
deriving newtype instance Bounded T2
deriving newtype instance Bits T2
deriving newtype instance FiniteBits T2
deriving newtype instance Integral T2
deriving newtype instance Num T2
deriving newtype instance Real T2
data ExampleStruct
    = ExampleStruct {exampleStruct_t1 :: T1,
                     exampleStruct_t2 :: T2,
                     exampleStruct_m1 :: M1,
                     exampleStruct_m2 :: M2}
instance Storable ExampleStruct
    where {sizeOf = \_ -> 16;
           alignment = \_ -> 4;
           peek = \ptr_0 -> (((pure ExampleStruct <*> peekByteOff ptr_0 0) <*> peekByteOff ptr_0 4) <*> peekByteOff ptr_0 8) <*> peekByteOff ptr_0 12;
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExampleStruct exampleStruct_t1_3
                                                   exampleStruct_t2_4
                                                   exampleStruct_m1_5
                                                   exampleStruct_m2_6 -> pokeByteOff ptr_1 0 exampleStruct_t1_3 >> (pokeByteOff ptr_1 4 exampleStruct_t2_4 >> (pokeByteOff ptr_1 8 exampleStruct_m1_5 >> pokeByteOff ptr_1 12 exampleStruct_m2_6))}}
deriving stock instance Show ExampleStruct
deriving stock instance Eq ExampleStruct
