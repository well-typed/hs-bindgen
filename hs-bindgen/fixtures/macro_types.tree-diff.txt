TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:2:9",
        declId = NamePair {
          nameC = Name "PtrInt",
          nameHsIdent = HsIdentifier
            "PtrInt"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "PtrInt",
              newtypeField = HsName
                "@NsVar"
                "un_PtrInt"},
            macroType = TypePointer
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:5:9",
        declId = NamePair {
          nameC = Name "PtrPtrChar",
          nameHsIdent = HsIdentifier
            "PtrPtrChar"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "PtrPtrChar",
              newtypeField = HsName
                "@NsVar"
                "un_PtrPtrChar"},
            macroType = TypePointer
              (TypePointer
                (TypePrim
                  (PrimChar
                    (PrimSignImplicit Nothing))))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:8:9",
        declId = NamePair {
          nameC = Name "MTy",
          nameHsIdent = HsIdentifier
            "MTy"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "MTy",
              newtypeField = HsName
                "@NsVar"
                "un_MTy"},
            macroType = TypePrim
              (PrimFloating PrimFloat)}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:9:13",
        declId = NamePair {
          nameC = Name "tty",
          nameHsIdent = HsIdentifier
            "Tty"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Tty",
            newtypeField = HsName
              "@NsVar"
              "un_Tty"},
          typedefType = TypeMacroTypedef
            NamePair {
              nameC = Name "MTy",
              nameHsIdent = HsIdentifier
                "MTy"}
            NameOriginInSource},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:11:9",
        declId = NamePair {
          nameC = Name "UINT8_T",
          nameHsIdent = HsIdentifier
            "UINT8_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "UINT8_T",
              newtypeField = HsName
                "@NsVar"
                "un_UINT8_T"},
            macroType = TypePrim
              (PrimChar
                (PrimSignExplicit Unsigned))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:12:9",
        declId = NamePair {
          nameC = Name "BOOLEAN_T",
          nameHsIdent = HsIdentifier
            "BOOLEAN_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "BOOLEAN_T",
              newtypeField = HsName
                "@NsVar"
                "un_BOOLEAN_T"},
            macroType = TypeMacroTypedef
              NamePair {
                nameC = Name "UINT8_T",
                nameHsIdent = HsIdentifier
                  "UINT8_T"}
              NameOriginInSource}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macro_types.h:13:19",
        declId = NamePair {
          nameC = Name "boolean_T",
          nameHsIdent = HsIdentifier
            "Boolean_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "macro_types.h",
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Boolean_T",
            newtypeField = HsName
              "@NsVar"
              "un_Boolean_T"},
          typedefType = TypeMacroTypedef
            NamePair {
              nameC = Name "BOOLEAN_T",
              nameHsIdent = HsIdentifier
                "BOOLEAN_T"}
            NameOriginInSource},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["macro_types"]}
