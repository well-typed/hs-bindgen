TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:7:24",
        declId = NamePair {
          nameC = CName "uint8_t",
          nameHsIdent = HsIdentifier
            "Uint8_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Uint8_t",
            newtypeField = HsName
              "@NsVar"
              "un_Uint8_t"},
          typedefType = TypePrim
            (PrimChar
              (PrimSignExplicit Unsigned))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:8:24",
        declId = NamePair {
          nameC = CName "uint16_t",
          nameHsIdent = HsIdentifier
            "Uint16_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Uint16_t",
            newtypeField = HsName
              "@NsVar"
              "un_Uint16_t"},
          typedefType = TypePrim
            (PrimIntegral
              PrimShort
              Unsigned)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:9:24",
        declId = NamePair {
          nameC = CName "uint32_t",
          nameHsIdent = HsIdentifier
            "Uint32_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Uint32_t",
            newtypeField = HsName
              "@NsVar"
              "un_Uint32_t"},
          typedefType = TypePrim
            (PrimIntegral
              PrimInt
              Unsigned)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:10:24",
        declId = NamePair {
          nameC = CName "int32_t",
          nameHsIdent = HsIdentifier
            "Int32_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Int32_t",
            newtypeField = HsName
              "@NsVar"
              "un_Int32_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:12:9",
        declId = NamePair {
          nameC = CName
            "another_typedef_struct_t",
          nameHsIdent = HsIdentifier
            "Another_typedef_struct_t"},
        declOrigin =
        NameOriginGenerated,
        declAliases = [
          CName
            "another_typedef_struct_t"]},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "Another_typedef_struct_t"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:12:22",
              structFieldName = NamePair {
                nameC = CName "foo",
                nameHsIdent = HsIdentifier
                  "another_typedef_struct_t_foo"},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:12:32",
              structFieldName = NamePair {
                nameC = CName "bar",
                nameHsIdent = HsIdentifier
                  "another_typedef_struct_t_bar"},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:13:9",
        declId = NamePair {
          nameC = CName
            "another_typedef_enum_e",
          nameHsIdent = HsIdentifier
            "Another_typedef_enum_e"},
        declOrigin =
        NameOriginGenerated,
        declAliases = [
          CName
            "another_typedef_enum_e"]},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Another_typedef_enum_e",
            newtypeField = HsName
              "@NsVar"
              "un_Another_typedef_enum_e"},
          enumType = TypePrim
            (PrimIntegral PrimInt Unsigned),
          enumSizeof = 4,
          enumAlignment = 4,
          enumConstants = [
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:13:16",
              enumConstantName = NamePair {
                nameC = CName "FOO",
                nameHsIdent = HsIdentifier
                  "FOO"},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:13:21",
              enumConstantName = NamePair {
                nameC = CName "BAR",
                nameHsIdent = HsIdentifier
                  "BAR"},
              enumConstantValue = 1}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:14:9",
        declId = NamePair {
          nameC = CName "A",
          nameHsIdent = HsIdentifier "a"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "5",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 5}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:15:9",
        declId = NamePair {
          nameC = CName "B",
          nameHsIdent = HsIdentifier "b"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "3",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 3}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:16:9",
        declId = NamePair {
          nameC = CName
            "SOME_DEFINED_CONSTANT",
          nameHsIdent = HsIdentifier
            "sOME_DEFINED_CONSTANT"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "4",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 4}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:17:13",
        declId = NamePair {
          nameC = CName "a_type_t",
          nameHsIdent = HsIdentifier
            "A_type_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "A_type_t",
            newtypeField = HsName
              "@NsVar"
              "un_A_type_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:18:13",
        declId = NamePair {
          nameC = CName "var_t",
          nameHsIdent = HsIdentifier
            "Var_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Var_t",
            newtypeField = HsName
              "@NsVar"
              "un_Var_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:38:16",
        declId = NamePair {
          nameC = CName
            "a_typedef_struct",
          nameHsIdent = HsIdentifier
            "A_typedef_struct"},
        declOrigin = NameOriginInSource,
        declAliases = [
          CName "a_typedef_struct_t"]},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "A_typedef_struct"),
          structSizeof = 140,
          structAlignment = 1,
          structFields = [
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:40:31",
              structFieldName = NamePair {
                nameC = CName "field_0",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_0"},
              structFieldType = TypePrim
                PrimBool,
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:41:31",
              structFieldName = NamePair {
                nameC = CName "field_1",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_1"},
              structFieldType = TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "uint8_t",
                    nameHsIdent = HsIdentifier
                      "Uint8_t"}),
              structFieldOffset = 8,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:42:31",
              structFieldName = NamePair {
                nameC = CName "field_2",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_2"},
              structFieldType = TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "uint16_t",
                    nameHsIdent = HsIdentifier
                      "Uint16_t"}),
              structFieldOffset = 16,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:43:31",
              structFieldName = NamePair {
                nameC = CName "field_3",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_3"},
              structFieldType = TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "uint32_t",
                    nameHsIdent = HsIdentifier
                      "Uint32_t"}),
              structFieldOffset = 32,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:44:31",
              structFieldName = NamePair {
                nameC = CName "field_4",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_4"},
              structFieldType = TypeTypedef
                (TypedefSquashed
                  (CName
                    "another_typedef_struct_t")
                  (TypeStruct
                    NamePair {
                      nameC = CName
                        "another_typedef_struct_t",
                      nameHsIdent = HsIdentifier
                        "Another_typedef_struct_t"}
                    NameOriginGenerated)),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:45:31",
              structFieldName = NamePair {
                nameC = CName "field_5",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_5"},
              structFieldType = TypePointer
                (TypeTypedef
                  (TypedefSquashed
                    (CName
                      "another_typedef_struct_t")
                    (TypeStruct
                      NamePair {
                        nameC = CName
                          "another_typedef_struct_t",
                        nameHsIdent = HsIdentifier
                          "Another_typedef_struct_t"}
                      NameOriginGenerated))),
              structFieldOffset = 128,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:46:31",
              structFieldName = NamePair {
                nameC = CName "field_6",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_6"},
              structFieldType = TypePointer
                TypeVoid,
              structFieldOffset = 192,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:47:31",
              structFieldName = NamePair {
                nameC = CName "field_7",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_7"},
              structFieldType = TypeConstArray
                7
                (TypeTypedef
                  (TypedefRegular
                    NamePair {
                      nameC = CName "uint32_t",
                      nameHsIdent = HsIdentifier
                        "Uint32_t"})),
              structFieldOffset = 256,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:48:31",
              structFieldName = NamePair {
                nameC = CName "field_8",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_8"},
              structFieldType = TypeTypedef
                (TypedefSquashed
                  (CName "another_typedef_enum_e")
                  (TypeEnum
                    NamePair {
                      nameC = CName
                        "another_typedef_enum_e",
                      nameHsIdent = HsIdentifier
                        "Another_typedef_enum_e"}
                    NameOriginGenerated)),
              structFieldOffset = 480,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:49:31",
              structFieldName = NamePair {
                nameC = CName "field_9",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_9"},
              structFieldType = TypeConstArray
                4
                (TypeTypedef
                  (TypedefSquashed
                    (CName "another_typedef_enum_e")
                    (TypeEnum
                      NamePair {
                        nameC = CName
                          "another_typedef_enum_e",
                        nameHsIdent = HsIdentifier
                          "Another_typedef_enum_e"}
                      NameOriginGenerated))),
              structFieldOffset = 512,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:50:31",
              structFieldName = NamePair {
                nameC = CName "field_10",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_field_10"},
              structFieldType = TypeConstArray
                5
                (TypeConstArray
                  3
                  (TypeTypedef
                    (TypedefSquashed
                      (CName "another_typedef_enum_e")
                      (TypeEnum
                        NamePair {
                          nameC = CName
                            "another_typedef_enum_e",
                          nameHsIdent = HsIdentifier
                            "Another_typedef_enum_e"}
                        NameOriginGenerated)))),
              structFieldOffset = 640,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:51:3",
        declId = NamePair {
          nameC = CName
            "a_typedef_struct_t",
          nameHsIdent = HsIdentifier
            "A_typedef_struct_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "A_typedef_struct_t",
            newtypeField = HsName
              "@NsVar"
              "un_A_typedef_struct_t"},
          typedefType = TypeStruct
            NamePair {
              nameC = CName
                "a_typedef_struct",
              nameHsIdent = HsIdentifier
                "A_typedef_struct"}
            NameOriginInSource},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:56:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_0",
          nameHsIdent = HsIdentifier
            "a_DEFINE_0"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0x00",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 0}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:57:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_1",
          nameHsIdent = HsIdentifier
            "a_DEFINE_1"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0x5050U",
                  integerLiteralType = Int
                    Unsigned,
                  integerLiteralValue = 20560}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:58:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_2",
          nameHsIdent = HsIdentifier
            "a_DEFINE_2"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "2",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 2}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:59:9",
        declId = NamePair {
          nameC = CName "TWO_ARGS",
          nameHsIdent = HsIdentifier
            "tWO_ARGS"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MTuple
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "0x3456",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 13398}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "0x789A",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 30874})],
            macroExprType =
            "Tuple2 (IntLike (CIntegralType (IntLike (Int Signed)))) (IntLike (CIntegralType (IntLike (Int Signed))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:64:9",
        declId = NamePair {
          nameC = CName
            "a_typedef_enum_e",
          nameHsIdent = HsIdentifier
            "A_typedef_enum_e"},
        declOrigin =
        NameOriginGenerated,
        declAliases = [
          CName "a_typedef_enum_e"]},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "A_typedef_enum_e",
            newtypeField = HsName
              "@NsVar"
              "un_A_typedef_enum_e"},
          enumType = TypePrim
            (PrimChar
              (PrimSignExplicit Unsigned)),
          enumSizeof = 1,
          enumAlignment = 1,
          enumConstants = [
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:66:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_0",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_0"},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:67:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_1",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_1"},
              enumConstantValue = 1},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:68:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_2",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_2"},
              enumConstantValue = 2},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:69:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_3",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_3"},
              enumConstantValue = 3}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:75:9",
        declId = NamePair {
          nameC = CName "some_fun",
          nameHsIdent = HsIdentifier
            "some_fun"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "a_type_t",
                    nameHsIdent = HsIdentifier
                      "A_type_t"})),
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = CName "uint32_t",
                  nameHsIdent = HsIdentifier
                    "Uint32_t"}),
            TypeIncompleteArray
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "uint8_t",
                    nameHsIdent = HsIdentifier
                      "Uint8_t"}))],
          functionRes = TypeTypedef
            (TypedefRegular
              NamePair {
                nameC = CName "int32_t",
                nameHsIdent = HsIdentifier
                  "Int32_t"}),
          functionHeader =
          "distilled_lib_1.h"},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:80:19",
        declId = NamePair {
          nameC = CName "callback_t",
          nameHsIdent = HsIdentifier
            "Callback_t"},
        declOrigin = NameOriginInSource,
        declAliases = []},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Callback_t",
            newtypeField = HsName
              "@NsVar"
              "un_Callback_t"},
          typedefType = TypePointer
            (TypeFun
              [
                TypePointer TypeVoid,
                TypeTypedef
                  (TypedefRegular
                    NamePair {
                      nameC = CName "uint32_t",
                      nameHsIdent = HsIdentifier
                        "Uint32_t"})]
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "uint32_t",
                    nameHsIdent = HsIdentifier
                      "Uint32_t"})))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = [
    "stdbool",
    "distilled_lib_1"]}
