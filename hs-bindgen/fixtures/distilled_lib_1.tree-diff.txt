TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:9:9",
        declId = NamePair {
          nameC = CName
            "another_typedef_struct_t",
          nameHsIdent = HsIdentifier
            "Another_typedef_struct_t"},
        declOrigin = NameOriginGenerated
          (AnonId
            "distilled_lib_1.h:9:9"),
        declAliases = [
          CName
            "another_typedef_struct_t"],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "Another_typedef_struct_t"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:9:22",
              structFieldName = NamePair {
                nameC = CName "foo",
                nameHsIdent = HsIdentifier
                  "another_typedef_struct_t_foo"},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:9:32",
              structFieldName = NamePair {
                nameC = CName "bar",
                nameHsIdent = HsIdentifier
                  "another_typedef_struct_t_bar"},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:10:9",
        declId = NamePair {
          nameC = CName
            "another_typedef_enum_e",
          nameHsIdent = HsIdentifier
            "Another_typedef_enum_e"},
        declOrigin = NameOriginGenerated
          (AnonId
            "distilled_lib_1.h:10:9"),
        declAliases = [
          CName "another_typedef_enum_e"],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Another_typedef_enum_e",
            newtypeField = HsName
              "@NsVar"
              "un_Another_typedef_enum_e"},
          enumType = TypePrim
            (PrimIntegral PrimInt Unsigned),
          enumSizeof = 4,
          enumAlignment = 4,
          enumConstants = [
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:10:16",
              enumConstantName = NamePair {
                nameC = CName "FOO",
                nameHsIdent = HsIdentifier
                  "FOO"},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:10:21",
              enumConstantName = NamePair {
                nameC = CName "BAR",
                nameHsIdent = HsIdentifier
                  "BAR"},
              enumConstantValue = 1}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:11:9",
        declId = NamePair {
          nameC = CName "A",
          nameHsIdent = HsIdentifier "a"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "5",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 5}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:12:9",
        declId = NamePair {
          nameC = CName "B",
          nameHsIdent = HsIdentifier "b"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "3",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 3}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:13:9",
        declId = NamePair {
          nameC = CName
            "SOME_DEFINED_CONSTANT",
          nameHsIdent = HsIdentifier
            "sOME_DEFINED_CONSTANT"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "4",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 4}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:14:13",
        declId = NamePair {
          nameC = CName "a_type_t",
          nameHsIdent = HsIdentifier
            "A_type_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "A_type_t",
            newtypeField = HsName
              "@NsVar"
              "un_A_type_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:15:13",
        declId = NamePair {
          nameC = CName "var_t",
          nameHsIdent = HsIdentifier
            "Var_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Var_t",
            newtypeField = HsName
              "@NsVar"
              "un_Var_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:35:16",
        declId = NamePair {
          nameC = CName
            "a_typedef_struct_t",
          nameHsIdent = HsIdentifier
            "A_typedef_struct_t"},
        declOrigin =
        NameOriginRenamedFrom
          (CName "a_typedef_struct"),
        declAliases = [
          CName "a_typedef_struct_t"],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "A_typedef_struct_t"),
          structSizeof = 140,
          structAlignment = 1,
          structFields = [
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:37:31",
              structFieldName = NamePair {
                nameC = CName "field_0",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_0"},
              structFieldType = TypePrim
                PrimBool,
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:38:31",
              structFieldName = NamePair {
                nameC = CName "field_1",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_1"},
              structFieldType = TypeExtBinding
                ResolvedExtBinding {
                  extCName = QualName {
                    qualNameName = CName "uint8_t",
                    qualNameKind =
                    NameKindOrdinary},
                  extHsRef = ExtHsRef {
                    extHsRefModule = HsModuleName
                      "HsBindgen.Runtime.Prelude",
                    extHsRefIdentifier =
                    HsIdentifier "Word8"},
                  extHsSpec = TypeSpec {
                    typeSpecModule = Just
                      (HsModuleName
                        "HsBindgen.Runtime.Prelude"),
                    typeSpecIdentifier = Just
                      (HsIdentifier "Word8"),
                    typeSpecInstances = Map.fromList
                      [
                        _×_
                          Eq
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ord
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Enum
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ix
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bounded
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Read
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Show
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          FiniteBits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Integral
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Num
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Real
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          StaticSize
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          ReadRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          WriteRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Storable
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = [
                                ]})]}},
              structFieldOffset = 8,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:39:31",
              structFieldName = NamePair {
                nameC = CName "field_2",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_2"},
              structFieldType = TypeExtBinding
                ResolvedExtBinding {
                  extCName = QualName {
                    qualNameName = CName "uint16_t",
                    qualNameKind =
                    NameKindOrdinary},
                  extHsRef = ExtHsRef {
                    extHsRefModule = HsModuleName
                      "HsBindgen.Runtime.Prelude",
                    extHsRefIdentifier =
                    HsIdentifier "Word16"},
                  extHsSpec = TypeSpec {
                    typeSpecModule = Just
                      (HsModuleName
                        "HsBindgen.Runtime.Prelude"),
                    typeSpecIdentifier = Just
                      (HsIdentifier "Word16"),
                    typeSpecInstances = Map.fromList
                      [
                        _×_
                          Eq
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ord
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Enum
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ix
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bounded
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Read
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Show
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          FiniteBits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Integral
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Num
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Real
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          StaticSize
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          ReadRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          WriteRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Storable
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = [
                                ]})]}},
              structFieldOffset = 16,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:40:31",
              structFieldName = NamePair {
                nameC = CName "field_3",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_3"},
              structFieldType = TypeExtBinding
                ResolvedExtBinding {
                  extCName = QualName {
                    qualNameName = CName "uint32_t",
                    qualNameKind =
                    NameKindOrdinary},
                  extHsRef = ExtHsRef {
                    extHsRefModule = HsModuleName
                      "HsBindgen.Runtime.Prelude",
                    extHsRefIdentifier =
                    HsIdentifier "Word32"},
                  extHsSpec = TypeSpec {
                    typeSpecModule = Just
                      (HsModuleName
                        "HsBindgen.Runtime.Prelude"),
                    typeSpecIdentifier = Just
                      (HsIdentifier "Word32"),
                    typeSpecInstances = Map.fromList
                      [
                        _×_
                          Eq
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ord
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Enum
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ix
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bounded
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Read
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Show
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          FiniteBits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Integral
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Num
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Real
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          StaticSize
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          ReadRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          WriteRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Storable
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = [
                                ]})]}},
              structFieldOffset = 32,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:41:31",
              structFieldName = NamePair {
                nameC = CName "field_4",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_4"},
              structFieldType = TypeTypedef
                (TypedefSquashed
                  (CName
                    "another_typedef_struct_t")
                  (TypeStruct
                    NamePair {
                      nameC = CName
                        "another_typedef_struct_t",
                      nameHsIdent = HsIdentifier
                        "Another_typedef_struct_t"}
                    (NameOriginGenerated
                      (AnonId
                        "distilled_lib_1.h:9:9")))),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:42:31",
              structFieldName = NamePair {
                nameC = CName "field_5",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_5"},
              structFieldType = TypePointer
                (TypeTypedef
                  (TypedefSquashed
                    (CName
                      "another_typedef_struct_t")
                    (TypeStruct
                      NamePair {
                        nameC = CName
                          "another_typedef_struct_t",
                        nameHsIdent = HsIdentifier
                          "Another_typedef_struct_t"}
                      (NameOriginGenerated
                        (AnonId
                          "distilled_lib_1.h:9:9"))))),
              structFieldOffset = 128,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:43:31",
              structFieldName = NamePair {
                nameC = CName "field_6",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_6"},
              structFieldType = TypePointer
                TypeVoid,
              structFieldOffset = 192,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:44:31",
              structFieldName = NamePair {
                nameC = CName "field_7",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_7"},
              structFieldType = TypeConstArray
                7
                (TypeExtBinding
                  ResolvedExtBinding {
                    extCName = QualName {
                      qualNameName = CName "uint32_t",
                      qualNameKind =
                      NameKindOrdinary},
                    extHsRef = ExtHsRef {
                      extHsRefModule = HsModuleName
                        "HsBindgen.Runtime.Prelude",
                      extHsRefIdentifier =
                      HsIdentifier "Word32"},
                    extHsSpec = TypeSpec {
                      typeSpecModule = Just
                        (HsModuleName
                          "HsBindgen.Runtime.Prelude"),
                      typeSpecIdentifier = Just
                        (HsIdentifier "Word32"),
                      typeSpecInstances = Map.fromList
                        [
                          _×_
                            Eq
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Ord
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Enum
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Ix
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Bounded
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Read
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Show
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Bits
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            FiniteBits
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Integral
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Num
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Real
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            StaticSize
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            ReadRaw
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            WriteRaw
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Storable
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = [
                                  ]})]}}),
              structFieldOffset = 256,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:45:31",
              structFieldName = NamePair {
                nameC = CName "field_8",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_8"},
              structFieldType = TypeTypedef
                (TypedefSquashed
                  (CName "another_typedef_enum_e")
                  (TypeEnum
                    NamePair {
                      nameC = CName
                        "another_typedef_enum_e",
                      nameHsIdent = HsIdentifier
                        "Another_typedef_enum_e"}
                    (NameOriginGenerated
                      (AnonId
                        "distilled_lib_1.h:10:9")))),
              structFieldOffset = 480,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:46:31",
              structFieldName = NamePair {
                nameC = CName "field_9",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_9"},
              structFieldType = TypeConstArray
                4
                (TypeTypedef
                  (TypedefSquashed
                    (CName "another_typedef_enum_e")
                    (TypeEnum
                      NamePair {
                        nameC = CName
                          "another_typedef_enum_e",
                        nameHsIdent = HsIdentifier
                          "Another_typedef_enum_e"}
                      (NameOriginGenerated
                        (AnonId
                          "distilled_lib_1.h:10:9"))))),
              structFieldOffset = 512,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "distilled_lib_1.h:47:31",
              structFieldName = NamePair {
                nameC = CName "field_10",
                nameHsIdent = HsIdentifier
                  "a_typedef_struct_t_field_10"},
              structFieldType = TypeConstArray
                5
                (TypeConstArray
                  3
                  (TypeTypedef
                    (TypedefSquashed
                      (CName "another_typedef_enum_e")
                      (TypeEnum
                        NamePair {
                          nameC = CName
                            "another_typedef_enum_e",
                          nameHsIdent = HsIdentifier
                            "Another_typedef_enum_e"}
                        (NameOriginGenerated
                          (AnonId
                            "distilled_lib_1.h:10:9")))))),
              structFieldOffset = 640,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:53:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_0",
          nameHsIdent = HsIdentifier
            "a_DEFINE_0"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0x00",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 0}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:54:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_1",
          nameHsIdent = HsIdentifier
            "a_DEFINE_1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0x5050U",
                  integerLiteralType = Int
                    Unsigned,
                  integerLiteralValue = 20560}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:55:9",
        declId = NamePair {
          nameC = CName "A_DEFINE_2",
          nameHsIdent = HsIdentifier
            "a_DEFINE_2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "2",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 2}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:56:9",
        declId = NamePair {
          nameC = CName "TWO_ARGS",
          nameHsIdent = HsIdentifier
            "tWO_ARGS"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MTuple
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "0x3456",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 13398}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "0x789A",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 30874})],
            macroExprType =
            "Tuple2 (IntLike (CIntegralType (IntLike (Int Signed)))) (IntLike (CIntegralType (IntLike (Int Signed))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:61:9",
        declId = NamePair {
          nameC = CName
            "a_typedef_enum_e",
          nameHsIdent = HsIdentifier
            "A_typedef_enum_e"},
        declOrigin = NameOriginGenerated
          (AnonId
            "distilled_lib_1.h:61:9"),
        declAliases = [
          CName "a_typedef_enum_e"],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "A_typedef_enum_e",
            newtypeField = HsName
              "@NsVar"
              "un_A_typedef_enum_e"},
          enumType = TypePrim
            (PrimChar
              (PrimSignExplicit Unsigned)),
          enumSizeof = 1,
          enumAlignment = 1,
          enumConstants = [
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:63:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_0",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_0"},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:64:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_1",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_1"},
              enumConstantValue = 1},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:65:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_2",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_2"},
              enumConstantValue = 2},
            EnumConstant {
              enumConstantLoc =
              "distilled_lib_1.h:66:3",
              enumConstantName = NamePair {
                nameC = CName "ENUM_CASE_3",
                nameHsIdent = HsIdentifier
                  "ENUM_CASE_3"},
              enumConstantValue = 3}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:72:9",
        declId = NamePair {
          nameC = CName "some_fun",
          nameHsIdent = HsIdentifier
            "some_fun"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = CName "a_type_t",
                    nameHsIdent = HsIdentifier
                      "A_type_t"})),
            TypeExtBinding
              ResolvedExtBinding {
                extCName = QualName {
                  qualNameName = CName "uint32_t",
                  qualNameKind =
                  NameKindOrdinary},
                extHsRef = ExtHsRef {
                  extHsRefModule = HsModuleName
                    "HsBindgen.Runtime.Prelude",
                  extHsRefIdentifier =
                  HsIdentifier "Word32"},
                extHsSpec = TypeSpec {
                  typeSpecModule = Just
                    (HsModuleName
                      "HsBindgen.Runtime.Prelude"),
                  typeSpecIdentifier = Just
                    (HsIdentifier "Word32"),
                  typeSpecInstances = Map.fromList
                    [
                      _×_
                        Eq
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Ord
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Enum
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Ix
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Bounded
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Read
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Show
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Bits
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        FiniteBits
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Integral
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Num
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Real
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        StaticSize
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        ReadRaw
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        WriteRaw
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = []}),
                      _×_
                        Storable
                        (Require
                          InstanceSpec {
                            instanceSpecStrategy = Nothing,
                            instanceSpecConstraints = [
                              ]})]}},
            TypeIncompleteArray
              (TypeExtBinding
                ResolvedExtBinding {
                  extCName = QualName {
                    qualNameName = CName "uint8_t",
                    qualNameKind =
                    NameKindOrdinary},
                  extHsRef = ExtHsRef {
                    extHsRefModule = HsModuleName
                      "HsBindgen.Runtime.Prelude",
                    extHsRefIdentifier =
                    HsIdentifier "Word8"},
                  extHsSpec = TypeSpec {
                    typeSpecModule = Just
                      (HsModuleName
                        "HsBindgen.Runtime.Prelude"),
                    typeSpecIdentifier = Just
                      (HsIdentifier "Word8"),
                    typeSpecInstances = Map.fromList
                      [
                        _×_
                          Eq
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ord
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Enum
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ix
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bounded
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Read
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Show
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          FiniteBits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Integral
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Num
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Real
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          StaticSize
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          ReadRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          WriteRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Storable
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = [
                                ]})]}})],
          functionRes = TypeExtBinding
            ResolvedExtBinding {
              extCName = QualName {
                qualNameName = CName "int32_t",
                qualNameKind =
                NameKindOrdinary},
              extHsRef = ExtHsRef {
                extHsRefModule = HsModuleName
                  "HsBindgen.Runtime.Prelude",
                extHsRefIdentifier =
                HsIdentifier "Int32"},
              extHsSpec = TypeSpec {
                typeSpecModule = Just
                  (HsModuleName
                    "HsBindgen.Runtime.Prelude"),
                typeSpecIdentifier = Just
                  (HsIdentifier "Int32"),
                typeSpecInstances = Map.fromList
                  [
                    _×_
                      Eq
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Ord
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Enum
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Ix
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Bounded
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Read
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Show
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Bits
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      FiniteBits
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Integral
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Num
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Real
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      StaticSize
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      ReadRaw
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      WriteRaw
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = []}),
                    _×_
                      Storable
                      (Require
                        InstanceSpec {
                          instanceSpecStrategy = Nothing,
                          instanceSpecConstraints = [
                            ]})]}}},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:77:19",
        declId = NamePair {
          nameC = CName "callback_t",
          nameHsIdent = HsIdentifier
            "Callback_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Callback_t",
            newtypeField = HsName
              "@NsVar"
              "un_Callback_t"},
          typedefType = TypePointer
            (TypeFun
              [
                TypePointer TypeVoid,
                TypeExtBinding
                  ResolvedExtBinding {
                    extCName = QualName {
                      qualNameName = CName "uint32_t",
                      qualNameKind =
                      NameKindOrdinary},
                    extHsRef = ExtHsRef {
                      extHsRefModule = HsModuleName
                        "HsBindgen.Runtime.Prelude",
                      extHsRefIdentifier =
                      HsIdentifier "Word32"},
                    extHsSpec = TypeSpec {
                      typeSpecModule = Just
                        (HsModuleName
                          "HsBindgen.Runtime.Prelude"),
                      typeSpecIdentifier = Just
                        (HsIdentifier "Word32"),
                      typeSpecInstances = Map.fromList
                        [
                          _×_
                            Eq
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Ord
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Enum
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Ix
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Bounded
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Read
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Show
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Bits
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            FiniteBits
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Integral
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Num
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Real
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            StaticSize
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            ReadRaw
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            WriteRaw
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = []}),
                          _×_
                            Storable
                            (Require
                              InstanceSpec {
                                instanceSpecStrategy = Nothing,
                                instanceSpecConstraints = [
                                  ]})]}}]
              (TypeExtBinding
                ResolvedExtBinding {
                  extCName = QualName {
                    qualNameName = CName "uint32_t",
                    qualNameKind =
                    NameKindOrdinary},
                  extHsRef = ExtHsRef {
                    extHsRefModule = HsModuleName
                      "HsBindgen.Runtime.Prelude",
                    extHsRefIdentifier =
                    HsIdentifier "Word32"},
                  extHsSpec = TypeSpec {
                    typeSpecModule = Just
                      (HsModuleName
                        "HsBindgen.Runtime.Prelude"),
                    typeSpecIdentifier = Just
                      (HsIdentifier "Word32"),
                    typeSpecInstances = Map.fromList
                      [
                        _×_
                          Eq
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ord
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Enum
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Ix
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bounded
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Read
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Show
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Bits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          FiniteBits
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Integral
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Num
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Real
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          StaticSize
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          ReadRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          WriteRaw
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = []}),
                        _×_
                          Storable
                          (Require
                            InstanceSpec {
                              instanceSpecStrategy = Nothing,
                              instanceSpecConstraints = [
                                ]})]}}))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "distilled_lib_1.h:91:14",
        declId = NamePair {
          nameC = CName "v",
          nameHsIdent = HsIdentifier "v"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "distilled_lib_1.h"},
      declKind = DeclExtern
        (TypeTypedef
          (TypedefRegular
            NamePair {
              nameC = CName "var_t",
              nameHsIdent = HsIdentifier
                "Var_t"})),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = [
    "stdint",
    "alltypes",
    "stdint",
    "stdbool",
    "distilled_lib_1"]}
