-- addDependentFile examples/golden/simple_structs.h
data S1
    = S1 {s1_a :: CInt, s1_b :: CChar}
    deriving stock (Eq, Show)
instance Storable S1
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure S1 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S1 s1_a_3
                                        s1_b_4 -> pokeByteOff ptr_1 (0 :: Int) s1_a_3 >> pokeByteOff ptr_1 (4 :: Int) s1_b_4}}
data S2
    = S2 {s2_a :: CChar, s2_b :: CInt, s2_c :: CFloat}
    deriving stock (Eq, Show)
instance Storable S2
    where {sizeOf = \_ -> 12 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> ((pure S2 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S2 s2_a_3
                                        s2_b_4
                                        s2_c_5 -> pokeByteOff ptr_1 (0 :: Int) s2_a_3 >> (pokeByteOff ptr_1 (4 :: Int) s2_b_4 >> pokeByteOff ptr_1 (8 :: Int) s2_c_5)}}
newtype S2_t
    = S2_t {un_S2_t :: S2}
    deriving stock (Eq, Show)
    deriving newtype Storable
data S3_t = S3_t {s3_t_a :: CChar} deriving stock (Eq, Show)
instance Storable S3_t
    where {sizeOf = \_ -> 1 :: Int;
           alignment = \_ -> 1 :: Int;
           peek = \ptr_0 -> pure S3_t <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S3_t s3_t_a_3 -> pokeByteOff ptr_1 (0 :: Int) s3_t_a_3}}
data S4
    = S4 {s4_b :: CChar, s4_a :: CInt, s4_c :: (Ptr CInt)}
    deriving stock (Eq, Show)
instance Storable S4
    where {sizeOf = \_ -> 16 :: Int;
           alignment = \_ -> 8 :: Int;
           peek = \ptr_0 -> ((pure S4 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S4 s4_b_3
                                        s4_a_4
                                        s4_c_5 -> pokeByteOff ptr_1 (0 :: Int) s4_b_3 >> (pokeByteOff ptr_1 (4 :: Int) s4_a_4 >> pokeByteOff ptr_1 (8 :: Int) s4_c_5)}}
data S5
    = S5 {s5_a :: CChar, s5_b :: CInt}
    deriving stock (Eq, Show)
instance Storable S5
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure S5 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S5 s5_a_3
                                        s5_b_4 -> pokeByteOff ptr_1 (0 :: Int) s5_a_3 >> pokeByteOff ptr_1 (4 :: Int) s5_b_4}}
data S6
    = S6 {s6_a :: CChar, s6_b :: CInt}
    deriving stock (Eq, Show)
instance Storable S6
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure S6 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S6 s6_a_3
                                        s6_b_4 -> pokeByteOff ptr_1 (0 :: Int) s6_a_3 >> pokeByteOff ptr_1 (4 :: Int) s6_b_4}}
data S7a_Deref
    = S7a_Deref {s7a_Deref_a :: CChar, s7a_Deref_b :: CInt}
    deriving stock (Eq, Show)
instance Storable S7a_Deref
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure S7a_Deref <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S7a_Deref s7a_Deref_a_3
                                               s7a_Deref_b_4 -> pokeByteOff ptr_1 (0 :: Int) s7a_Deref_a_3 >> pokeByteOff ptr_1 (4 :: Int) s7a_Deref_b_4}}
newtype S7a
    = S7a {un_S7a :: (Ptr S7a_Deref)}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
data S7b_Deref
    = S7b_Deref {s7b_Deref_a :: CChar, s7b_Deref_b :: CInt}
    deriving stock (Eq, Show)
instance Storable S7b_Deref
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure S7b_Deref <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {S7b_Deref s7b_Deref_a_3
                                               s7b_Deref_b_4 -> pokeByteOff ptr_1 (0 :: Int) s7b_Deref_a_3 >> pokeByteOff ptr_1 (4 :: Int) s7b_Deref_b_4}}
newtype S7b
    = S7b {un_S7b :: (Ptr (Ptr (Ptr S7b_Deref)))}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
