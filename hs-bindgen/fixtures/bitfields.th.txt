-- addDependentFile examples/golden/bitfields.h
{-| __C declaration:__ @flags@

    __defined at:__ @bitfields.h:1:8@

    __exported by:__ @bitfields.h@
-}
data Flags
    = Flags {flags_fieldX :: CChar
             {- ^ __C declaration:__ @fieldX@

                  __defined at:__ @bitfields.h:2:10@

                  __exported by:__ @bitfields.h@
             -},
             flags_flagA :: CInt
             {- ^ __C declaration:__ @flagA@

                  __defined at:__ @bitfields.h:3:9@

                  __exported by:__ @bitfields.h@
             -},
             flags_flagB :: CInt
             {- ^ __C declaration:__ @flagB@

                  __defined at:__ @bitfields.h:4:9@

                  __exported by:__ @bitfields.h@
             -},
             flags_flagC :: CInt
             {- ^ __C declaration:__ @flagC@

                  __defined at:__ @bitfields.h:5:9@

                  __exported by:__ @bitfields.h@
             -},
             flags_fieldY :: CChar
             {- ^ __C declaration:__ @fieldY@

                  __defined at:__ @bitfields.h:6:10@

                  __exported by:__ @bitfields.h@
             -},
             flags_bits :: CInt
             {- ^ __C declaration:__ @bits@

                  __defined at:__ @bitfields.h:7:9@

                  __exported by:__ @bitfields.h@
             -}}
      {- ^ __C declaration:__ @flags@

           __defined at:__ @bitfields.h:1:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable Flags
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (((((pure Flags <*> peekByteOff ptr_0 (0 :: Int)) <*> peekBitOffWidth ptr_0 (8 :: Int) (1 :: Int)) <*> peekBitOffWidth ptr_0 (9 :: Int) (1 :: Int)) <*> peekBitOffWidth ptr_0 (10 :: Int) (1 :: Int)) <*> peekByteOff ptr_0 (2 :: Int)) <*> peekBitOffWidth ptr_0 (24 :: Int) (2 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Flags flags_fieldX_3
                                         flags_flagA_4
                                         flags_flagB_5
                                         flags_flagC_6
                                         flags_fieldY_7
                                         flags_bits_8 -> pokeByteOff ptr_1 (0 :: Int) flags_fieldX_3 >> (pokeBitOffWidth ptr_1 (8 :: Int) (1 :: Int) flags_flagA_4 >> (pokeBitOffWidth ptr_1 (9 :: Int) (1 :: Int) flags_flagB_5 >> (pokeBitOffWidth ptr_1 (10 :: Int) (1 :: Int) flags_flagC_6 >> (pokeByteOff ptr_1 (2 :: Int) flags_fieldY_7 >> pokeBitOffWidth ptr_1 (24 :: Int) (2 :: Int) flags_bits_8))))
{-| __C declaration:__ @overflow32@

    __defined at:__ @bitfields.h:12:8@

    __exported by:__ @bitfields.h@
-}
data Overflow32
    = Overflow32 {overflow32_x :: CInt
                  {- ^ __C declaration:__ @x@

                       __defined at:__ @bitfields.h:13:9@

                       __exported by:__ @bitfields.h@
                  -},
                  overflow32_y :: CInt
                  {- ^ __C declaration:__ @y@

                       __defined at:__ @bitfields.h:14:9@

                       __exported by:__ @bitfields.h@
                  -},
                  overflow32_z :: CInt
                  {- ^ __C declaration:__ @z@

                       __defined at:__ @bitfields.h:15:9@

                       __exported by:__ @bitfields.h@
                  -}}
      {- ^ __C declaration:__ @overflow32@

           __defined at:__ @bitfields.h:12:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable Overflow32
    where sizeOf = \_ -> 12 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> ((pure Overflow32 <*> peekBitOffWidth ptr_0 (0 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (32 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (64 :: Int) (17 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Overflow32 overflow32_x_3
                                              overflow32_y_4
                                              overflow32_z_5 -> pokeBitOffWidth ptr_1 (0 :: Int) (17 :: Int) overflow32_x_3 >> (pokeBitOffWidth ptr_1 (32 :: Int) (17 :: Int) overflow32_y_4 >> pokeBitOffWidth ptr_1 (64 :: Int) (17 :: Int) overflow32_z_5)
{-| __C declaration:__ @overflow32b@

    __defined at:__ @bitfields.h:18:8@

    __exported by:__ @bitfields.h@
-}
data Overflow32b
    = Overflow32b {overflow32b_x :: CLong
                   {- ^ __C declaration:__ @x@

                        __defined at:__ @bitfields.h:19:10@

                        __exported by:__ @bitfields.h@
                   -},
                   overflow32b_y :: CLong
                   {- ^ __C declaration:__ @y@

                        __defined at:__ @bitfields.h:20:10@

                        __exported by:__ @bitfields.h@
                   -},
                   overflow32b_z :: CLong
                   {- ^ __C declaration:__ @z@

                        __defined at:__ @bitfields.h:21:10@

                        __exported by:__ @bitfields.h@
                   -}}
      {- ^ __C declaration:__ @overflow32b@

           __defined at:__ @bitfields.h:18:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable Overflow32b
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> ((pure Overflow32b <*> peekBitOffWidth ptr_0 (0 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (17 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (34 :: Int) (17 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Overflow32b overflow32b_x_3
                                               overflow32b_y_4
                                               overflow32b_z_5 -> pokeBitOffWidth ptr_1 (0 :: Int) (17 :: Int) overflow32b_x_3 >> (pokeBitOffWidth ptr_1 (17 :: Int) (17 :: Int) overflow32b_y_4 >> pokeBitOffWidth ptr_1 (34 :: Int) (17 :: Int) overflow32b_z_5)
{-| __C declaration:__ @overflow32c@

    __defined at:__ @bitfields.h:24:8@

    __exported by:__ @bitfields.h@
-}
data Overflow32c
    = Overflow32c {overflow32c_x :: CLong
                   {- ^ __C declaration:__ @x@

                        __defined at:__ @bitfields.h:25:10@

                        __exported by:__ @bitfields.h@
                   -},
                   overflow32c_y :: CInt
                   {- ^ __C declaration:__ @y@

                        __defined at:__ @bitfields.h:26:10@

                        __exported by:__ @bitfields.h@
                   -},
                   overflow32c_z :: CLong
                   {- ^ __C declaration:__ @z@

                        __defined at:__ @bitfields.h:27:10@

                        __exported by:__ @bitfields.h@
                   -}}
      {- ^ __C declaration:__ @overflow32c@

           __defined at:__ @bitfields.h:24:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable Overflow32c
    where sizeOf = \_ -> 16 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> ((pure Overflow32c <*> peekBitOffWidth ptr_0 (0 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (32 :: Int) (17 :: Int)) <*> peekBitOffWidth ptr_0 (64 :: Int) (17 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Overflow32c overflow32c_x_3
                                               overflow32c_y_4
                                               overflow32c_z_5 -> pokeBitOffWidth ptr_1 (0 :: Int) (17 :: Int) overflow32c_x_3 >> (pokeBitOffWidth ptr_1 (32 :: Int) (17 :: Int) overflow32c_y_4 >> pokeBitOffWidth ptr_1 (64 :: Int) (17 :: Int) overflow32c_z_5)
{-| __C declaration:__ @overflow64@

    __defined at:__ @bitfields.h:30:8@

    __exported by:__ @bitfields.h@
-}
data Overflow64
    = Overflow64 {overflow64_x :: CLong
                  {- ^ __C declaration:__ @x@

                       __defined at:__ @bitfields.h:31:10@

                       __exported by:__ @bitfields.h@
                  -},
                  overflow64_y :: CLong
                  {- ^ __C declaration:__ @y@

                       __defined at:__ @bitfields.h:32:10@

                       __exported by:__ @bitfields.h@
                  -}}
      {- ^ __C declaration:__ @overflow64@

           __defined at:__ @bitfields.h:30:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable Overflow64
    where sizeOf = \_ -> 16 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> (pure Overflow64 <*> peekBitOffWidth ptr_0 (0 :: Int) (33 :: Int)) <*> peekBitOffWidth ptr_0 (64 :: Int) (33 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Overflow64 overflow64_x_3
                                              overflow64_y_4 -> pokeBitOffWidth ptr_1 (0 :: Int) (33 :: Int) overflow64_x_3 >> pokeBitOffWidth ptr_1 (64 :: Int) (33 :: Int) overflow64_y_4
{-| __C declaration:__ @alignA@

    __defined at:__ @bitfields.h:36:8@

    __exported by:__ @bitfields.h@
-}
data AlignA
    = AlignA {alignA_x :: CUChar
              {- ^ __C declaration:__ @x@

                   __defined at:__ @bitfields.h:37:16@

                   __exported by:__ @bitfields.h@
              -},
              alignA_y :: CInt
              {- ^ __C declaration:__ @y@

                   __defined at:__ @bitfields.h:38:6@

                   __exported by:__ @bitfields.h@
              -}}
      {- ^ __C declaration:__ @alignA@

           __defined at:__ @bitfields.h:36:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable AlignA
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure AlignA <*> peekBitOffWidth ptr_0 (0 :: Int) (1 :: Int)) <*> peekBitOffWidth ptr_0 (1 :: Int) (10 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   AlignA alignA_x_3
                                          alignA_y_4 -> pokeBitOffWidth ptr_1 (0 :: Int) (1 :: Int) alignA_x_3 >> pokeBitOffWidth ptr_1 (1 :: Int) (10 :: Int) alignA_y_4
{-| __C declaration:__ @alignB@

    __defined at:__ @bitfields.h:41:8@

    __exported by:__ @bitfields.h@
-}
data AlignB
    = AlignB {alignB_x :: CUChar
              {- ^ __C declaration:__ @x@

                   __defined at:__ @bitfields.h:42:16@

                   __exported by:__ @bitfields.h@
              -},
              alignB_y :: CInt
              {- ^ __C declaration:__ @y@

                   __defined at:__ @bitfields.h:43:6@

                   __exported by:__ @bitfields.h@
              -}}
      {- ^ __C declaration:__ @alignB@

           __defined at:__ @bitfields.h:41:8@

           __exported by:__ @bitfields.h@
      -}
    deriving stock (Eq, Show)
instance Storable AlignB
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure AlignB <*> peekBitOffWidth ptr_0 (0 :: Int) (7 :: Int)) <*> peekBitOffWidth ptr_0 (32 :: Int) (31 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   AlignB alignB_x_3
                                          alignB_y_4 -> pokeBitOffWidth ptr_1 (0 :: Int) (7 :: Int) alignB_x_3 >> pokeBitOffWidth ptr_1 (32 :: Int) (31 :: Int) alignB_y_4
