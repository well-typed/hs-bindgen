-- addDependentFile examples/golden/array.h
-- #include <array.h>
-- __attribute__ ((const)) signed int (*get_arr0_ptr (void))[3] { return &arr0; } 
-- __attribute__ ((const)) signed int (*get_arr1_ptr (void))[3] { return &arr1; } 
-- __attribute__ ((const)) signed int (*get_arr2_ptr (void))[3] { return &arr2; } 
-- __attribute__ ((const)) signed int (*get_arr3_ptr (void))[3] { return &arr3; } 
-- __attribute__ ((const)) signed int (*get_arr6_ptr (void))[1] { return &arr6; } 
-- __attribute__ ((const)) signed int (*get_arr7_ptr (void))[] { return &arr7; } 
-- __attribute__ ((const)) signed int (*get_arr_1_ptr (void))[3] { return &arr_1; } 
-- __attribute__ ((const)) triplet *get_arr_2_ptr (void) { return &arr_2; } 
-- __attribute__ ((const)) signed int (*get_arr_3_ptr (void))[] { return &arr_3; } 
-- __attribute__ ((const)) list *get_arr_4_ptr (void) { return &arr_4; } 
-- __attribute__ ((const)) signed int (*get_arr_5_ptr (void))[4][3] { return &arr_5; } 
-- __attribute__ ((const)) matrix *get_arr_6_ptr (void) { return &arr_6; } 
-- __attribute__ ((const)) signed int (*get_arr_7_ptr (void))[][3] { return &arr_7; } 
-- __attribute__ ((const)) tripletlist *get_arr_8_ptr (void) { return &arr_8; } 
-- signed int test_internal_fun_1 (signed int arg1, signed int *arg2) { return fun_1(arg1, arg2); }
-- signed int test_internal_fun_2 (signed int *arg1) { return fun_2(arg1); }
-- signed int test_internal_fun_3 (signed int *arg1) { return fun_3(arg1); }
-- signed int test_internal_fun_4 (signed int *arg1) { return fun_4(arg1); }
-- signed int test_internal_fun_5 (signed int (*arg1)[3]) { return fun_5(arg1); }
-- signed int test_internal_fun_6 (signed int (*arg1)[3]) { return fun_6(arg1); }
-- signed int test_internal_fun_7 (signed int (*arg1)[3]) { return fun_7(arg1); }
-- signed int test_internal_fun_8 (signed int (*arg1)[3]) { return fun_8(arg1); }
-- signed int (*test_internal_fun_9 (void))[3] { return fun_9(); }
-- triplet *test_internal_fun_10 (void) { return fun_10(); }
-- signed int (*test_internal_fun_11 (void))[] { return fun_11(); }
-- list *test_internal_fun_12 (void) { return fun_12(); }
-- signed int (*test_internal_fun_13 (void))[4][3] { return fun_13(); }
-- matrix *test_internal_fun_14 (void) { return fun_14(); }
-- signed int (*test_internal_fun_15 (void))[][3] { return fun_15(); }
-- tripletlist *test_internal_fun_16 (void) { return fun_16(); }
{-| Global, complete, not initialised

-}
foreign import ccall safe "get_arr0_ptr" arr0_ptr :: Ptr (ConstantArray 3
                                                                        CInt)
{-| Global, complete, initialised

-}
foreign import ccall safe "get_arr1_ptr" arr1_ptr :: Ptr (ConstantArray 3
                                                                        CInt)
{-| Global, extern, complete, not initialised

-}
foreign import ccall safe "get_arr2_ptr" arr2_ptr :: Ptr (ConstantArray 3
                                                                        CInt)
{-| Global, extern, complete, initialised

-}
foreign import ccall safe "get_arr3_ptr" arr3_ptr :: Ptr (ConstantArray 3
                                                                        CInt)
{-| Global, incomplete

-}
foreign import ccall safe "get_arr6_ptr" arr6_ptr :: Ptr (ConstantArray 1
                                                                        CInt)
{-| Global, extern, incomplete

-}
foreign import ccall safe "get_arr7_ptr" arr7_ptr :: Ptr (IncompleteArray CInt)
newtype Triplet
    = Triplet {un_Triplet :: (ConstantArray 3 CInt)}
    deriving stock (Eq, Show)
    deriving newtype Storable
newtype List
    = List {un_List :: (IncompleteArray CInt)}
    deriving stock (Eq, Show)
newtype Matrix
    = Matrix {un_Matrix :: (ConstantArray 4 (ConstantArray 3 CInt))}
    deriving stock (Eq, Show)
    deriving newtype Storable
newtype Tripletlist
    = Tripletlist {un_Tripletlist :: (IncompleteArray (ConstantArray 3
                                                                     CInt))}
    deriving stock (Eq, Show)
data Example
    = Example {example_triple :: (ConstantArray 3 CInt),
               example_sudoku :: (ConstantArray 3 (ConstantArray 3 CInt))}
    deriving stock (Eq, Show)
instance Storable Example
    where sizeOf = \_ -> 48 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure Example <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (12 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Example example_triple_3
                                           example_sudoku_4 -> pokeByteOff ptr_1 (0 :: Int) example_triple_3 >> pokeByteOff ptr_1 (12 :: Int) example_sudoku_4
{-| Array of known size

-}
foreign import ccall safe "get_arr_1_ptr" arr_1_ptr :: Ptr (ConstantArray 3
                                                                          CInt)
{-| Array of known size, typedef

-}
foreign import ccall safe "get_arr_2_ptr" arr_2_ptr :: Ptr Triplet
{-| Array of unknown size

-}
foreign import ccall safe "get_arr_3_ptr" arr_3_ptr :: Ptr (IncompleteArray CInt)
{-| Array of unknown size, typedef

-}
foreign import ccall safe "get_arr_4_ptr" arr_4_ptr :: Ptr List
{-| Multi-dimensional array of known size

-}
foreign import ccall safe "get_arr_5_ptr" arr_5_ptr :: Ptr (ConstantArray 4
                                                                          (ConstantArray 3 CInt))
{-| Multi-dimensional array of known size, typedef

-}
foreign import ccall safe "get_arr_6_ptr" arr_6_ptr :: Ptr Matrix
{-| Multi-dimensional array of unknown size

-}
foreign import ccall safe "get_arr_7_ptr" arr_7_ptr :: Ptr (IncompleteArray (ConstantArray 3
                                                                                           CInt))
{-| Multi-dimensional array of unknown size, typedef

-}
foreign import ccall safe "get_arr_8_ptr" arr_8_ptr :: Ptr Tripletlist
{-| Array of known size

-}
foreign import ccall safe "test_internal_fun_1" fun_1_wrapper :: CInt ->
                                                                 Ptr CInt -> IO CInt
fun_1 :: CInt -> ConstantArray 3 CInt -> IO CInt
fun_1 = \x_0 -> \x_1 -> withPtr x_1 (\ptr_2 -> fun_1_wrapper x_0 ptr_2)
{-| Array of known size, typedef

-}
foreign import ccall safe "test_internal_fun_2" fun_2_wrapper :: Ptr CInt ->
                                                                 IO CInt
fun_2 :: Triplet -> IO CInt
fun_2 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_2_wrapper ptr_1)
{-| Array of unknown size

-}
foreign import ccall safe "test_internal_fun_3" fun_3_wrapper :: Ptr CInt ->
                                                                 IO CInt
fun_3 :: IncompleteArray CInt -> IO CInt
fun_3 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_3_wrapper ptr_1)
{-| Array of unknown size, typedef

-}
foreign import ccall safe "test_internal_fun_4" fun_4_wrapper :: Ptr CInt ->
                                                                 IO CInt
fun_4 :: List -> IO CInt
fun_4 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_4_wrapper ptr_1)
{-| Multi-dimensional array of known size

-}
foreign import ccall safe "test_internal_fun_5" fun_5_wrapper :: Ptr (ConstantArray 3
                                                                                    CInt) ->
                                                                 IO CInt
fun_5 :: ConstantArray 4 (ConstantArray 3 CInt) -> IO CInt
fun_5 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_5_wrapper ptr_1)
{-| Multi-dimensional array of known size, typedef

-}
foreign import ccall safe "test_internal_fun_6" fun_6_wrapper :: Ptr (ConstantArray 3
                                                                                    CInt) ->
                                                                 IO CInt
fun_6 :: Matrix -> IO CInt
fun_6 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_6_wrapper ptr_1)
{-| Multi-dimensional array of unknown size

-}
foreign import ccall safe "test_internal_fun_7" fun_7_wrapper :: Ptr (ConstantArray 3
                                                                                    CInt) ->
                                                                 IO CInt
fun_7 :: IncompleteArray (ConstantArray 3 CInt) -> IO CInt
fun_7 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_7_wrapper ptr_1)
{-| Multi-dimensional array of unknown size, typedef

-}
foreign import ccall safe "test_internal_fun_8" fun_8_wrapper :: Ptr (ConstantArray 3
                                                                                    CInt) ->
                                                                 IO CInt
fun_8 :: Tripletlist -> IO CInt
fun_8 = \x_0 -> withPtr x_0 (\ptr_1 -> fun_8_wrapper ptr_1)
{-| Array of known size

-}
foreign import ccall safe "test_internal_fun_9" fun_9 :: IO (Ptr (ConstantArray 3
                                                                                CInt))
{-| Array of known size, typedef

-}
foreign import ccall safe "test_internal_fun_10" fun_10 :: IO (Ptr Triplet)
{-| Array of unknown size

-}
foreign import ccall safe "test_internal_fun_11" fun_11 :: IO (Ptr (IncompleteArray CInt))
{-| Array of unknown size, typedef

-}
foreign import ccall safe "test_internal_fun_12" fun_12 :: IO (Ptr List)
{-| Multi-dimensional array of known size

-}
foreign import ccall safe "test_internal_fun_13" fun_13 :: IO (Ptr (ConstantArray 4
                                                                                  (ConstantArray 3
                                                                                                 CInt)))
{-| Multi-dimensional array of known size, typedef

-}
foreign import ccall safe "test_internal_fun_14" fun_14 :: IO (Ptr Matrix)
{-| Multi-dimensional array of unknown size

-}
foreign import ccall safe "test_internal_fun_15" fun_15 :: IO (Ptr (IncompleteArray (ConstantArray 3
                                                                                                   CInt)))
{-| Multi-dimensional array of unknown size, typedef

-}
foreign import ccall safe "test_internal_fun_16" fun_16 :: IO (Ptr Tripletlist)
