-- addDependentFile examples/macro_in_fundecl.h
-- #include "macro_in_fundecl.h"
-- char test_internal_quux (F arg1, char arg2);
-- C *test_internal_wam (float arg1, C *arg2);
-- char *test_internal_foo1 (float arg1, signed int (*arg2) (signed int arg1));
-- char *test_internal_foo2 (F arg1, signed int (*arg2) (signed int arg1));
-- C *test_internal_foo3 (float arg1, signed int (*arg2) (signed int arg1));
-- signed int (*test_internal_bar1) (signed short arg1) (signed long arg1);
-- signed int (*test_internal_bar2) (signed short arg1) (L arg1);
-- signed int (*test_internal_bar3) (S arg1) (signed long arg1);
-- I (*test_internal_bar4) (signed short arg1) (signed long arg1);
-- signed int *test_internal_baz1[2][3] (signed int arg1);
-- signed int *test_internal_baz2[2][3] (I arg1);
-- I *test_internal_baz3[2][3] (signed int arg1);
-- I test_internal_no_args_no_void (void);
newtype I = I {un_I :: CInt}
deriving newtype instance Storable I
deriving stock instance Eq I
deriving stock instance Ord I
deriving stock instance Read I
deriving stock instance Show I
deriving newtype instance Enum I
deriving newtype instance Ix I
deriving newtype instance Bounded I
deriving newtype instance Bits I
deriving newtype instance FiniteBits I
deriving newtype instance Integral I
deriving newtype instance Num I
deriving newtype instance Real I
newtype C = C {un_C :: CChar}
deriving newtype instance Storable C
deriving stock instance Eq C
deriving stock instance Ord C
deriving stock instance Read C
deriving stock instance Show C
deriving newtype instance Enum C
deriving newtype instance Ix C
deriving newtype instance Bounded C
deriving newtype instance Bits C
deriving newtype instance FiniteBits C
deriving newtype instance Integral C
deriving newtype instance Num C
deriving newtype instance Real C
newtype F = F {un_F :: CFloat}
deriving newtype instance Storable F
deriving stock instance Eq F
deriving stock instance Ord F
deriving stock instance Read F
deriving stock instance Show F
deriving newtype instance Enum F
deriving newtype instance Floating F
deriving newtype instance Fractional F
deriving newtype instance Num F
deriving newtype instance Real F
deriving newtype instance RealFloat F
deriving newtype instance RealFrac F
newtype L = L {un_L :: CLong}
deriving newtype instance Storable L
deriving stock instance Eq L
deriving stock instance Ord L
deriving stock instance Read L
deriving stock instance Show L
deriving newtype instance Enum L
deriving newtype instance Ix L
deriving newtype instance Bounded L
deriving newtype instance Bits L
deriving newtype instance FiniteBits L
deriving newtype instance Integral L
deriving newtype instance Num L
deriving newtype instance Real L
newtype S = S {un_S :: CShort}
deriving newtype instance Storable S
deriving stock instance Eq S
deriving stock instance Ord S
deriving stock instance Read S
deriving stock instance Show S
deriving newtype instance Enum S
deriving newtype instance Ix S
deriving newtype instance Bounded S
deriving newtype instance Bits S
deriving newtype instance FiniteBits S
deriving newtype instance Integral S
deriving newtype instance Num S
deriving newtype instance Real S
foreign import capi safe "macro_in_fundecl.h quux" quux :: F ->
                                                           CChar -> IO CChar
foreign import capi safe "macro_in_fundecl.h wam" wam :: CFloat ->
                                                         Ptr C -> IO (Ptr C)
foreign import capi safe "macro_in_fundecl.h foo1" foo1 :: CFloat ->
                                                           FunPtr (CInt -> IO CInt) ->
                                                           IO (Ptr CChar)
foreign import capi safe "macro_in_fundecl.h foo2" foo2 :: F ->
                                                           FunPtr (CInt -> IO CInt) ->
                                                           IO (Ptr CChar)
foreign import capi safe "macro_in_fundecl.h foo3" foo3 :: CFloat ->
                                                           FunPtr (CInt -> IO CInt) -> IO (Ptr C)
foreign import capi safe "macro_in_fundecl.h bar1" bar1 :: CLong ->
                                                           IO (FunPtr (CShort -> IO CInt))
foreign import capi safe "macro_in_fundecl.h bar2" bar2 :: L ->
                                                           IO (FunPtr (CShort -> IO CInt))
foreign import capi safe "macro_in_fundecl.h bar3" bar3 :: CLong ->
                                                           IO (FunPtr (S -> IO CInt))
foreign import capi safe "macro_in_fundecl.h bar4" bar4 :: CLong ->
                                                           IO (FunPtr (CShort -> IO I))
foreign import capi safe "macro_in_fundecl.h baz1" baz1 :: CInt ->
                                                           IO (Ptr (ConstantArray 2
                                                                                  (ConstantArray 3
                                                                                                 CInt)))
foreign import capi safe "macro_in_fundecl.h baz2" baz2 :: I ->
                                                           IO (Ptr (ConstantArray 2
                                                                                  (ConstantArray 3
                                                                                                 CInt)))
foreign import capi safe "macro_in_fundecl.h baz3" baz3 :: CInt ->
                                                           IO (Ptr (ConstantArray 2
                                                                                  (ConstantArray 3
                                                                                                 I)))
foreign import capi safe "macro_in_fundecl.h no_args_no_void" no_args_no_void :: IO I
