-- addDependentFile examples/golden/macro_in_fundecl.h
-- #include <macro_in_fundecl.h>
-- char test_internal_quux (float arg1, char arg2) { return quux(arg1, arg2); }
-- char *test_internal_wam (float arg1, char *arg2) { return wam(arg1, arg2); }
-- char *test_internal_foo1 (float arg1, signed int (*arg2) (signed int arg1)) { return foo1(arg1, arg2); }
-- char *test_internal_foo2 (float arg1, signed int (*arg2) (signed int arg1)) { return foo2(arg1, arg2); }
-- char *test_internal_foo3 (float arg1, signed int (*arg2) (signed int arg1)) { return foo3(arg1, arg2); }
-- signed int (*test_internal_bar1 (signed long arg1)) (signed short arg1) { return bar1(arg1); }
-- signed int (*test_internal_bar2 (signed long arg1)) (signed short arg1) { return bar2(arg1); }
-- signed int (*test_internal_bar3 (signed long arg1)) (signed short arg1) { return bar3(arg1); }
-- signed int (*test_internal_bar4 (signed long arg1)) (signed short arg1) { return bar4(arg1); }
-- signed int (*test_internal_baz1 (signed int arg1))[2][3] { return baz1(arg1); }
-- signed int (*test_internal_baz2 (signed int arg1))[2][3] { return baz2(arg1); }
-- signed int (*test_internal_baz3 (signed int arg1))[2][3] { return baz3(arg1); }
-- I test_internal_no_args_no_void (void) { return no_args_no_void(); }
newtype I
    = I {un_I :: CInt}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype C
    = C {un_C :: CChar}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype F
    = F {un_F :: CFloat}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Enum,
                      Floating,
                      Fractional,
                      Num,
                      Real,
                      RealFloat,
                      RealFrac)
newtype L
    = L {un_L :: CLong}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype S
    = S {un_S :: CShort}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
foreign import ccall safe "test_internal_quux" quux :: CFloat ->
                                                       CChar -> IO CChar
foreign import ccall safe "test_internal_wam" wam :: CFloat ->
                                                     Ptr CChar -> IO (Ptr CChar)
foreign import ccall safe "test_internal_foo1" foo1 :: CFloat ->
                                                       FunPtr (CInt -> IO CInt) -> IO (Ptr CChar)
foreign import ccall safe "test_internal_foo2" foo2 :: CFloat ->
                                                       FunPtr (CInt -> IO CInt) -> IO (Ptr CChar)
foreign import ccall safe "test_internal_foo3" foo3 :: CFloat ->
                                                       FunPtr (CInt -> IO CInt) -> IO (Ptr CChar)
foreign import ccall safe "test_internal_bar1" bar1 :: CLong ->
                                                       IO (FunPtr (CShort -> IO CInt))
foreign import ccall safe "test_internal_bar2" bar2 :: CLong ->
                                                       IO (FunPtr (CShort -> IO CInt))
foreign import ccall safe "test_internal_bar3" bar3 :: CLong ->
                                                       IO (FunPtr (CShort -> IO CInt))
foreign import ccall safe "test_internal_bar4" bar4 :: CLong ->
                                                       IO (FunPtr (CShort -> IO CInt))
foreign import ccall safe "test_internal_baz1" baz1 :: CInt ->
                                                       IO (Ptr (ConstantArray 2
                                                                              (ConstantArray 3
                                                                                             CInt)))
foreign import ccall safe "test_internal_baz2" baz2 :: CInt ->
                                                       IO (Ptr (ConstantArray 2
                                                                              (ConstantArray 3
                                                                                             CInt)))
foreign import ccall safe "test_internal_baz3" baz3 :: CInt ->
                                                       IO (Ptr (ConstantArray 2
                                                                              (ConstantArray 3
                                                                                             CInt)))
foreign import ccall safe "test_internal_no_args_no_void" no_args_no_void :: IO I
