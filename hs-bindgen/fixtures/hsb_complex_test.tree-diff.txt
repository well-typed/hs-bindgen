TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:3:23",
        declId = NamePair {
          nameC = Name
            "global_complex_float",
          nameHsIdent = Identifier
            "global_complex_float"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimFloat)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:4:23",
        declId = NamePair {
          nameC = Name
            "global_complex_double",
          nameHsIdent = Identifier
            "global_complex_double"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimDouble)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:6:23",
        declId = NamePair {
          nameC = Name
            "global_complex_float_flipped",
          nameHsIdent = Identifier
            "global_complex_float_flipped"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimFloat)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:7:23",
        declId = NamePair {
          nameC = Name
            "global_complex_double_flipped",
          nameHsIdent = Identifier
            "global_complex_double_flipped"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimDouble)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:9:24",
        declId = NamePair {
          nameC = Name
            "global_Complex_float",
          nameHsIdent = Identifier
            "global_Complex_float"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimFloat)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:10:24",
        declId = NamePair {
          nameC = Name
            "global_Complex_double",
          nameHsIdent = Identifier
            "global_Complex_double"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimDouble)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:12:24",
        declId = NamePair {
          nameC = Name
            "global_Complex_float_flipped",
          nameHsIdent = Identifier
            "global_Complex_float_flipped"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimFloat)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:13:24",
        declId = NamePair {
          nameC = Name
            "global_Complex_double_flipped",
          nameHsIdent = Identifier
            "global_Complex_double_flipped"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimDouble)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:15:29",
        declId = NamePair {
          nameC = Name
            "const_complex_float",
          nameHsIdent = Identifier
            "const_complex_float"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeQualified
          TypeQualifierConst
          (TypeComplex
            (PrimFloating PrimFloat))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:16:29",
        declId = NamePair {
          nameC = Name
            "const_complex_double",
          nameHsIdent = Identifier
            "const_complex_double"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeQualified
          TypeQualifierConst
          (TypeComplex
            (PrimFloating PrimDouble))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:18:23",
        declId = NamePair {
          nameC = Name
            "volatile_complex_float",
          nameHsIdent = Identifier
            "volatile_complex_float"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimFloat)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:19:23",
        declId = NamePair {
          nameC = Name
            "volatile_complex_double",
          nameHsIdent = Identifier
            "volatile_complex_double"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeComplex
          (PrimFloating PrimDouble)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:21:16",
        declId = NamePair {
          nameC = Name
            "multiply_complex_f",
          nameHsIdent = Identifier
            "multiply_complex_f"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier "a"})
              (TypeComplex
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "b",
                  nameHsIdent = Identifier "b"})
              (TypeComplex
                (PrimFloating PrimFloat))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeComplex
            (PrimFloating PrimFloat)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:22:16",
        declId = NamePair {
          nameC = Name "add_complex",
          nameHsIdent = Identifier
            "add_complex"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "a",
                  nameHsIdent = Identifier "a"})
              (TypeComplex
                (PrimFloating PrimDouble)),
            _×_
              (Just
                NamePair {
                  nameC = Name "b",
                  nameHsIdent = Identifier "b"})
              (TypeComplex
                (PrimFloating PrimDouble))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeComplex
            (PrimFloating PrimDouble)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:24:9",
        declId = NamePair {
          nameC = Name "complex_object_t",
          nameHsIdent = Identifier
            "Complex_object_t"},
        declOrigin = NameOriginGenerated
          (AnonId
            "hsb_complex_test.h:24:9"),
        declAliases = [
          Name "complex_object_t"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "Complex_object_t"),
          structSizeof = 32,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "hsb_complex_test.h:25:20",
                fieldName = NamePair {
                  nameC = Name "velocity",
                  nameHsIdent = Identifier
                    "complex_object_t_velocity"},
                fieldComment = Nothing},
              structFieldType = TypeComplex
                (PrimFloating PrimFloat),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "hsb_complex_test.h:26:20",
                fieldName = NamePair {
                  nameC = Name "position",
                  nameHsIdent = Identifier
                    "complex_object_t_position"},
                fieldComment = Nothing},
              structFieldType = TypeComplex
                (PrimFloating PrimDouble),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "hsb_complex_test.h:27:9",
                fieldName = NamePair {
                  nameC = Name "id",
                  nameHsIdent = Identifier
                    "complex_object_t_id"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 192,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:30:23",
        declId = NamePair {
          nameC = Name
            "complex_float_array",
          nameHsIdent = Identifier
            "complex_float_array"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeConstArray
          10
          (TypeComplex
            (PrimFloating PrimFloat))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "hsb_complex_test.h:31:23",
        declId = NamePair {
          nameC = Name
            "complex_double_array",
          nameHsIdent = Identifier
            "complex_double_array"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["hsb_complex_test.h"],
            headerInclude =
            "hsb_complex_test.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypeConstArray
          10
          (TypeComplex
            (PrimFloating PrimDouble))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = [
    "complex",
    "hsb_complex_test"]}
