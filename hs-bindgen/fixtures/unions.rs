/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dim2 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim2"][::std::mem::size_of::<Dim2>() - 8usize];
    ["Alignment of Dim2"][::std::mem::align_of::<Dim2>() - 4usize];
    ["Offset of field: Dim2::x"][::std::mem::offset_of!(Dim2, x) - 0usize];
    ["Offset of field: Dim2::y"][::std::mem::offset_of!(Dim2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dim3 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim3"][::std::mem::size_of::<Dim3>() - 12usize];
    ["Alignment of Dim3"][::std::mem::align_of::<Dim3>() - 4usize];
    ["Offset of field: Dim3::x"][::std::mem::offset_of!(Dim3, x) - 0usize];
    ["Offset of field: Dim3::y"][::std::mem::offset_of!(Dim3, y) - 4usize];
    ["Offset of field: Dim3::z"][::std::mem::offset_of!(Dim3, z) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DimPayload {
    pub dim2: Dim2,
    pub dim3: Dim2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimPayload"][::std::mem::size_of::<DimPayload>() - 8usize];
    ["Alignment of DimPayload"][::std::mem::align_of::<DimPayload>() - 4usize];
    [
        "Offset of field: DimPayload::dim2",
    ][::std::mem::offset_of!(DimPayload, dim2) - 0usize];
    [
        "Offset of field: DimPayload::dim3",
    ][::std::mem::offset_of!(DimPayload, dim3) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Dim {
    pub tag: ::std::os::raw::c_int,
    pub payload: DimPayload,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim"][::std::mem::size_of::<Dim>() - 12usize];
    ["Alignment of Dim"][::std::mem::align_of::<Dim>() - 4usize];
    ["Offset of field: Dim::tag"][::std::mem::offset_of!(Dim, tag) - 0usize];
    ["Offset of field: Dim::payload"][::std::mem::offset_of!(Dim, payload) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DimPayloadB {
    pub dim2: Dim2,
    pub dim3: Dim2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimPayloadB"][::std::mem::size_of::<DimPayloadB>() - 8usize];
    ["Alignment of DimPayloadB"][::std::mem::align_of::<DimPayloadB>() - 4usize];
    [
        "Offset of field: DimPayloadB::dim2",
    ][::std::mem::offset_of!(DimPayloadB, dim2) - 0usize];
    [
        "Offset of field: DimPayloadB::dim3",
    ][::std::mem::offset_of!(DimPayloadB, dim3) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DimB {
    pub tag: ::std::os::raw::c_int,
    pub payload: DimPayloadB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimB"][::std::mem::size_of::<DimB>() - 12usize];
    ["Alignment of DimB"][::std::mem::align_of::<DimB>() - 4usize];
    ["Offset of field: DimB::tag"][::std::mem::offset_of!(DimB, tag) - 0usize];
    ["Offset of field: DimB::payload"][::std::mem::offset_of!(DimB, payload) - 4usize];
};
