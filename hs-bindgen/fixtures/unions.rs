/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dim2 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim2"][::std::mem::size_of::<Dim2>() - 8usize];
    ["Alignment of Dim2"][::std::mem::align_of::<Dim2>() - 4usize];
    ["Offset of field: Dim2::x"][::std::mem::offset_of!(Dim2, x) - 0usize];
    ["Offset of field: Dim2::y"][::std::mem::offset_of!(Dim2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dim3 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim3"][::std::mem::size_of::<Dim3>() - 12usize];
    ["Alignment of Dim3"][::std::mem::align_of::<Dim3>() - 4usize];
    ["Offset of field: Dim3::x"][::std::mem::offset_of!(Dim3, x) - 0usize];
    ["Offset of field: Dim3::y"][::std::mem::offset_of!(Dim3, y) - 4usize];
    ["Offset of field: Dim3::z"][::std::mem::offset_of!(Dim3, z) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DimPayload {
    pub dim2: Dim2,
    pub dim3: Dim2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimPayload"][::std::mem::size_of::<DimPayload>() - 8usize];
    ["Alignment of DimPayload"][::std::mem::align_of::<DimPayload>() - 4usize];
    [
        "Offset of field: DimPayload::dim2",
    ][::std::mem::offset_of!(DimPayload, dim2) - 0usize];
    [
        "Offset of field: DimPayload::dim3",
    ][::std::mem::offset_of!(DimPayload, dim3) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Dim {
    pub tag: ::std::os::raw::c_int,
    pub payload: DimPayload,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Dim"][::std::mem::size_of::<Dim>() - 12usize];
    ["Alignment of Dim"][::std::mem::align_of::<Dim>() - 4usize];
    ["Offset of field: Dim::tag"][::std::mem::offset_of!(Dim, tag) - 0usize];
    ["Offset of field: Dim::payload"][::std::mem::offset_of!(Dim, payload) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union DimPayloadB {
    pub dim2: Dim2,
    pub dim3: Dim2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimPayloadB"][::std::mem::size_of::<DimPayloadB>() - 8usize];
    ["Alignment of DimPayloadB"][::std::mem::align_of::<DimPayloadB>() - 4usize];
    [
        "Offset of field: DimPayloadB::dim2",
    ][::std::mem::offset_of!(DimPayloadB, dim2) - 0usize];
    [
        "Offset of field: DimPayloadB::dim3",
    ][::std::mem::offset_of!(DimPayloadB, dim3) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DimB {
    pub tag: ::std::os::raw::c_int,
    pub payload: DimPayloadB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DimB"][::std::mem::size_of::<DimB>() - 12usize];
    ["Alignment of DimB"][::std::mem::align_of::<DimB>() - 4usize];
    ["Offset of field: DimB::tag"][::std::mem::offset_of!(DimB, tag) - 0usize];
    ["Offset of field: DimB::payload"][::std::mem::offset_of!(DimB, payload) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union AnonA {
    pub xy: AnonA__bindgen_ty_1,
    pub polar: AnonA__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnonA__bindgen_ty_1 {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of AnonA__bindgen_ty_1",
    ][::std::mem::size_of::<AnonA__bindgen_ty_1>() - 16usize];
    [
        "Alignment of AnonA__bindgen_ty_1",
    ][::std::mem::align_of::<AnonA__bindgen_ty_1>() - 8usize];
    [
        "Offset of field: AnonA__bindgen_ty_1::x",
    ][::std::mem::offset_of!(AnonA__bindgen_ty_1, x) - 0usize];
    [
        "Offset of field: AnonA__bindgen_ty_1::y",
    ][::std::mem::offset_of!(AnonA__bindgen_ty_1, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnonA__bindgen_ty_2 {
    pub r: f64,
    pub p: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of AnonA__bindgen_ty_2",
    ][::std::mem::size_of::<AnonA__bindgen_ty_2>() - 16usize];
    [
        "Alignment of AnonA__bindgen_ty_2",
    ][::std::mem::align_of::<AnonA__bindgen_ty_2>() - 8usize];
    [
        "Offset of field: AnonA__bindgen_ty_2::r",
    ][::std::mem::offset_of!(AnonA__bindgen_ty_2, r) - 0usize];
    [
        "Offset of field: AnonA__bindgen_ty_2::p",
    ][::std::mem::offset_of!(AnonA__bindgen_ty_2, p) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AnonA"][::std::mem::size_of::<AnonA>() - 16usize];
    ["Alignment of AnonA"][::std::mem::align_of::<AnonA>() - 8usize];
    ["Offset of field: AnonA::xy"][::std::mem::offset_of!(AnonA, xy) - 0usize];
    ["Offset of field: AnonA::polar"][::std::mem::offset_of!(AnonA, polar) - 0usize];
};
///! A union containing only an implicit, anonymous struct.
#[repr(C)]
#[derive(Copy, Clone)]
pub union u1 {
    pub __bindgen_anon_1: u1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u1__bindgen_ty_1 {
    pub x1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u1__bindgen_ty_1"][::std::mem::size_of::<u1__bindgen_ty_1>() - 8usize];
    [
        "Alignment of u1__bindgen_ty_1",
    ][::std::mem::align_of::<u1__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: u1__bindgen_ty_1::x1",
    ][::std::mem::offset_of!(u1__bindgen_ty_1, x1) - 0usize];
    [
        "Offset of field: u1__bindgen_ty_1::x2",
    ][::std::mem::offset_of!(u1__bindgen_ty_1, x2) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u1"][::std::mem::size_of::<u1>() - 8usize];
    ["Alignment of u1"][::std::mem::align_of::<u1>() - 4usize];
};
///! A union containing only an implicit, anonymous union.
#[repr(C)]
#[derive(Copy, Clone)]
pub union u2 {
    pub __bindgen_anon_1: u2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u2__bindgen_ty_1 {
    pub x1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u2__bindgen_ty_1"][::std::mem::size_of::<u2__bindgen_ty_1>() - 4usize];
    [
        "Alignment of u2__bindgen_ty_1",
    ][::std::mem::align_of::<u2__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: u2__bindgen_ty_1::x1",
    ][::std::mem::offset_of!(u2__bindgen_ty_1, x1) - 0usize];
    [
        "Offset of field: u2__bindgen_ty_1::x2",
    ][::std::mem::offset_of!(u2__bindgen_ty_1, x2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u2"][::std::mem::size_of::<u2>() - 4usize];
    ["Alignment of u2"][::std::mem::align_of::<u2>() - 4usize];
};
///! A union containing a regular field and an implicit, anonymous struct.
#[repr(C)]
#[derive(Copy, Clone)]
pub union u3 {
    pub l1: ::std::os::raw::c_int,
    pub __bindgen_anon_1: u3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u3__bindgen_ty_1 {
    pub x1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u3__bindgen_ty_1"][::std::mem::size_of::<u3__bindgen_ty_1>() - 8usize];
    [
        "Alignment of u3__bindgen_ty_1",
    ][::std::mem::align_of::<u3__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: u3__bindgen_ty_1::x1",
    ][::std::mem::offset_of!(u3__bindgen_ty_1, x1) - 0usize];
    [
        "Offset of field: u3__bindgen_ty_1::x2",
    ][::std::mem::offset_of!(u3__bindgen_ty_1, x2) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u3"][::std::mem::size_of::<u3>() - 8usize];
    ["Alignment of u3"][::std::mem::align_of::<u3>() - 4usize];
    ["Offset of field: u3::l1"][::std::mem::offset_of!(u3, l1) - 0usize];
};
///! A union containing a regular field and an implicit, anonymous union.
#[repr(C)]
#[derive(Copy, Clone)]
pub union u4 {
    pub l1: ::std::os::raw::c_int,
    pub __bindgen_anon_1: u4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union u4__bindgen_ty_1 {
    pub x1: ::std::os::raw::c_int,
    pub x2: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u4__bindgen_ty_1"][::std::mem::size_of::<u4__bindgen_ty_1>() - 4usize];
    [
        "Alignment of u4__bindgen_ty_1",
    ][::std::mem::align_of::<u4__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: u4__bindgen_ty_1::x1",
    ][::std::mem::offset_of!(u4__bindgen_ty_1, x1) - 0usize];
    [
        "Offset of field: u4__bindgen_ty_1::x2",
    ][::std::mem::offset_of!(u4__bindgen_ty_1, x2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u4"][::std::mem::size_of::<u4>() - 4usize];
    ["Alignment of u4"][::std::mem::align_of::<u4>() - 4usize];
    ["Offset of field: u4::l1"][::std::mem::offset_of!(u4, l1) - 0usize];
};
/**! A union containing:
! - a regular field
! - an implicit, anonymous struct
! - an implicit, anonymous union*/
#[repr(C)]
#[derive(Copy, Clone)]
pub union u5 {
    pub uint32_t: ::std::os::raw::c_int,
    pub __bindgen_anon_1: u5__bindgen_ty_1,
    pub __bindgen_anon_2: u5__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u5__bindgen_ty_1 {
    pub x1: ::std::os::raw::c_char,
    pub x2: ::std::os::raw::c_char,
    pub x3: ::std::os::raw::c_char,
    pub x4: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u5__bindgen_ty_1"][::std::mem::size_of::<u5__bindgen_ty_1>() - 4usize];
    [
        "Alignment of u5__bindgen_ty_1",
    ][::std::mem::align_of::<u5__bindgen_ty_1>() - 1usize];
    [
        "Offset of field: u5__bindgen_ty_1::x1",
    ][::std::mem::offset_of!(u5__bindgen_ty_1, x1) - 0usize];
    [
        "Offset of field: u5__bindgen_ty_1::x2",
    ][::std::mem::offset_of!(u5__bindgen_ty_1, x2) - 1usize];
    [
        "Offset of field: u5__bindgen_ty_1::x3",
    ][::std::mem::offset_of!(u5__bindgen_ty_1, x3) - 2usize];
    [
        "Offset of field: u5__bindgen_ty_1::x4",
    ][::std::mem::offset_of!(u5__bindgen_ty_1, x4) - 3usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union u5__bindgen_ty_2 {
    pub y1: ::std::os::raw::c_char,
    pub y2: ::std::os::raw::c_char,
    pub y3: ::std::os::raw::c_char,
    pub y4: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u5__bindgen_ty_2"][::std::mem::size_of::<u5__bindgen_ty_2>() - 1usize];
    [
        "Alignment of u5__bindgen_ty_2",
    ][::std::mem::align_of::<u5__bindgen_ty_2>() - 1usize];
    [
        "Offset of field: u5__bindgen_ty_2::y1",
    ][::std::mem::offset_of!(u5__bindgen_ty_2, y1) - 0usize];
    [
        "Offset of field: u5__bindgen_ty_2::y2",
    ][::std::mem::offset_of!(u5__bindgen_ty_2, y2) - 0usize];
    [
        "Offset of field: u5__bindgen_ty_2::y3",
    ][::std::mem::offset_of!(u5__bindgen_ty_2, y3) - 0usize];
    [
        "Offset of field: u5__bindgen_ty_2::y4",
    ][::std::mem::offset_of!(u5__bindgen_ty_2, y4) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of u5"][::std::mem::size_of::<u5>() - 4usize];
    ["Alignment of u5"][::std::mem::align_of::<u5>() - 4usize];
    ["Offset of field: u5::uint32_t"][::std::mem::offset_of!(u5, uint32_t) - 0usize];
};
