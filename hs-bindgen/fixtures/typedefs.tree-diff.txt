TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:1:13",
        declId = NamePair {
          nameC = Name "myint",
          nameHsIdent = Identifier
            "Myint"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Myint",
            newtypeField = Name
              "@NsVar"
              "un_Myint"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:2:15",
        declId = NamePair {
          nameC = Name "intptr",
          nameHsIdent = Identifier
            "Intptr"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Intptr",
            newtypeField = Name
              "@NsVar"
              "un_Intptr"},
          typedefType = TypePointer
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:5:13",
        declId = NamePair {
          nameC = Name "int2int",
          nameHsIdent = Identifier
            "Int2int"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Int2int",
            newtypeField = Name
              "@NsVar"
              "un_Int2int"},
          typedefType = TypeFun
            [
              TypePrim
                (PrimIntegral PrimInt Signed)]
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:8:16",
        declId = NamePair {
          nameC = Name
            "FunctionPointer_Function_Deref",
          nameHsIdent = Identifier
            "FunctionPointer_Function_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "typedefs.h:8:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name
                          "FunctionPointer_Function",
                        nameHsIdent = Identifier
                          "FunctionPointer_Function"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "FunctionPointer_Function_Deref",
            newtypeField = Name
              "@NsVar"
              "un_FunctionPointer_Function_Deref"},
          typedefType = TypeFun
            []
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:8:16",
        declId = NamePair {
          nameC = Name
            "FunctionPointer_Function",
          nameHsIdent = Identifier
            "FunctionPointer_Function"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "FunctionPointer_Function",
            newtypeField = Name
              "@NsVar"
              "un_FunctionPointer_Function"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "FunctionPointer_Function_Deref",
                  nameHsIdent = Identifier
                    "FunctionPointer_Function_Deref"}))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:9:14",
        declId = NamePair {
          nameC = Name
            "NonFunctionPointer_Function",
          nameHsIdent = Identifier
            "NonFunctionPointer_Function"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "NonFunctionPointer_Function",
            newtypeField = Name
              "@NsVar"
              "un_NonFunctionPointer_Function"},
          typedefType = TypeFun
            [
              TypePrim
                (PrimIntegral PrimInt Signed)]
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:11:16",
        declId = NamePair {
          nameC = Name "f1_Deref",
          nameHsIdent = Identifier
            "F1_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "typedefs.h:11:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name "f1",
                        nameHsIdent = Identifier
                          "F1"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "F1_Deref",
            newtypeField = Name
              "@NsVar"
              "un_F1_Deref"},
          typedefType = TypeFun
            []
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:11:16",
        declId = NamePair {
          nameC = Name "f1",
          nameHsIdent = Identifier "F1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "F1",
            newtypeField = Name
              "@NsVar"
              "un_F1"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "f1_Deref",
                  nameHsIdent = Identifier
                    "F1_Deref"}))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:13:14",
        declId = NamePair {
          nameC = Name "g1",
          nameHsIdent = Identifier "G1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "G1",
            newtypeField = Name
              "@NsVar"
              "un_G1"},
          typedefType = TypeFun
            []
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:14:14",
        declId = NamePair {
          nameC = Name "g2",
          nameHsIdent = Identifier "G2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "G2",
            newtypeField = Name
              "@NsVar"
              "un_G2"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "g1",
                  nameHsIdent = Identifier
                    "G1"}))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:16:14",
        declId = NamePair {
          nameC = Name "h1",
          nameHsIdent = Identifier "H1"},
        declOrigin = NameOriginInSource,
        declAliases = [Name "h2"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "H1",
            newtypeField = Name
              "@NsVar"
              "un_H1"},
          typedefType = TypeFun
            []
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:17:12",
        declId = NamePair {
          nameC = Name "h2",
          nameHsIdent = Identifier "H2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "H2",
            newtypeField = Name
              "@NsVar"
              "un_H2"},
          typedefType = TypeTypedef
            (TypedefRegular
              NamePair {
                nameC = Name "h1",
                nameHsIdent = Identifier
                  "H1"})},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "typedefs.h:18:14",
        declId = NamePair {
          nameC = Name "h3",
          nameHsIdent = Identifier "H3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["typedefs.h"],
            headerInclude = "typedefs.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "H3",
            newtypeField = Name
              "@NsVar"
              "un_H3"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "h2",
                  nameHsIdent = Identifier
                    "H2"}))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["typedefs"]}
