-- addDependentFile examples/golden/unions.h
data Dim2
    = Dim2 {dim2_x :: CInt, dim2_y :: CInt}
    deriving stock (Eq, Show)
instance Storable Dim2
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure Dim2 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Dim2 dim2_x_3
                                        dim2_y_4 -> pokeByteOff ptr_1 (0 :: Int) dim2_x_3 >> pokeByteOff ptr_1 (4 :: Int) dim2_y_4
data Dim3
    = Dim3 {dim3_x :: CInt, dim3_y :: CInt, dim3_z :: CInt}
    deriving stock (Eq, Show)
instance Storable Dim3
    where sizeOf = \_ -> 12 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> ((pure Dim3 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Dim3 dim3_x_3
                                        dim3_y_4
                                        dim3_z_5 -> pokeByteOff ptr_1 (0 :: Int) dim3_x_3 >> (pokeByteOff ptr_1 (4 :: Int) dim3_y_4 >> pokeByteOff ptr_1 (8 :: Int) dim3_z_5)
newtype DimPayload = DimPayload {un_DimPayload :: ByteArray}
deriving via (SizedByteArray 8 4) instance Storable DimPayload
{-|

  __See:__ 'set_dimPayload_dim2'

-}
get_dimPayload_dim2 :: DimPayload -> Dim2
{-|

  __See:__ 'set_dimPayload_dim2'

-}
get_dimPayload_dim2 = getUnionPayload
{-|

  __See:__ 'get_dimPayload_dim2'

-}
set_dimPayload_dim2 :: Dim2 -> DimPayload
{-|

  __See:__ 'get_dimPayload_dim2'

-}
set_dimPayload_dim2 = setUnionPayload
{-|

  __See:__ 'set_dimPayload_dim3'

-}
get_dimPayload_dim3 :: DimPayload -> Dim2
{-|

  __See:__ 'set_dimPayload_dim3'

-}
get_dimPayload_dim3 = getUnionPayload
{-|

  __See:__ 'get_dimPayload_dim3'

-}
set_dimPayload_dim3 :: Dim2 -> DimPayload
{-|

  __See:__ 'get_dimPayload_dim3'

-}
set_dimPayload_dim3 = setUnionPayload
data Dim = Dim {dim_tag :: CInt, dim_payload :: DimPayload}
instance Storable Dim
    where sizeOf = \_ -> 12 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure Dim <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Dim dim_tag_3
                                       dim_payload_4 -> pokeByteOff ptr_1 (0 :: Int) dim_tag_3 >> pokeByteOff ptr_1 (4 :: Int) dim_payload_4
newtype DimPayloadB = DimPayloadB {un_DimPayloadB :: ByteArray}
deriving via (SizedByteArray 8 4) instance Storable DimPayloadB
{-|

  __See:__ 'set_dimPayloadB_dim2'

-}
get_dimPayloadB_dim2 :: DimPayloadB -> Dim2
{-|

  __See:__ 'set_dimPayloadB_dim2'

-}
get_dimPayloadB_dim2 = getUnionPayload
{-|

  __See:__ 'get_dimPayloadB_dim2'

-}
set_dimPayloadB_dim2 :: Dim2 -> DimPayloadB
{-|

  __See:__ 'get_dimPayloadB_dim2'

-}
set_dimPayloadB_dim2 = setUnionPayload
{-|

  __See:__ 'set_dimPayloadB_dim3'

-}
get_dimPayloadB_dim3 :: DimPayloadB -> Dim2
{-|

  __See:__ 'set_dimPayloadB_dim3'

-}
get_dimPayloadB_dim3 = getUnionPayload
{-|

  __See:__ 'get_dimPayloadB_dim3'

-}
set_dimPayloadB_dim3 :: Dim2 -> DimPayloadB
{-|

  __See:__ 'get_dimPayloadB_dim3'

-}
set_dimPayloadB_dim3 = setUnionPayload
data DimB = DimB {dimB_tag :: CInt, dimB_payload :: DimPayloadB}
instance Storable DimB
    where sizeOf = \_ -> 12 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure DimB <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   DimB dimB_tag_3
                                        dimB_payload_4 -> pokeByteOff ptr_1 (0 :: Int) dimB_tag_3 >> pokeByteOff ptr_1 (4 :: Int) dimB_payload_4
data AnonA_xy
    = AnonA_xy {anonA_xy_x :: CDouble, anonA_xy_y :: CDouble}
    deriving stock (Eq, Show)
instance Storable AnonA_xy
    where sizeOf = \_ -> 16 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> (pure AnonA_xy <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   AnonA_xy anonA_xy_x_3
                                            anonA_xy_y_4 -> pokeByteOff ptr_1 (0 :: Int) anonA_xy_x_3 >> pokeByteOff ptr_1 (8 :: Int) anonA_xy_y_4
data AnonA_polar
    = AnonA_polar {anonA_polar_r :: CDouble, anonA_polar_p :: CDouble}
    deriving stock (Eq, Show)
instance Storable AnonA_polar
    where sizeOf = \_ -> 16 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> (pure AnonA_polar <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   AnonA_polar anonA_polar_r_3
                                               anonA_polar_p_4 -> pokeByteOff ptr_1 (0 :: Int) anonA_polar_r_3 >> pokeByteOff ptr_1 (8 :: Int) anonA_polar_p_4
newtype AnonA = AnonA {un_AnonA :: ByteArray}
deriving via (SizedByteArray 16 8) instance Storable AnonA
{-|

  __See:__ 'set_anonA_xy'

-}
get_anonA_xy :: AnonA -> AnonA_xy
{-|

  __See:__ 'set_anonA_xy'

-}
get_anonA_xy = getUnionPayload
{-|

  __See:__ 'get_anonA_xy'

-}
set_anonA_xy :: AnonA_xy -> AnonA
{-|

  __See:__ 'get_anonA_xy'

-}
set_anonA_xy = setUnionPayload
{-|

  __See:__ 'set_anonA_polar'

-}
get_anonA_polar :: AnonA -> AnonA_polar
{-|

  __See:__ 'set_anonA_polar'

-}
get_anonA_polar = getUnionPayload
{-|

  __See:__ 'get_anonA_polar'

-}
set_anonA_polar :: AnonA_polar -> AnonA
{-|

  __See:__ 'get_anonA_polar'

-}
set_anonA_polar = setUnionPayload
