-- addDependentFile examples/golden/typedefs.h
{-| __C declaration:__ @myint@

    __defined at:__ @typedefs.h:1:13@

    __exported by:__ @typedefs.h@
-}
newtype Myint
    = Myint {un_Myint :: CInt}
      {- ^ __C declaration:__ @myint@

           __defined at:__ @typedefs.h:1:13@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
{-| __C declaration:__ @intptr@

    __defined at:__ @typedefs.h:2:15@

    __exported by:__ @typedefs.h@
-}
newtype Intptr
    = Intptr {un_Intptr :: (Ptr CInt)}
      {- ^ __C declaration:__ @intptr@

           __defined at:__ @typedefs.h:2:15@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-| __C declaration:__ @int2int@

    __defined at:__ @typedefs.h:5:13@

    __exported by:__ @typedefs.h@
-}
newtype Int2int
    = Int2int {un_Int2int :: (CInt -> IO CInt)}
      {- ^ __C declaration:__ @int2int@

           __defined at:__ @typedefs.h:5:13@

           __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toInt2int :: Int2int ->
                                                 IO (FunPtr Int2int)
foreign import ccall safe "dynamic" fromInt2int :: FunPtr Int2int ->
                                                   Int2int
instance ToFunPtr Int2int
    where toFunPtr = toInt2int
instance FromFunPtr Int2int
    where fromFunPtr = fromInt2int
{-| Auxiliary type used by 'FunctionPointer_Function'

__defined at:__ @typedefs.h:8:16@

__exported by:__ @typedefs.h@
-}
newtype FunctionPointer_Function_Deref
    = FunctionPointer_Function_Deref {un_FunctionPointer_Function_Deref :: (IO Unit)}
      {- ^ Auxiliary type used by 'FunctionPointer_Function'

      __defined at:__ @typedefs.h:8:16@

      __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toFunctionPointer_Function_Deref :: FunctionPointer_Function_Deref ->
                                                                        IO (FunPtr FunctionPointer_Function_Deref)
foreign import ccall safe "dynamic" fromFunctionPointer_Function_Deref :: FunPtr FunctionPointer_Function_Deref ->
                                                                          FunctionPointer_Function_Deref
instance ToFunPtr FunctionPointer_Function_Deref
    where toFunPtr = toFunctionPointer_Function_Deref
instance FromFunPtr FunctionPointer_Function_Deref
    where fromFunPtr = fromFunctionPointer_Function_Deref
{-| __C declaration:__ @FunctionPointer_Function@

    __defined at:__ @typedefs.h:8:16@

    __exported by:__ @typedefs.h@
-}
newtype FunctionPointer_Function
    = FunctionPointer_Function {un_FunctionPointer_Function :: (FunPtr FunctionPointer_Function_Deref)}
      {- ^ __C declaration:__ @FunctionPointer_Function@

           __defined at:__ @typedefs.h:8:16@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-| __C declaration:__ @NonFunctionPointer_Function@

    __defined at:__ @typedefs.h:9:14@

    __exported by:__ @typedefs.h@
-}
newtype NonFunctionPointer_Function
    = NonFunctionPointer_Function {un_NonFunctionPointer_Function :: (CInt ->
                                                                      IO CInt)}
      {- ^ __C declaration:__ @NonFunctionPointer_Function@

           __defined at:__ @typedefs.h:9:14@

           __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toNonFunctionPointer_Function :: NonFunctionPointer_Function ->
                                                                     IO (FunPtr NonFunctionPointer_Function)
foreign import ccall safe "dynamic" fromNonFunctionPointer_Function :: FunPtr NonFunctionPointer_Function ->
                                                                       NonFunctionPointer_Function
instance ToFunPtr NonFunctionPointer_Function
    where toFunPtr = toNonFunctionPointer_Function
instance FromFunPtr NonFunctionPointer_Function
    where fromFunPtr = fromNonFunctionPointer_Function
{-| Auxiliary type used by 'F1'

__defined at:__ @typedefs.h:11:16@

__exported by:__ @typedefs.h@
-}
newtype F1_Deref
    = F1_Deref {un_F1_Deref :: (IO Unit)}
      {- ^ Auxiliary type used by 'F1'

      __defined at:__ @typedefs.h:11:16@

      __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toF1_Deref :: F1_Deref ->
                                                  IO (FunPtr F1_Deref)
foreign import ccall safe "dynamic" fromF1_Deref :: FunPtr F1_Deref ->
                                                    F1_Deref
instance ToFunPtr F1_Deref
    where toFunPtr = toF1_Deref
instance FromFunPtr F1_Deref
    where fromFunPtr = fromF1_Deref
{-| __C declaration:__ @f1@

    __defined at:__ @typedefs.h:11:16@

    __exported by:__ @typedefs.h@
-}
newtype F1
    = F1 {un_F1 :: (FunPtr F1_Deref)}
      {- ^ __C declaration:__ @f1@

           __defined at:__ @typedefs.h:11:16@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-| __C declaration:__ @g1@

    __defined at:__ @typedefs.h:13:14@

    __exported by:__ @typedefs.h@
-}
newtype G1
    = G1 {un_G1 :: (IO Unit)}
      {- ^ __C declaration:__ @g1@

           __defined at:__ @typedefs.h:13:14@

           __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toG1 :: G1 -> IO (FunPtr G1)
foreign import ccall safe "dynamic" fromG1 :: FunPtr G1 -> G1
instance ToFunPtr G1
    where toFunPtr = toG1
instance FromFunPtr G1
    where fromFunPtr = fromG1
{-| __C declaration:__ @g2@

    __defined at:__ @typedefs.h:14:14@

    __exported by:__ @typedefs.h@
-}
newtype G2
    = G2 {un_G2 :: (FunPtr G1)}
      {- ^ __C declaration:__ @g2@

           __defined at:__ @typedefs.h:14:14@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-| __C declaration:__ @h1@

    __defined at:__ @typedefs.h:16:14@

    __exported by:__ @typedefs.h@
-}
newtype H1
    = H1 {un_H1 :: (IO Unit)}
      {- ^ __C declaration:__ @h1@

           __defined at:__ @typedefs.h:16:14@

           __exported by:__ @typedefs.h@
      -}
foreign import ccall safe "wrapper" toH1 :: H1 -> IO (FunPtr H1)
foreign import ccall safe "dynamic" fromH1 :: FunPtr H1 -> H1
instance ToFunPtr H1
    where toFunPtr = toH1
instance FromFunPtr H1
    where fromFunPtr = fromH1
{-| __C declaration:__ @h2@

    __defined at:__ @typedefs.h:17:12@

    __exported by:__ @typedefs.h@
-}
newtype H2
    = H2 {un_H2 :: H1}
      {- ^ __C declaration:__ @h2@

           __defined at:__ @typedefs.h:17:12@

           __exported by:__ @typedefs.h@
      -}
{-| __C declaration:__ @h3@

    __defined at:__ @typedefs.h:18:14@

    __exported by:__ @typedefs.h@
-}
newtype H3
    = H3 {un_H3 :: (FunPtr H2)}
      {- ^ __C declaration:__ @h3@

           __defined at:__ @typedefs.h:18:14@

           __exported by:__ @typedefs.h@
      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
