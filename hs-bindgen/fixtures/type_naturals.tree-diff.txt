Header
  [
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:4:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "N",
          macroArgs = [],
          macroBody = ExpressionMacro
            (MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "3",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 3}))},
        macroDeclMacroTy =
        "IntLike (CIntegralType (IntLike (Int Signed)))",
        macroDeclSourceLoc =
        "type_naturals.h:4:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:5:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "M",
          macroArgs = [],
          macroBody = ExpressionMacro
            (MApp
              MAdd
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1}),
                MTerm
                  (MVar NoXVar (CName "N") [])])},
        macroDeclMacroTy =
        "IntLike (CIntegralType (IntLike (Int Signed)))",
        macroDeclSourceLoc =
        "type_naturals.h:5:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:6:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "F",
          macroArgs = [
            CName "A",
            CName "B"],
          macroBody = ExpressionMacro
            (MApp
              MSub
              [
                MApp
                  MAdd
                  [
                    MTerm
                      (MVar NoXVar (CName "A") []),
                    MApp
                      MMult
                      [
                        MTerm
                          (MInt
                            IntegerLiteral {
                              integerLiteralText = "2",
                              integerLiteralType = Int Signed,
                              integerLiteralValue = 2}),
                        MTerm
                          (MVar NoXVar (CName "B") [])]],
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1})])},
        macroDeclMacroTy =
        "(forall a b. Add a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b) => Sub (AddRes a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)) (IntLike (CIntegralType (IntLike (Int Signed)))) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) b => (a -> b -> SubRes (AddRes a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)) (IntLike (CIntegralType (IntLike (Int Signed))))))",
        macroDeclSourceLoc =
        "type_naturals.h:6:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:7:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "G",
          macroArgs = [
            CName "U",
            CName "X",
            CName "Y"],
          macroBody = ExpressionMacro
            (MApp
              MAdd
              [
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "10",
                          integerLiteralType = Int Signed,
                          integerLiteralValue = 10}),
                    MTerm
                      (MVar NoXVar (CName "X") [])],
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "16",
                          integerLiteralType = Int Signed,
                          integerLiteralValue = 16}),
                    MTerm
                      (MVar
                        NoXVar
                        (CName "Y")
                        [])]])},
        macroDeclMacroTy =
        "(forall a b c. Add (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) b => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) a => (c -> a -> b -> AddRes (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)))",
        macroDeclSourceLoc =
        "type_naturals.h:7:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:8:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "K",
          macroArgs = [],
          macroBody = ExpressionMacro
            (MTerm
              (MVar
                NoXVar
                (CName "G")
                [
                  MTerm
                    (MFloat
                      FloatingLiteral {
                        floatingLiteralText = "11.77",
                        floatingLiteralType =
                        DoubleType,
                        floatingLiteralFloatValue =
                        11.77,
                        floatingLiteralDoubleValue =
                        11.77}),
                  MTerm
                    (MVar
                      NoXVar
                      (CName "F")
                      [
                        MTerm
                          (MVar
                            NoXVar
                            (CName "F")
                            [
                              MTerm
                                (MInt
                                  IntegerLiteral {
                                    integerLiteralText = "2",
                                    integerLiteralType = Int Signed,
                                    integerLiteralValue = 2}),
                              MTerm
                                (MVar NoXVar (CName "M") [])]),
                        MTerm
                          (MVar
                            NoXVar
                            (CName "N")
                            [])])]))},
        macroDeclMacroTy =
        "(forall a. Add (IntLike (CIntegralType (IntLike (Int Signed)))) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) a => (a -> AddRes (IntLike (CIntegralType (IntLike (Int Signed)))) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a)))",
        macroDeclSourceLoc =
        "type_naturals.h:8:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:10:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "Arr1",
          macroArgs = [],
          macroBody = TypeMacro
            (TypeName
              (TypeSpecifier
                (TypePrim
                  (PrimIntegral PrimInt Signed)))
              []
              Declarator {
                declaratorPointer = Pointers [],
                directDeclarator =
                ArrayDirectDeclarator
                  ArrayDeclarator {
                    arrayDirectDeclarator =
                    IdentifierDeclarator
                      AbstractName
                      [],
                    arrayStatic = False,
                    arrayTypeQualifiers = [],
                    arraySize = ArraySize
                      (MTerm
                        (MVar NoXVar (CName "N") [])),
                    arrayAttributes = []}})},
        macroDeclMacroTy = "PrimTy",
        macroDeclSourceLoc =
        "type_naturals.h:10:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:11:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "Arr2",
          macroArgs = [],
          macroBody = TypeMacro
            (TypeName
              (TypeSpecifier
                (TypePrim
                  (PrimIntegral PrimInt Signed)))
              []
              Declarator {
                declaratorPointer = Pointers [],
                directDeclarator =
                ArrayDirectDeclarator
                  ArrayDeclarator {
                    arrayDirectDeclarator =
                    IdentifierDeclarator
                      AbstractName
                      [],
                    arrayStatic = False,
                    arrayTypeQualifiers = [],
                    arraySize = ArraySize
                      (MApp
                        MMult
                        [
                          MTerm
                            (MInt
                              IntegerLiteral {
                                integerLiteralText = "2",
                                integerLiteralType = Int Signed,
                                integerLiteralValue = 2}),
                          MTerm
                            (MVar NoXVar (CName "M") [])]),
                    arrayAttributes = []}})},
        macroDeclMacroTy = "PrimTy",
        macroDeclSourceLoc =
        "type_naturals.h:11:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:12:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "Arr3",
          macroArgs = [],
          macroBody = TypeMacro
            (TypeName
              (TypeSpecifier
                (TypePrim
                  (PrimIntegral PrimInt Signed)))
              []
              Declarator {
                declaratorPointer = Pointers [],
                directDeclarator =
                ArrayDirectDeclarator
                  ArrayDeclarator {
                    arrayDirectDeclarator =
                    IdentifierDeclarator
                      AbstractName
                      [],
                    arrayStatic = False,
                    arrayTypeQualifiers = [],
                    arraySize = ArraySize
                      (MTerm
                        (MVar
                          NoXVar
                          (CName "F")
                          [
                            MTerm
                              (MVar NoXVar (CName "N") []),
                            MApp
                              MMult
                              [
                                MTerm
                                  (MInt
                                    IntegerLiteral {
                                      integerLiteralText = "2",
                                      integerLiteralType = Int Signed,
                                      integerLiteralValue = 2}),
                                MTerm
                                  (MVar
                                    NoXVar
                                    (CName "M")
                                    [])]])),
                    arrayAttributes = []}})},
        macroDeclMacroTy = "PrimTy",
        macroDeclSourceLoc =
        "type_naturals.h:12:9"},
    DeclMacro
      MacroDecl {
        macroDeclMacro = Macro {
          macroLoc = MultiLoc {
            multiLocExpansion =
            "type_naturals.h:13:9",
            multiLocPresumed = Nothing,
            multiLocSpelling = Nothing,
            multiLocFile = Nothing},
          macroName = CName "Arr4",
          macroArgs = [],
          macroBody = TypeMacro
            (TypeName
              (TypeSpecifier
                (TypePrim
                  (PrimIntegral PrimInt Signed)))
              []
              Declarator {
                declaratorPointer = Pointers [],
                directDeclarator =
                ArrayDirectDeclarator
                  ArrayDeclarator {
                    arrayDirectDeclarator =
                    IdentifierDeclarator
                      AbstractName
                      [],
                    arrayStatic = False,
                    arrayTypeQualifiers = [],
                    arraySize = ArraySize
                      (MTerm
                        (MVar
                          NoXVar
                          (CName "G")
                          [
                            MTerm
                              (MFloat
                                FloatingLiteral {
                                  floatingLiteralText = "11.77",
                                  floatingLiteralType =
                                  DoubleType,
                                  floatingLiteralFloatValue =
                                  11.77,
                                  floatingLiteralDoubleValue =
                                  11.77}),
                            MTerm
                              (MVar
                                NoXVar
                                (CName "F")
                                [
                                  MTerm
                                    (MVar
                                      NoXVar
                                      (CName "F")
                                      [
                                        MTerm
                                          (MInt
                                            IntegerLiteral {
                                              integerLiteralText = "2",
                                              integerLiteralType = Int Signed,
                                              integerLiteralValue = 2}),
                                        MTerm
                                          (MVar NoXVar (CName "M") [])]),
                                  MTerm
                                    (MVar NoXVar (CName "N") [])]),
                            MTerm
                              (MInt
                                IntegerLiteral {
                                  integerLiteralText = "7",
                                  integerLiteralType = Int Signed,
                                  integerLiteralValue = 7})])),
                    arrayAttributes = []}})},
        macroDeclMacroTy = "PrimTy",
        macroDeclSourceLoc =
        "type_naturals.h:13:9"}]
