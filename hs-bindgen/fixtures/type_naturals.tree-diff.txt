TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc = "type_naturals.h:4:9",
        declId = NamePair {
          nameC = CName "N",
          nameHsIdent = HsIdentifier "n"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "3",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 3}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "type_naturals.h:5:9",
        declId = NamePair {
          nameC = CName "M",
          nameHsIdent = HsIdentifier "m"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MAdd
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1}),
                MTerm
                  (MVar NoXVar (CName "N") [])],
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "type_naturals.h:6:9",
        declId = NamePair {
          nameC = CName "F",
          nameHsIdent = HsIdentifier "f"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [
              CName "A",
              CName "B"],
            macroExprBody = MApp
              MSub
              [
                MApp
                  MAdd
                  [
                    MTerm
                      (MVar NoXVar (CName "A") []),
                    MApp
                      MMult
                      [
                        MTerm
                          (MInt
                            IntegerLiteral {
                              integerLiteralText = "2",
                              integerLiteralType = Int Signed,
                              integerLiteralValue = 2}),
                        MTerm
                          (MVar NoXVar (CName "B") [])]],
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1})],
            macroExprType =
            "(forall a b. Add a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b) => Sub (AddRes a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)) (IntLike (CIntegralType (IntLike (Int Signed)))) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) b => (a -> b -> SubRes (AddRes a (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)) (IntLike (CIntegralType (IntLike (Int Signed))))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "type_naturals.h:7:9",
        declId = NamePair {
          nameC = CName "G",
          nameHsIdent = HsIdentifier "g"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [
              CName "U",
              CName "X",
              CName "Y"],
            macroExprBody = MApp
              MAdd
              [
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "10",
                          integerLiteralType = Int Signed,
                          integerLiteralValue = 10}),
                    MTerm
                      (MVar NoXVar (CName "X") [])],
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "16",
                          integerLiteralType = Int Signed,
                          integerLiteralValue = 16}),
                    MTerm
                      (MVar NoXVar (CName "Y") [])]],
            macroExprType =
            "(forall a b c. Add (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) b => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) a => (c -> a -> b -> AddRes (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) b)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "type_naturals.h:8:9",
        declId = NamePair {
          nameC = CName "K",
          nameHsIdent = HsIdentifier "k"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MVar
                NoXVar
                (CName "G")
                [
                  MTerm
                    (MFloat
                      FloatingLiteral {
                        floatingLiteralText = "11.77",
                        floatingLiteralType =
                        DoubleType,
                        floatingLiteralFloatValue =
                        11.77,
                        floatingLiteralDoubleValue =
                        11.77}),
                  MTerm
                    (MVar
                      NoXVar
                      (CName "F")
                      [
                        MTerm
                          (MVar
                            NoXVar
                            (CName "F")
                            [
                              MTerm
                                (MInt
                                  IntegerLiteral {
                                    integerLiteralText = "2",
                                    integerLiteralType = Int Signed,
                                    integerLiteralValue = 2}),
                              MTerm
                                (MVar NoXVar (CName "M") [])]),
                        MTerm
                          (MVar
                            NoXVar
                            (CName "N")
                            [])])]),
            macroExprType =
            "(forall a. Add (IntLike (CIntegralType (IntLike (Int Signed)))) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a) => Mult (IntLike (CIntegralType (IntLike (Int Signed)))) a => (a -> AddRes (IntLike (CIntegralType (IntLike (Int Signed)))) (MultRes (IntLike (CIntegralType (IntLike (Int Signed)))) a)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_naturals.h:10:9",
        declId = NamePair {
          nameC = CName "Arr1",
          nameHsIdent = HsIdentifier
            "Arr1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "Arr1",
              newtypeField = HsName
                "@NsVar"
                "un_Arr1"},
            macroType = TypeConstArray
              3
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_naturals.h:11:9",
        declId = NamePair {
          nameC = CName "Arr2",
          nameHsIdent = HsIdentifier
            "Arr2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "Arr2",
              newtypeField = HsName
                "@NsVar"
                "un_Arr2"},
            macroType = TypeConstArray
              8
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_naturals.h:12:9",
        declId = NamePair {
          nameC = CName "Arr3",
          nameHsIdent = HsIdentifier
            "Arr3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "Arr3",
              newtypeField = HsName
                "@NsVar"
                "un_Arr3"},
            macroType = TypeConstArray
              18
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_naturals.h:13:9",
        declId = NamePair {
          nameC = CName "Arr4",
          nameHsIdent = HsIdentifier
            "Arr4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader = "type_naturals.h"},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = HsName
                "@NsConstr"
                "Arr4",
              newtypeField = HsName
                "@NsVar"
                "un_Arr4"},
            macroType = TypeConstArray
              252
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["type_naturals"]}
