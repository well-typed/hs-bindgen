TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:8:8",
        declId = NamePair {
          nameC = Name "S",
          nameHsIdent = Identifier "S"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "S"),
          structSizeof = 8,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:8:18",
                fieldName = NamePair {
                  nameC = Name "f",
                  nameHsIdent = Identifier "s_f"},
                fieldComment = Nothing},
              structFieldType = TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimShort
                    Signed)),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:9:13",
        declId = NamePair {
          nameC = Name "more_aligned_int",
          nameHsIdent = Identifier
            "More_aligned_int"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "More_aligned_int",
            newtypeField = Name
              "@NsVar"
              "un_More_aligned_int"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:11:8",
        declId = NamePair {
          nameC = Name "S2",
          nameHsIdent = Identifier "S2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "S2"),
          structSizeof = 16,
          structAlignment = 16,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:11:19",
                fieldName = NamePair {
                  nameC = Name "f",
                  nameHsIdent = Identifier
                    "s2_f"},
                fieldComment = Nothing},
              structFieldType = TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimShort
                    Signed)),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:13:8",
        declId = NamePair {
          nameC = Name
            "my_unpacked_struct",
          nameHsIdent = Identifier
            "My_unpacked_struct"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "My_unpacked_struct"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:15:8",
                fieldName = NamePair {
                  nameC = Name "c",
                  nameHsIdent = Identifier
                    "my_unpacked_struct_c"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:16:7",
                fieldName = NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier
                    "my_unpacked_struct_i"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:19:37",
        declId = NamePair {
          nameC = Name "my_packed_struct",
          nameHsIdent = Identifier
            "My_packed_struct"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "My_packed_struct"),
          structSizeof = 13,
          structAlignment = 1,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:21:9",
                fieldName = NamePair {
                  nameC = Name "c",
                  nameHsIdent = Identifier
                    "my_packed_struct_c"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:22:9",
                fieldName = NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier
                    "my_packed_struct_i"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 8,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:23:30",
                fieldName = NamePair {
                  nameC = Name "s",
                  nameHsIdent = Identifier
                    "my_packed_struct_s"},
                fieldComment = Nothing},
              structFieldType = TypeStruct
                NamePair {
                  nameC = Name
                    "my_unpacked_struct",
                  nameHsIdent = Identifier
                    "My_unpacked_struct"}
                NameOriginInSource,
              structFieldOffset = 40,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:26:9",
        declId = NamePair {
          nameC = Name
            "wait_status_ptr_t",
          nameHsIdent = Identifier
            "Wait_status_ptr_t"},
        declOrigin = NameOriginGenerated
          (AnonId
            "type_attributes.h:26:9"),
        declAliases = [
          Name "wait_status_ptr_t"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclUnion
        Union {
          unionNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Wait_status_ptr_t",
            newtypeField = Name
              "@NsVar"
              "un_Wait_status_ptr_t"},
          unionSizeof = 8,
          unionAlignment = 8,
          unionFields = [
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:28:8",
                fieldName = NamePair {
                  nameC = Name "__ip",
                  nameHsIdent = Identifier
                    "wait_status_ptr_t___ip"},
                fieldComment = Nothing},
              unionFieldType = TypePointer
                (TypePrim
                  (PrimIntegral PrimInt Signed))},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "type_attributes.h:29:15",
                fieldName = NamePair {
                  nameC = Name "__up",
                  nameHsIdent = Identifier
                    "wait_status_ptr_t___up"},
                fieldComment = Nothing},
              unionFieldType = TypePointer
                (TypeUnion
                  NamePair {
                    nameC = Name "wait",
                    nameHsIdent = Identifier "Wait"}
                  NameOriginInSource)}]},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:29:9",
        declId = NamePair {
          nameC = Name "wait",
          nameHsIdent = Identifier
            "Wait"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclOpaque
        (NameKindTagged TagKindUnion),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:32:13",
        declId = NamePair {
          nameC = Name "T1",
          nameHsIdent = Identifier "T1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "T1",
            newtypeField = Name
              "@NsVar"
              "un_T1"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "type_attributes.h:34:46",
        declId = NamePair {
          nameC = Name "short_a",
          nameHsIdent = Identifier
            "Short_a"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["type_attributes.h"],
            headerInclude =
            "type_attributes.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Short_a",
            newtypeField = Name
              "@NsVar"
              "un_Short_a"},
          typedefType = TypePrim
            (PrimIntegral
              PrimShort
              Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["type_attributes"]}
