a :: CInt
a = 5 :: CInt
b :: CInt
b = 3 :: CInt
sOME_DEFINED_CONSTANT :: CInt
sOME_DEFINED_CONSTANT = 4 :: CInt
a_DEFINE_0 :: CInt
a_DEFINE_0 = 0 :: CInt
a_DEFINE_1 :: CUInt
a_DEFINE_1 = 20560 :: CUInt
a_DEFINE_2 :: CInt
a_DEFINE_2 = 2 :: CInt
tWO_ARGS :: (,) CInt CInt
tWO_ARGS = (,) (13398 :: CInt) (30874 :: CInt)
foreign import capi safe "distilled_lib_1.h some_fun" some_fun :: Ptr A_type_t ->
                                                                  Uint32_t ->
                                                                  Ptr Uint8_t -> IO Int32_t
data Another_typedef_struct_t
    = Another_typedef_struct_t {another_typedef_struct_t_foo :: CInt,
                                another_typedef_struct_t_bar :: CChar}
instance Storable Another_typedef_struct_t
    where {sizeOf = \_ -> 8 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> (pure Another_typedef_struct_t <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Another_typedef_struct_t another_typedef_struct_t_foo_3
                                                              another_typedef_struct_t_bar_4 -> pokeByteOff ptr_1 (0 :: Int) another_typedef_struct_t_foo_3 >> pokeByteOff ptr_1 (4 :: Int) another_typedef_struct_t_bar_4}}
deriving stock instance Show Another_typedef_struct_t
deriving stock instance Eq Another_typedef_struct_t
newtype Another_typedef_enum_e
    = Another_typedef_enum_e {unAnother_typedef_enum_e :: CUInt}
instance Storable Another_typedef_enum_e
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Another_typedef_enum_e <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Another_typedef_enum_e unAnother_typedef_enum_e_3 -> pokeByteOff ptr_1 (0 :: Int) unAnother_typedef_enum_e_3}}
deriving stock instance Show Another_typedef_enum_e
deriving stock instance Read Another_typedef_enum_e
deriving stock instance Eq Another_typedef_enum_e
deriving stock instance Ord Another_typedef_enum_e
deriving newtype instance Enum Another_typedef_enum_e
pattern FOO :: Another_typedef_enum_e
pattern FOO = Another_typedef_enum_e 0
pattern BAR :: Another_typedef_enum_e
pattern BAR = Another_typedef_enum_e 1
newtype A_type_t = A_type_t {unA_type_t :: CInt}
deriving newtype instance Storable A_type_t
deriving stock instance Eq A_type_t
deriving stock instance Ord A_type_t
deriving stock instance Read A_type_t
deriving stock instance Show A_type_t
deriving newtype instance Enum A_type_t
deriving newtype instance Ix A_type_t
deriving newtype instance Bounded A_type_t
deriving newtype instance Bits A_type_t
deriving newtype instance FiniteBits A_type_t
deriving newtype instance Integral A_type_t
deriving newtype instance Num A_type_t
deriving newtype instance Real A_type_t
newtype Var_t = Var_t {unVar_t :: CInt}
deriving newtype instance Storable Var_t
deriving stock instance Eq Var_t
deriving stock instance Ord Var_t
deriving stock instance Read Var_t
deriving stock instance Show Var_t
deriving newtype instance Enum Var_t
deriving newtype instance Ix Var_t
deriving newtype instance Bounded Var_t
deriving newtype instance Bits Var_t
deriving newtype instance FiniteBits Var_t
deriving newtype instance Integral Var_t
deriving newtype instance Num Var_t
deriving newtype instance Real Var_t
newtype Uint8_t = Uint8_t {unUint8_t :: CSChar}
deriving newtype instance Storable Uint8_t
deriving stock instance Eq Uint8_t
deriving stock instance Ord Uint8_t
deriving stock instance Read Uint8_t
deriving stock instance Show Uint8_t
deriving newtype instance Enum Uint8_t
deriving newtype instance Ix Uint8_t
deriving newtype instance Bounded Uint8_t
deriving newtype instance Bits Uint8_t
deriving newtype instance FiniteBits Uint8_t
deriving newtype instance Integral Uint8_t
deriving newtype instance Num Uint8_t
deriving newtype instance Real Uint8_t
newtype Uint16_t = Uint16_t {unUint16_t :: CUShort}
deriving newtype instance Storable Uint16_t
deriving stock instance Eq Uint16_t
deriving stock instance Ord Uint16_t
deriving stock instance Read Uint16_t
deriving stock instance Show Uint16_t
deriving newtype instance Enum Uint16_t
deriving newtype instance Ix Uint16_t
deriving newtype instance Bounded Uint16_t
deriving newtype instance Bits Uint16_t
deriving newtype instance FiniteBits Uint16_t
deriving newtype instance Integral Uint16_t
deriving newtype instance Num Uint16_t
deriving newtype instance Real Uint16_t
newtype Uint32_t = Uint32_t {unUint32_t :: CUInt}
deriving newtype instance Storable Uint32_t
deriving stock instance Eq Uint32_t
deriving stock instance Ord Uint32_t
deriving stock instance Read Uint32_t
deriving stock instance Show Uint32_t
deriving newtype instance Enum Uint32_t
deriving newtype instance Ix Uint32_t
deriving newtype instance Bounded Uint32_t
deriving newtype instance Bits Uint32_t
deriving newtype instance FiniteBits Uint32_t
deriving newtype instance Integral Uint32_t
deriving newtype instance Num Uint32_t
deriving newtype instance Real Uint32_t
data A_typedef_struct
    = A_typedef_struct {a_typedef_struct_field_0 :: CBool,
                        a_typedef_struct_field_1 :: Uint8_t,
                        a_typedef_struct_field_2 :: Uint16_t,
                        a_typedef_struct_field_3 :: Uint32_t,
                        a_typedef_struct_field_4 :: Another_typedef_struct_t,
                        a_typedef_struct_field_5 :: (Ptr Another_typedef_struct_t),
                        a_typedef_struct_field_6 :: (Ptr Void),
                        a_typedef_struct_field_7 :: (ConstantArray 7 Uint32_t),
                        a_typedef_struct_field_8 :: Another_typedef_enum_e,
                        a_typedef_struct_field_9 :: Another_typedef_enum_e,
                        a_typedef_struct_field_10 :: Another_typedef_enum_e}
instance Storable A_typedef_struct
    where {sizeOf = \_ -> 140 :: Int;
           alignment = \_ -> 1 :: Int;
           peek = \ptr_0 -> ((((((((((pure A_typedef_struct <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (1 :: Int)) <*> peekByteOff ptr_0 (2 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (8 :: Int)) <*> peekByteOff ptr_0 (16 :: Int)) <*> peekByteOff ptr_0 (24 :: Int)) <*> peekByteOff ptr_0 (32 :: Int)) <*> peekByteOff ptr_0 (60 :: Int)) <*> peekByteOff ptr_0 (64 :: Int)) <*> peekByteOff ptr_0 (80 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {A_typedef_struct a_typedef_struct_field_0_3
                                                      a_typedef_struct_field_1_4
                                                      a_typedef_struct_field_2_5
                                                      a_typedef_struct_field_3_6
                                                      a_typedef_struct_field_4_7
                                                      a_typedef_struct_field_5_8
                                                      a_typedef_struct_field_6_9
                                                      a_typedef_struct_field_7_10
                                                      a_typedef_struct_field_8_11
                                                      a_typedef_struct_field_9_12
                                                      a_typedef_struct_field_10_13 -> pokeByteOff ptr_1 (0 :: Int) a_typedef_struct_field_0_3 >> (pokeByteOff ptr_1 (1 :: Int) a_typedef_struct_field_1_4 >> (pokeByteOff ptr_1 (2 :: Int) a_typedef_struct_field_2_5 >> (pokeByteOff ptr_1 (4 :: Int) a_typedef_struct_field_3_6 >> (pokeByteOff ptr_1 (8 :: Int) a_typedef_struct_field_4_7 >> (pokeByteOff ptr_1 (16 :: Int) a_typedef_struct_field_5_8 >> (pokeByteOff ptr_1 (24 :: Int) a_typedef_struct_field_6_9 >> (pokeByteOff ptr_1 (32 :: Int) a_typedef_struct_field_7_10 >> (pokeByteOff ptr_1 (60 :: Int) a_typedef_struct_field_8_11 >> (pokeByteOff ptr_1 (64 :: Int) a_typedef_struct_field_9_12 >> pokeByteOff ptr_1 (80 :: Int) a_typedef_struct_field_10_13)))))))))}}
deriving stock instance Show A_typedef_struct
deriving stock instance Eq A_typedef_struct
newtype A_typedef_struct_t
    = A_typedef_struct_t {unA_typedef_struct_t :: A_typedef_struct}
deriving newtype instance Storable A_typedef_struct_t
newtype A_typedef_enum_e
    = A_typedef_enum_e {unA_typedef_enum_e :: CSChar}
instance Storable A_typedef_enum_e
    where {sizeOf = \_ -> 1 :: Int;
           alignment = \_ -> 1 :: Int;
           peek = \ptr_0 -> pure A_typedef_enum_e <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {A_typedef_enum_e unA_typedef_enum_e_3 -> pokeByteOff ptr_1 (0 :: Int) unA_typedef_enum_e_3}}
deriving stock instance Show A_typedef_enum_e
deriving stock instance Read A_typedef_enum_e
deriving stock instance Eq A_typedef_enum_e
deriving stock instance Ord A_typedef_enum_e
deriving newtype instance Enum A_typedef_enum_e
pattern ENUM_CASE_0 :: A_typedef_enum_e
pattern ENUM_CASE_0 = A_typedef_enum_e 0
pattern ENUM_CASE_1 :: A_typedef_enum_e
pattern ENUM_CASE_1 = A_typedef_enum_e 1
pattern ENUM_CASE_2 :: A_typedef_enum_e
pattern ENUM_CASE_2 = A_typedef_enum_e 2
pattern ENUM_CASE_3 :: A_typedef_enum_e
pattern ENUM_CASE_3 = A_typedef_enum_e 3
newtype Int32_t = Int32_t {unInt32_t :: CInt}
deriving newtype instance Storable Int32_t
deriving stock instance Eq Int32_t
deriving stock instance Ord Int32_t
deriving stock instance Read Int32_t
deriving stock instance Show Int32_t
deriving newtype instance Enum Int32_t
deriving newtype instance Ix Int32_t
deriving newtype instance Bounded Int32_t
deriving newtype instance Bits Int32_t
deriving newtype instance FiniteBits Int32_t
deriving newtype instance Integral Int32_t
deriving newtype instance Num Int32_t
deriving newtype instance Real Int32_t
newtype Callback_t
    = Callback_t {unCallback_t :: (FunPtr (Ptr Void ->
                                           Uint32_t -> IO Uint32_t))}
deriving newtype instance Storable Callback_t
