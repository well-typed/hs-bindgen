-- addDependentFile examples/macro_in_fundecl_vs_typedef.h
newtype MC = MC {un_MC :: CChar}
deriving newtype instance Storable MC
deriving stock instance Eq MC
deriving stock instance Ord MC
deriving stock instance Read MC
deriving stock instance Show MC
deriving newtype instance Enum MC
deriving newtype instance Ix MC
deriving newtype instance Bounded MC
deriving newtype instance Bits MC
deriving newtype instance FiniteBits MC
deriving newtype instance Integral MC
deriving newtype instance Num MC
deriving newtype instance Real MC
foreign import capi safe "macro_in_fundecl_vs_typedef.h quux1" quux1 :: MC ->
                                                                        TC -> IO CChar
foreign import capi safe "macro_in_fundecl_vs_typedef.h quux2" quux2 :: MC ->
                                                                        CChar -> IO TC
foreign import capi safe "macro_in_fundecl_vs_typedef.h wam1" wam1 :: CFloat ->
                                                                      Ptr TC -> IO (Ptr MC)
foreign import capi safe "macro_in_fundecl_vs_typedef.h wam2" wam2 :: CFloat ->
                                                                      Ptr MC -> IO (Ptr TC)
foreign import capi safe "macro_in_fundecl_vs_typedef.h struct_typedef1" struct_typedef1 :: Ptr Struct2 ->
                                                                                            MC ->
                                                                                            IO Unit
foreign import capi safe "macro_in_fundecl_vs_typedef.h struct_typedef2" struct_typedef2 :: Ptr Struct3_t ->
                                                                                            MC ->
                                                                                            IO Unit
foreign import capi safe "macro_in_fundecl_vs_typedef.h struct_typedef3" struct_typedef3 :: Ptr Struct4 ->
                                                                                            MC ->
                                                                                            IO Unit
newtype TC = TC {un_TC :: CChar}
deriving newtype instance Storable TC
deriving stock instance Eq TC
deriving stock instance Ord TC
deriving stock instance Read TC
deriving stock instance Show TC
deriving newtype instance Enum TC
deriving newtype instance Ix TC
deriving newtype instance Bounded TC
deriving newtype instance Bits TC
deriving newtype instance FiniteBits TC
deriving newtype instance Integral TC
deriving newtype instance Num TC
deriving newtype instance Real TC
data Struct1 = Struct1 {struct1_a :: CInt}
instance Storable Struct1
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct1 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct1 struct1_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct1_a_3}}
deriving stock instance Show Struct1
deriving stock instance Eq Struct1
data Struct2 = Struct2 {struct2_a :: CInt}
instance Storable Struct2
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct2 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct2 struct2_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct2_a_3}}
deriving stock instance Show Struct2
deriving stock instance Eq Struct2
data Struct3 = Struct3 {struct3_a :: CInt}
instance Storable Struct3
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct3 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct3 struct3_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct3_a_3}}
deriving stock instance Show Struct3
deriving stock instance Eq Struct3
newtype Struct3_t = Struct3_t {un_Struct3_t :: Struct3}
deriving newtype instance Storable Struct3_t
data Struct4 = Struct4 {struct4_a :: CInt}
instance Storable Struct4
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct4 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct4 struct4_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct4_a_3}}
deriving stock instance Show Struct4
deriving stock instance Eq Struct4
