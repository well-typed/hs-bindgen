-- addDependentFile examples/golden/macro_in_fundecl_vs_typedef.h
-- #include <macro_in_fundecl_vs_typedef.h>
-- char test_internal_quux1 (MC arg1, TC arg2) { return quux1(arg1, arg2); }
-- TC test_internal_quux2 (MC arg1, char arg2) { return quux2(arg1, arg2); }
-- MC *test_internal_wam1 (float arg1, TC *arg2) { return wam1(arg1, arg2); }
-- TC *test_internal_wam2 (float arg1, MC *arg2) { return wam2(arg1, arg2); }
-- void test_internal_struct_typedef1 (struct2 *arg1, MC arg2) { struct_typedef1(arg1, arg2); }
-- void test_internal_struct_typedef2 (struct3_t *arg1, MC arg2) { struct_typedef2(arg1, arg2); }
-- void test_internal_struct_typedef3 (struct4 *arg1, MC arg2) { struct_typedef3(arg1, arg2); }
-- void test_internal_struct_name1 (struct struct1 *arg1, MC arg2) { struct_name1(arg1, arg2); }
-- void test_internal_struct_name2 (struct struct3 *arg1, MC arg2) { struct_name2(arg1, arg2); }
-- void test_internal_struct_name3 (struct struct4 *arg1, MC arg2) { struct_name3(arg1, arg2); }
newtype MC
    = MC {un_MC :: CChar}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype TC
    = TC {un_TC :: CChar}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
foreign import ccall safe "test_internal_quux1" quux1 :: MC ->
                                                         TC -> IO CChar
foreign import ccall safe "test_internal_quux2" quux2 :: MC ->
                                                         CChar -> IO TC
foreign import ccall safe "test_internal_wam1" wam1 :: CFloat ->
                                                       Ptr TC -> IO (Ptr MC)
foreign import ccall safe "test_internal_wam2" wam2 :: CFloat ->
                                                       Ptr MC -> IO (Ptr TC)
data Struct1
    = Struct1 {struct1_a :: CInt}
    deriving stock (Eq, Show)
instance Storable Struct1
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct1 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct1 struct1_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct1_a_3}}
data Struct2
    = Struct2 {struct2_a :: CInt}
    deriving stock (Eq, Show)
instance Storable Struct2
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct2 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct2 struct2_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct2_a_3}}
data Struct3
    = Struct3 {struct3_a :: CInt}
    deriving stock (Eq, Show)
instance Storable Struct3
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct3 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct3 struct3_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct3_a_3}}
newtype Struct3_t
    = Struct3_t {un_Struct3_t :: Struct3}
    deriving stock (Eq, Show)
    deriving newtype Storable
data Struct4
    = Struct4 {struct4_a :: CInt}
    deriving stock (Eq, Show)
instance Storable Struct4
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure Struct4 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {Struct4 struct4_a_3 -> pokeByteOff ptr_1 (0 :: Int) struct4_a_3}}
foreign import ccall safe "test_internal_struct_typedef1" struct_typedef1 :: Ptr Struct2 ->
                                                                             MC -> IO Unit
foreign import ccall safe "test_internal_struct_typedef2" struct_typedef2 :: Ptr Struct3_t ->
                                                                             MC -> IO Unit
foreign import ccall safe "test_internal_struct_typedef3" struct_typedef3 :: Ptr Struct4 ->
                                                                             MC -> IO Unit
foreign import ccall safe "test_internal_struct_name1" struct_name1 :: Ptr Struct1 ->
                                                                       MC -> IO Unit
foreign import ccall safe "test_internal_struct_name2" struct_name2 :: Ptr Struct3 ->
                                                                       MC -> IO Unit
foreign import ccall safe "test_internal_struct_name3" struct_name3 :: Ptr Struct4 ->
                                                                       MC -> IO Unit
