iNCR :: forall a_0 . Integral a_0 => a_0 -> a_0
iNCR = \x_0 -> (+) x_0 1
aDD :: forall a_0 . Num a_0 => a_0 -> a_0 -> a_0
aDD = \x_0 -> \y_1 -> (+) x_0 y_1
iD :: forall a_0 . a_0 -> a_0
iD = \x_0 -> x_0
cONST :: forall a_0 b_1 . a_0 -> b_1 -> a_0
cONST = \x_0 -> \y_1 -> x_0
cMP :: forall a_0 . Ord a_0 => a_0 -> a_0 -> CBool
cMP = \x_0 -> \y_1 -> (<) x_0 y_1
fUN1 :: CULLong -> CULLong -> CULLong
fUN1 = \x_0 -> \y_1 -> (+) x_0 ((*) 12 y_1)
fUN2 :: forall a_0 . Bits a_0 => a_0 -> CULLong -> a_0
fUN2 = \x_0 -> \y_1 -> shiftL x_0 ((*) 3 y_1)
g :: forall a_0 b_1 . Integral b_1 => a_0 -> b_1 -> b_1
g = \x_0 -> \y_1 -> cONST (iNCR y_1) (iD x_0)
dIV1 :: CUInt -> CUInt -> CUInt
dIV1 = \x_0 -> \y_1 -> (/) x_0 ((+) y_1 12)
dIV2 :: CFloat -> CFloat -> CFloat
dIV2 = \x_0 -> \y_1 -> (/) ((*) 10.0 x_0) y_1
