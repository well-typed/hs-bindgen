TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "decls_in_signature.h:2:8",
        declId = NamePair {
          nameC = Name "opaque",
          nameHsIdent = Identifier
            "Opaque"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment = Nothing},
      declKind = DeclOpaque
        (NameKindTagged TagKindStruct),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "decls_in_signature.h:3:8",
        declId = NamePair {
          nameC = Name "outside",
          nameHsIdent = Identifier
            "Outside"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Outside"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:4:7",
                fieldName = NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier
                    "outside_x"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:5:7",
                fieldName = NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier
                    "outside_y"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "decls_in_signature.h:7:6",
        declId = NamePair {
          nameC = Name "normal",
          nameHsIdent = Identifier
            "normal"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "ptr_to_opaque",
                  nameHsIdent = Identifier
                    "ptr_to_opaque"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "opaque",
                    nameHsIdent = Identifier
                      "Opaque"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "ptr_to_defined",
                  nameHsIdent = Identifier
                    "ptr_to_defined"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "outside",
                    nameHsIdent = Identifier
                      "Outside"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "by_value",
                  nameHsIdent = Identifier
                    "by_value"})
              (TypeStruct
                NamePair {
                  nameC = Name "outside",
                  nameHsIdent = Identifier
                    "Outside"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo =
      DeclInfo {
        declLoc =
        "decls_in_signature.h:17:16",
        declId = NamePair {
          nameC = Name "named_struct",
          nameHsIdent = Identifier
            "Named_struct"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment =
        Just
          (Comment
            [
              Paragraph
                [TextContent "Error cases"],
              Paragraph
                [
                  TextContent
                    "See 'UnexpectedAnonInSignature' for discussion (of both these error cases",
                  TextContent
                    "and the edge cases below)."]])},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "Named_struct"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:17:35",
                fieldName = NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier
                    "named_struct_x"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:17:42",
                fieldName = NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier
                    "named_struct_y"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo =
      DeclInfo {
        declLoc =
        "decls_in_signature.h:17:6",
        declId = NamePair {
          nameC = Name "f1",
          nameHsIdent = Identifier "f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment =
        Just
          (Comment
            [
              Paragraph
                [TextContent "Error cases"],
              Paragraph
                [
                  TextContent
                    "See 'UnexpectedAnonInSignature' for discussion (of both these error cases",
                  TextContent
                    "and the edge cases below)."]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "arg",
                  nameHsIdent = Identifier "arg"})
              (TypeStruct
                NamePair {
                  nameC = Name "named_struct",
                  nameHsIdent = Identifier
                    "Named_struct"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "decls_in_signature.h:20:15",
        declId = NamePair {
          nameC = Name "named_union",
          nameHsIdent = Identifier
            "Named_union"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment = Nothing},
      declKind = DeclUnion
        Union {
          unionNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Named_union",
            newtypeField = Name
              "@NsVar"
              "un_Named_union"},
          unionSizeof = 4,
          unionAlignment = 4,
          unionFields = [
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:20:33",
                fieldName = NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier
                    "named_union_x"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimIntegral PrimInt Signed)},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc =
                "decls_in_signature.h:20:41",
                fieldName = NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier
                    "named_union_y"},
                fieldComment = Nothing},
              unionFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed)))}]},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "decls_in_signature.h:20:6",
        declId = NamePair {
          nameC = Name "f2",
          nameHsIdent = Identifier "f2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["decls_in_signature.h"],
            headerInclude =
            "decls_in_signature.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "arg",
                  nameHsIdent = Identifier "arg"})
              (TypeUnion
                NamePair {
                  nameC = Name "named_union",
                  nameHsIdent = Identifier
                    "Named_union"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = [
    "decls_in_signature"]}
