TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_enums.h:2:14",
        declId = NamePair {
          nameC = Name "enumA",
          nameHsIdent = Identifier
            "EnumA"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_enums.h"],
            headerInclude =
            "nested_enums.h"},
        declComment = Nothing},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "EnumA",
            newtypeField = Name
              "@NsVar"
              "un_EnumA"},
          enumType = TypePrim
            (PrimIntegral PrimInt Unsigned),
          enumSizeof = 4,
          enumAlignment = 4,
          enumConstants = [
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:3:17",
                fieldName = NamePair {
                  nameC = Name "VALA_1",
                  nameHsIdent = Identifier
                    "VALA_1"},
                fieldComment = Nothing},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:4:17",
                fieldName = NamePair {
                  nameC = Name "VALA_2",
                  nameHsIdent = Identifier
                    "VALA_2"},
                fieldComment = Nothing},
              enumConstantValue = 1}]},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_enums.h:1:8",
        declId = NamePair {
          nameC = Name "exA",
          nameHsIdent = Identifier "ExA"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_enums.h"],
            headerInclude =
            "nested_enums.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "ExA"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:5:11",
                fieldName = NamePair {
                  nameC = Name "fieldA1",
                  nameHsIdent = Identifier
                    "exA_fieldA1"},
                fieldComment = Nothing},
              structFieldType = TypeEnum
                NamePair {
                  nameC = Name "enumA",
                  nameHsIdent = Identifier
                    "EnumA"}
                NameOriginInSource,
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_enums.h:9:9",
        declId = NamePair {
          nameC = Name "exB_fieldB1",
          nameHsIdent = Identifier
            "ExB_fieldB1"},
        declOrigin = NameOriginGenerated
          (AnonId "nested_enums.h:9:9"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_enums.h"],
            headerInclude =
            "nested_enums.h"},
        declComment = Nothing},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "ExB_fieldB1",
            newtypeField = Name
              "@NsVar"
              "un_ExB_fieldB1"},
          enumType = TypePrim
            (PrimIntegral PrimInt Unsigned),
          enumSizeof = 4,
          enumAlignment = 4,
          enumConstants = [
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:10:17",
                fieldName = NamePair {
                  nameC = Name "VALB_1",
                  nameHsIdent = Identifier
                    "VALB_1"},
                fieldComment = Nothing},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:11:17",
                fieldName = NamePair {
                  nameC = Name "VALB_2",
                  nameHsIdent = Identifier
                    "VALB_2"},
                fieldComment = Nothing},
              enumConstantValue = 1}]},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_enums.h:8:8",
        declId = NamePair {
          nameC = Name "exB",
          nameHsIdent = Identifier "ExB"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_enums.h"],
            headerInclude =
            "nested_enums.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "ExB"),
          structSizeof = 4,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_enums.h:12:11",
                fieldName = NamePair {
                  nameC = Name "fieldB1",
                  nameHsIdent = Identifier
                    "exB_fieldB1"},
                fieldComment = Nothing},
              structFieldType = TypeEnum
                NamePair {
                  nameC = Name "exB_fieldB1",
                  nameHsIdent = Identifier
                    "ExB_fieldB1"}
                (NameOriginGenerated
                  (AnonId "nested_enums.h:9:9")),
              structFieldOffset = 0,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["nested_enums"]}
