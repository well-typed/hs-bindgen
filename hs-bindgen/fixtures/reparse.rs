/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct some_struct {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of some_struct"][::std::mem::size_of::<some_struct>() - 0usize];
    ["Alignment of some_struct"][::std::mem::align_of::<some_struct>() - 1usize];
};
#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct some_union {
    pub bindgen_union_field: [u8; 0usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of some_union"][::std::mem::size_of::<some_union>() - 0usize];
    ["Alignment of some_union"][::std::mem::align_of::<some_union>() - 1usize];
};
pub const some_enum_ENUM_A: some_enum = 0;
pub type some_enum = ::std::os::raw::c_uint;
unsafe extern "C" {
    /// Function declarations
    pub fn args_char1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn args_char2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_schar);
}
unsafe extern "C" {
    pub fn args_char3(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn args_short1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_short);
}
unsafe extern "C" {
    pub fn args_short2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_short);
}
unsafe extern "C" {
    pub fn args_short3(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_ushort);
}
unsafe extern "C" {
    pub fn args_int1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn args_int2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn args_int3(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn args_long1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn args_long2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn args_long3(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn args_float(arg1: ::std::os::raw::c_int, arg2: f32);
}
unsafe extern "C" {
    pub fn args_double(arg1: ::std::os::raw::c_int, arg2: f64);
}
unsafe extern "C" {
    pub fn args_bool1(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn args_struct(arg1: ::std::os::raw::c_int, arg2: some_struct);
}
unsafe extern "C" {
    pub fn args_union(arg1: ::std::os::raw::c_int, arg2: some_union);
}
unsafe extern "C" {
    pub fn args_enum(arg1: ::std::os::raw::c_int, arg2: some_enum);
}
unsafe extern "C" {
    pub fn args_pointer1(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn args_pointer2(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn args_pointer3(arg1: ::std::os::raw::c_int, arg3: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn ret_A() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ret_char1(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ret_char2(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_schar;
}
unsafe extern "C" {
    pub fn ret_char3(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn ret_short1(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn ret_short2(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn ret_short3(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn ret_int1(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ret_int2(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ret_int3(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn ret_long1(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ret_long2(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn ret_long3(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn ret_float(arg1: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ret_double(arg1: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ret_bool1(arg1: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn ret_struct(arg1: ::std::os::raw::c_int) -> some_struct;
}
unsafe extern "C" {
    pub fn ret_union(arg1: ::std::os::raw::c_int) -> some_union;
}
unsafe extern "C" {
    pub fn ret_enum(arg1: ::std::os::raw::c_int) -> some_enum;
}
unsafe extern "C" {
    pub fn ret_pointer1(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ret_pointer2(arg1: ::std::os::raw::c_int) -> *mut *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ret_pointer3(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn body1(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn body2() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn args_complex_float(arg1: ::std::os::raw::c_int, arg2: __BindgenComplex<f32>);
}
unsafe extern "C" {
    pub fn args_complex_double(arg1: ::std::os::raw::c_int, arg2: __BindgenComplex<f64>);
}
unsafe extern "C" {
    pub fn ret_complex_float(arg1: ::std::os::raw::c_int) -> __BindgenComplex<f32>;
}
unsafe extern "C" {
    pub fn ret_complex_double(arg1: ::std::os::raw::c_int) -> __BindgenComplex<f64>;
}
unsafe extern "C" {
    pub fn bespoke_args1(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn bespoke_args2(arg1: ::std::os::raw::c_int, arg2: usize);
}
unsafe extern "C" {
    pub fn bespoke_ret1(arg1: ::std::os::raw::c_int) -> bool;
}
unsafe extern "C" {
    pub fn bespoke_ret2(arg1: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    /// Arrays
    pub fn arr_args1(arg1: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arr_args2(arg1: *mut *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arr_args3(arg1: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn arr_args4(arg1: *mut *mut ::std::os::raw::c_int);
}
pub type arr_typedef1 = [::std::os::raw::c_int; 0usize];
pub type arr_typedef2 = [*mut ::std::os::raw::c_int; 0usize];
pub type arr_typedef3 = [::std::os::raw::c_int; 5usize];
pub type arr_typedef4 = [*mut ::std::os::raw::c_int; 5usize];
/// Typedefs
pub type typedef1 = ::std::os::raw::c_int;
pub type typedef2 = *mut ::std::os::raw::c_int;
pub type typedef3 = *mut *mut ::std::os::raw::c_int;
unsafe extern "C" {
    /// Function pointers
    pub fn funptr_args1(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
unsafe extern "C" {
    pub fn funptr_args2(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
unsafe extern "C" {
    pub fn funptr_args3(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
unsafe extern "C" {
    pub fn funptr_args4(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: f64,
            ) -> ::std::os::raw::c_char,
        >,
    );
}
unsafe extern "C" {
    pub fn funptr_args5(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: f64,
            ) -> *mut ::std::os::raw::c_int,
        >,
    );
}
pub type funptr_typedef1 = ::std::option::Option<
    unsafe extern "C" fn() -> ::std::os::raw::c_int,
>;
pub type funptr_typedef2 = ::std::option::Option<
    unsafe extern "C" fn() -> *mut ::std::os::raw::c_int,
>;
pub type funptr_typedef3 = ::std::option::Option<
    unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_int,
>;
pub type funptr_typedef4 = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> ::std::os::raw::c_int,
>;
pub type funptr_typedef5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *mut ::std::os::raw::c_int,
>;
unsafe extern "C" {
    /** Comments in awkward places

 (Prior to language-c we failed to parse there.)*/
    pub fn comments1(arg1: ::std::os::raw::c_int);
}
pub type comments2 = ::std::os::raw::c_int;
/// Struct fields
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct example_struct {
    pub field1: ::std::os::raw::c_int,
    pub field2: *mut ::std::os::raw::c_int,
    pub field3: *mut *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of example_struct"][::std::mem::size_of::<example_struct>() - 24usize];
    ["Alignment of example_struct"][::std::mem::align_of::<example_struct>() - 8usize];
    [
        "Offset of field: example_struct::field1",
    ][::std::mem::offset_of!(example_struct, field1) - 0usize];
    [
        "Offset of field: example_struct::field2",
    ][::std::mem::offset_of!(example_struct, field2) - 8usize];
    [
        "Offset of field: example_struct::field3",
    ][::std::mem::offset_of!(example_struct, field3) - 16usize];
};
unsafe extern "C" {
    /** `const` qualifier

 NOTE: These were not parsed correctly prior to the switch to language-c.*/
    pub fn const_prim_before1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn const_prim_before2(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_schar,
    );
}
unsafe extern "C" {
    pub fn const_prim_before3(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uchar,
    );
}
unsafe extern "C" {
    pub fn const_prim_after1(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn const_prim_after2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_schar);
}
unsafe extern "C" {
    pub fn const_prim_after3(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_uchar);
}
unsafe extern "C" {
    pub fn const_withoutSign_before1(arg1: ::std::os::raw::c_int, arg2: f32);
}
unsafe extern "C" {
    pub fn const_withoutSign_before2(arg1: ::std::os::raw::c_int, arg2: f64);
}
unsafe extern "C" {
    pub fn const_withoutSign_before3(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn const_withoutSign_before4(arg1: ::std::os::raw::c_int, arg2: some_struct);
}
unsafe extern "C" {
    pub fn const_withoutSign_before5(arg1: ::std::os::raw::c_int, arg2: some_union);
}
unsafe extern "C" {
    pub fn const_withoutSign_before6(arg1: ::std::os::raw::c_int, arg2: some_enum);
}
unsafe extern "C" {
    pub fn const_withoutSign_before7(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn const_withoutSign_before8(arg1: ::std::os::raw::c_int, arg2: usize);
}
unsafe extern "C" {
    pub fn const_withoutSign_after1(arg1: ::std::os::raw::c_int, arg2: f32);
}
unsafe extern "C" {
    pub fn const_withoutSign_after2(arg1: ::std::os::raw::c_int, arg2: f64);
}
unsafe extern "C" {
    pub fn const_withoutSign_after3(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn const_withoutSign_after4(arg1: ::std::os::raw::c_int, arg2: some_struct);
}
unsafe extern "C" {
    pub fn const_withoutSign_after5(arg1: ::std::os::raw::c_int, arg2: some_union);
}
unsafe extern "C" {
    pub fn const_withoutSign_after6(arg1: ::std::os::raw::c_int, arg2: some_enum);
}
unsafe extern "C" {
    pub fn const_withoutSign_after7(arg1: ::std::os::raw::c_int, arg2: bool);
}
unsafe extern "C" {
    pub fn const_withoutSign_after8(arg1: ::std::os::raw::c_int, arg2: usize);
}
unsafe extern "C" {
    pub fn const_pointers_args1(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn const_pointers_args2(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn const_pointers_args3(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn const_pointers_args4(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn const_pointers_args5(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn const_pointers_ret1(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn const_pointers_ret2(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn const_pointers_ret3(
        arg1: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn const_pointers_ret4(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn const_pointers_ret5(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_int;
}
pub type const_typedef1 = ::std::os::raw::c_int;
pub type const_typedef2 = ::std::os::raw::c_int;
pub type const_typedef3 = *const ::std::os::raw::c_int;
pub type const_typedef4 = *const ::std::os::raw::c_int;
pub type const_typedef5 = *mut ::std::os::raw::c_int;
pub type const_typedef6 = *const ::std::os::raw::c_int;
pub type const_typedef7 = *const ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct example_struct_with_const {
    pub const_field1: ::std::os::raw::c_int,
    pub const_field2: ::std::os::raw::c_int,
    pub const_field3: *const ::std::os::raw::c_int,
    pub const_field4: *const ::std::os::raw::c_int,
    pub const_field5: *mut ::std::os::raw::c_int,
    pub const_field6: *const ::std::os::raw::c_int,
    pub const_field7: *const ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of example_struct_with_const",
    ][::std::mem::size_of::<example_struct_with_const>() - 48usize];
    [
        "Alignment of example_struct_with_const",
    ][::std::mem::align_of::<example_struct_with_const>() - 8usize];
    [
        "Offset of field: example_struct_with_const::const_field1",
    ][::std::mem::offset_of!(example_struct_with_const, const_field1) - 0usize];
    [
        "Offset of field: example_struct_with_const::const_field2",
    ][::std::mem::offset_of!(example_struct_with_const, const_field2) - 4usize];
    [
        "Offset of field: example_struct_with_const::const_field3",
    ][::std::mem::offset_of!(example_struct_with_const, const_field3) - 8usize];
    [
        "Offset of field: example_struct_with_const::const_field4",
    ][::std::mem::offset_of!(example_struct_with_const, const_field4) - 16usize];
    [
        "Offset of field: example_struct_with_const::const_field5",
    ][::std::mem::offset_of!(example_struct_with_const, const_field5) - 24usize];
    [
        "Offset of field: example_struct_with_const::const_field6",
    ][::std::mem::offset_of!(example_struct_with_const, const_field6) - 32usize];
    [
        "Offset of field: example_struct_with_const::const_field7",
    ][::std::mem::offset_of!(example_struct_with_const, const_field7) - 40usize];
};
pub type const_funptr1 = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> ::std::os::raw::c_int,
>;
pub type const_funptr2 = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: f64) -> ::std::os::raw::c_int,
>;
pub type const_funptr3 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *const ::std::os::raw::c_int,
>;
pub type const_funptr4 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *const ::std::os::raw::c_int,
>;
pub type const_funptr5 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *mut ::std::os::raw::c_int,
>;
pub type const_funptr6 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *const ::std::os::raw::c_int,
>;
pub type const_funptr7 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> *const ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn const_array_elem1(arg1: *const ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn const_array_elem2(arg1: *mut *const ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn const_array_elem3(arg1: *const *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    /// Other examples we reparsed /incorrectly/ before language-c
    pub fn noParams1() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn noParams2() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn noParams3(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
unsafe extern "C" {
    pub fn funptr_ret1(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
}
unsafe extern "C" {
    pub fn funptr_ret2(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret3(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
}
unsafe extern "C" {
    pub fn funptr_ret4(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> ::std::os::raw::c_char,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret5(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *mut ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret6(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *const ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret7(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *const ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret8(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *mut ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret9(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *const ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    pub fn funptr_ret10(
        arg1: ::std::os::raw::c_int,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg1: f64,
        ) -> *const ::std::os::raw::c_int,
    >;
}
