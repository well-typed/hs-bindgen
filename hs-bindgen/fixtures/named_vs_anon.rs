/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct a {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of a"][::std::mem::size_of::<a>() - 0usize];
    ["Alignment of a"][::std::mem::align_of::<a>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct1"][::std::mem::size_of::<struct1>() - 0usize];
    ["Alignment of struct1"][::std::mem::align_of::<struct1>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct b_s {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of b_s"][::std::mem::size_of::<b_s>() - 0usize];
    ["Alignment of b_s"][::std::mem::align_of::<b_s>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct2_s {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct2_s"][::std::mem::size_of::<struct2_s>() - 0usize];
    ["Alignment of struct2_s"][::std::mem::align_of::<struct2_s>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct c {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of c"][::std::mem::size_of::<c>() - 0usize];
    ["Alignment of c"][::std::mem::align_of::<c>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct struct3 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct3"][::std::mem::size_of::<struct3>() - 0usize];
    ["Alignment of struct3"][::std::mem::align_of::<struct3>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct d {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of d"][::std::mem::size_of::<d>() - 0usize];
    ["Alignment of d"][::std::mem::align_of::<d>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct struct4 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct4"][::std::mem::size_of::<struct4>() - 0usize];
    ["Alignment of struct4"][::std::mem::align_of::<struct4>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct e_s {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of e_s"][::std::mem::size_of::<e_s>() - 0usize];
    ["Alignment of e_s"][::std::mem::align_of::<e_s>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct struct5_s {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct5_s"][::std::mem::size_of::<struct5_s>() - 0usize];
    ["Alignment of struct5_s"][::std::mem::align_of::<struct5_s>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of f"][::std::mem::size_of::<f>() - 0usize];
    ["Alignment of f"][::std::mem::align_of::<f>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct typedef1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of typedef1"][::std::mem::size_of::<typedef1>() - 0usize];
    ["Alignment of typedef1"][::std::mem::align_of::<typedef1>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct g {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of g"][::std::mem::size_of::<g>() - 0usize];
    ["Alignment of g"][::std::mem::align_of::<g>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct typedef2 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of typedef2"][::std::mem::size_of::<typedef2>() - 0usize];
    ["Alignment of typedef2"][::std::mem::align_of::<typedef2>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct h {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of h"][::std::mem::size_of::<h>() - 0usize];
    ["Alignment of h"][::std::mem::align_of::<h>() - 1usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct typedef3 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of typedef3"][::std::mem::size_of::<typedef3>() - 0usize];
    ["Alignment of typedef3"][::std::mem::align_of::<typedef3>() - 1usize];
};
