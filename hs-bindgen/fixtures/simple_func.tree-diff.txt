TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "simple_func.h:1:8",
        declId = NamePair {
          nameC = Name "erf",
          nameHsIdent = HsIdentifier
            "erf"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["simple_func.h"],
            headerInclude =
            "simple_func.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "arg",
                  nameHsIdent = HsIdentifier
                    "arg"})
              (TypePrim
                (PrimFloating PrimDouble))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimFloating PrimDouble)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "simple_func.h:3:22",
        declId = NamePair {
          nameC = Name "bad_fma",
          nameHsIdent = HsIdentifier
            "bad_fma"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["simple_func.h"],
            headerInclude =
            "simple_func.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = HsIdentifier "x"})
              (TypePrim
                (PrimFloating PrimDouble)),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = HsIdentifier "y"})
              (TypePrim
                (PrimFloating PrimDouble)),
            _×_
              (Just
                NamePair {
                  nameC = Name "z",
                  nameHsIdent = HsIdentifier "z"})
              (TypePrim
                (PrimFloating PrimDouble))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimFloating PrimDouble)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "simple_func.h:7:6",
        declId = NamePair {
          nameC = Name "no_args",
          nameHsIdent = HsIdentifier
            "no_args"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["simple_func.h"],
            headerInclude =
            "simple_func.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "simple_func.h:9:6",
        declId = NamePair {
          nameC = Name "no_args_no_void",
          nameHsIdent = HsIdentifier
            "no_args_no_void"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["simple_func.h"],
            headerInclude =
            "simple_func.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "simple_func.h:11:5",
        declId = NamePair {
          nameC = Name "fun",
          nameHsIdent = HsIdentifier
            "fun"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["simple_func.h"],
            headerInclude =
            "simple_func.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = HsIdentifier "x"})
              (TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed)))),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = HsIdentifier "y"})
              (TypePrim
                (PrimFloating PrimDouble))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["simple_func"]}
