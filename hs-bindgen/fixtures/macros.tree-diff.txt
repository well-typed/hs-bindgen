WrapCHeader
  (Header
    [
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 1,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "OBJECTLIKE1",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "1",
                  literalValue = 1}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 2,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "OBJECTLIKE2",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "2",
                  literalValue = 2}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 3,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "OBJECTLIKE3",
            macroArgs = [],
            macroBody = MApp
              MAdd
              [
                MTerm
                  (MInt
                    Literal {
                      literalText = "3",
                      literalValue = 3}
                    Nothing),
                MTerm
                  (MInt
                    Literal {
                      literalText = "3",
                      literalValue = 3}
                    Nothing)]},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 4,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "OBJECTLIKE4",
            macroArgs = [],
            macroBody = MApp
              MAdd
              [
                MTerm
                  (MInt
                    Literal {
                      literalText = "4",
                      literalValue = 4}
                    Nothing),
                MTerm
                  (MInt
                    Literal {
                      literalText = "4",
                      literalValue = 4}
                    Nothing)]},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 6,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "MEANING_OF_LIFE1",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "42",
                  literalValue = 42}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 7,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "MEANING_OF_LIFE2",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "052",
                  literalValue = 42}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 8,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "MEANING_OF_LIFE3",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "0x2a",
                  literalValue = 42}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 9,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "MEANING_OF_LIFE4",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "0X2A",
                  literalValue = 42}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 10,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "MEANING_OF_LIFE5",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText = "0b101010",
                  literalValue = 42}
                Nothing)},
          macroDeclMacroTy = Just
            "(forall a. Integral a => a)"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 12,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "LONG_INT_TOKEN1",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText =
                  "18446744073709550592ull",
                  literalValue =
                  18446744073709550592}
                (Just
                  (PrimLongLong Unsigned)))},
          macroDeclMacroTy = Just
            "ULLong"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 13,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "LONG_INT_TOKEN2",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText =
                  "18'446'744'073'709'550'592llu",
                  literalValue =
                  18446744073709550592}
                (Just
                  (PrimLongLong Unsigned)))},
          macroDeclMacroTy = Just
            "ULLong"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 14,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "LONG_INT_TOKEN3",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText =
                  "1844'6744'0737'0955'0592uLL",
                  literalValue =
                  18446744073709550592}
                (Just
                  (PrimLongLong Unsigned)))},
          macroDeclMacroTy = Just
            "ULLong"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 15,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName
              "LONG_INT_TOKEN4",
            macroArgs = [],
            macroBody = MTerm
              (MInt
                Literal {
                  literalText =
                  "184467'440737'0'95505'92LLU",
                  literalValue =
                  18446744073709550592}
                (Just
                  (PrimLongLong Unsigned)))},
          macroDeclMacroTy = Just
            "ULLong"},
      DeclMacro
        MacroTcError {
          macroTcErrorMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 17,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "BAD1",
            macroArgs = [],
            macroBody = MApp
              MAdd
              [
                MTerm (MFloat 0.1),
                MTerm
                  (MInt
                    Literal {
                      literalText = "1",
                      literalValue = 1}
                    Nothing)]},
          macroTcError = T.concat
            [
              "Failed to typecheck macro:\n",
              "Inconsistent pairs of constraints:\n",
              "  - 'Integral a_0[tau]' and Fractional a_0[tau]\n"]},
      DeclMacro
        MacroTcError {
          macroTcErrorMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 18,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "BAD2",
            macroArgs = [],
            macroBody = MApp
              MMult
              [
                MTerm
                  (MInt
                    Literal {
                      literalText = "2l",
                      literalValue = 2}
                    (Just (PrimLong Signed))),
                MTerm
                  (MInt
                    Literal {
                      literalText = "2ul",
                      literalValue = 2}
                    (Just (PrimLong Unsigned)))]},
          macroTcError = T.concat
            [
              "Failed to typecheck macro:\n",
              "Could not unify:\n",
              "  - ULong\n",
              "  - Long\n",
              "because the type constructors are different.\n",
              "In an application of 'MMult'.\n",
              "\n"]},
      DeclMacro
        MacroTcError {
          macroTcErrorMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macros.h"],
                singleLocLine = 19,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "BAD3",
            macroArgs = [],
            macroBody = MApp
              MDiv
              [
                MTerm
                  (MInt
                    Literal {
                      literalText = "3",
                      literalValue = 3}
                    Nothing),
                MTerm
                  (MInt
                    Literal {
                      literalText = "7",
                      literalValue = 7}
                    Nothing)]},
          macroTcError = T.concat
            [
              "Failed to typecheck macro:\n",
              "Inconsistent pairs of constraints:\n",
              "  - 'Fractional a_0[tau]' and Integral a_0[tau]\n"]}])
