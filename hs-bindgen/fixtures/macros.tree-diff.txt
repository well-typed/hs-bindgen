TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:1:9",
        declId = NamePair {
          nameC = CName "OBJECTLIKE1",
          nameHsIdent = HsIdentifier
            "oBJECTLIKE1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "1",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 1}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:2:9",
        declId = NamePair {
          nameC = CName "OBJECTLIKE2",
          nameHsIdent = HsIdentifier
            "oBJECTLIKE2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "2",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 2}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:3:9",
        declId = NamePair {
          nameC = CName "OBJECTLIKE3",
          nameHsIdent = HsIdentifier
            "oBJECTLIKE3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MAdd
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "3",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 3}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "3",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 3})],
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:4:9",
        declId = NamePair {
          nameC = CName "OBJECTLIKE4",
          nameHsIdent = HsIdentifier
            "oBJECTLIKE4"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MAdd
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "4",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 4}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "4",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 4})],
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:6:9",
        declId = NamePair {
          nameC = CName
            "MEANING_OF_LIFE1",
          nameHsIdent = HsIdentifier
            "mEANING_OF_LIFE1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "42",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 42}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:7:9",
        declId = NamePair {
          nameC = CName
            "MEANING_OF_LIFE2",
          nameHsIdent = HsIdentifier
            "mEANING_OF_LIFE2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "052",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 42}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:8:9",
        declId = NamePair {
          nameC = CName
            "MEANING_OF_LIFE3",
          nameHsIdent = HsIdentifier
            "mEANING_OF_LIFE3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0x2a",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 42}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:9:9",
        declId = NamePair {
          nameC = CName
            "MEANING_OF_LIFE4",
          nameHsIdent = HsIdentifier
            "mEANING_OF_LIFE4"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0X2A",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 42}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:10:9",
        declId = NamePair {
          nameC = CName
            "MEANING_OF_LIFE5",
          nameHsIdent = HsIdentifier
            "mEANING_OF_LIFE5"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText = "0b101010",
                  integerLiteralType = Int Signed,
                  integerLiteralValue = 42}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (Int Signed)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:12:9",
        declId = NamePair {
          nameC = CName "LONG_INT_TOKEN1",
          nameHsIdent = HsIdentifier
            "lONG_INT_TOKEN1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText =
                  "18446744073709550592ull",
                  integerLiteralType = LongLong
                    Unsigned,
                  integerLiteralValue =
                  18446744073709550592}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (LongLong Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:13:9",
        declId = NamePair {
          nameC = CName "LONG_INT_TOKEN2",
          nameHsIdent = HsIdentifier
            "lONG_INT_TOKEN2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText =
                  "18'446'744'073'709'550'592llu",
                  integerLiteralType = LongLong
                    Unsigned,
                  integerLiteralValue =
                  18446744073709550592}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (LongLong Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:14:9",
        declId = NamePair {
          nameC = CName "LONG_INT_TOKEN3",
          nameHsIdent = HsIdentifier
            "lONG_INT_TOKEN3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText =
                  "1844'6744'0737'0955'0592uLL",
                  integerLiteralType = LongLong
                    Unsigned,
                  integerLiteralValue =
                  18446744073709550592}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (LongLong Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:15:9",
        declId = NamePair {
          nameC = CName "LONG_INT_TOKEN4",
          nameHsIdent = HsIdentifier
            "lONG_INT_TOKEN4"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MInt
                IntegerLiteral {
                  integerLiteralText =
                  "184467'440737'0'95505'92LLU",
                  integerLiteralType = LongLong
                    Unsigned,
                  integerLiteralValue =
                  18446744073709550592}),
            macroExprType =
            "IntLike (CIntegralType (IntLike (LongLong Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:17:9",
        declId = NamePair {
          nameC = CName "TUPLE1",
          nameHsIdent = HsIdentifier
            "tUPLE1"}},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MTuple
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "2",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 2})],
            macroExprType =
            "Tuple2 (IntLike (CIntegralType (IntLike (Int Signed)))) (IntLike (CIntegralType (IntLike (Int Signed))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:18:9",
        declId = NamePair {
          nameC = CName "TUPLE2",
          nameHsIdent = HsIdentifier
            "tUPLE2"}},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MTuple
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "3",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 3}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "4",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 4})],
            macroExprType =
            "Tuple2 (IntLike (CIntegralType (IntLike (Int Signed)))) (IntLike (CIntegralType (IntLike (Int Signed))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:19:9",
        declId = NamePair {
          nameC = CName "TUPLE3",
          nameHsIdent = HsIdentifier
            "tUPLE3"}},
      declKind =
      DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MTuple
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "5",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 5}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "6",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 6})],
            macroExprType =
            "Tuple2 (IntLike (CIntegralType (IntLike (Int Signed)))) (IntLike (CIntegralType (IntLike (Int Signed))))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:24:9",
        declId = NamePair {
          nameC = CName "FLT1_1",
          nameHsIdent = HsIdentifier
            "fLT1_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "11e4",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  110000.0,
                  floatingLiteralDoubleValue =
                  110000.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:25:9",
        declId = NamePair {
          nameC = CName "FLT1_2",
          nameHsIdent = HsIdentifier
            "fLT1_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "12E-3",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  1.2e-2,
                  floatingLiteralDoubleValue =
                  1.2e-2}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:26:9",
        declId = NamePair {
          nameC = CName "FLT1_3",
          nameHsIdent = HsIdentifier
            "fLT1_3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "13e-03f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  1.3e-2,
                  floatingLiteralDoubleValue =
                  1.3e-2}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:28:9",
        declId = NamePair {
          nameC = CName "FLT2_1",
          nameHsIdent = HsIdentifier
            "fLT2_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "21.",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  21.0,
                  floatingLiteralDoubleValue =
                  21.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:29:9",
        declId = NamePair {
          nameC = CName "FLT2_2",
          nameHsIdent = HsIdentifier
            "fLT2_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "22.e2",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  2200.0,
                  floatingLiteralDoubleValue =
                  2200.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:30:9",
        declId = NamePair {
          nameC = CName "FLT2_3",
          nameHsIdent = HsIdentifier
            "fLT2_3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "23.f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  23.0,
                  floatingLiteralDoubleValue =
                  23.0}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:32:9",
        declId = NamePair {
          nameC = CName "FLT3_1",
          nameHsIdent = HsIdentifier
            "fLT3_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "31.0",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  31.0,
                  floatingLiteralDoubleValue =
                  31.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:33:9",
        declId = NamePair {
          nameC = CName "FLT3_2",
          nameHsIdent = HsIdentifier
            "fLT3_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = ".32",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  0.32,
                  floatingLiteralDoubleValue =
                  0.32}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:34:9",
        declId = NamePair {
          nameC = CName "FLT3_3",
          nameHsIdent = HsIdentifier
            "fLT3_3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = ".33e2",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  33.0,
                  floatingLiteralDoubleValue =
                  33.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:35:9",
        declId = NamePair {
          nameC = CName "FLT3_4",
          nameHsIdent = HsIdentifier
            "fLT3_4"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = ".34e-2f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  3.4e-3,
                  floatingLiteralDoubleValue =
                  3.4e-3}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:37:9",
        declId = NamePair {
          nameC = CName "FLT4_1",
          nameHsIdent = HsIdentifier
            "fLT4_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "0x41p4",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  650000.0,
                  floatingLiteralDoubleValue =
                  650000.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:38:9",
        declId = NamePair {
          nameC = CName "FLT4_2",
          nameHsIdent = HsIdentifier
            "fLT4_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "0x42P-3",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  6.6e-2,
                  floatingLiteralDoubleValue =
                  6.6e-2}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:39:9",
        declId = NamePair {
          nameC = CName "FLT4_3",
          nameHsIdent = HsIdentifier
            "fLT4_3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText =
                  "0x43p-03f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  6.7e-2,
                  floatingLiteralDoubleValue =
                  6.7e-2}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:41:9",
        declId = NamePair {
          nameC = CName "FLT5_1",
          nameHsIdent = HsIdentifier
            "fLT5_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "0x51.p0",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  81.0,
                  floatingLiteralDoubleValue =
                  81.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:42:9",
        declId = NamePair {
          nameC = CName "FLT5_2",
          nameHsIdent = HsIdentifier
            "fLT5_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText =
                  "0x52.P0f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  82.0,
                  floatingLiteralDoubleValue =
                  82.0}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:44:9",
        declId = NamePair {
          nameC = CName "FLT6_1",
          nameHsIdent = HsIdentifier
            "fLT6_1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText =
                  "0x61.0P2",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  15520.0,
                  floatingLiteralDoubleValue =
                  15520.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:45:9",
        declId = NamePair {
          nameC = CName "FLT6_2",
          nameHsIdent = HsIdentifier
            "fLT6_2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText = "0x.62p2",
                  floatingLiteralType =
                  DoubleType,
                  floatingLiteralFloatValue =
                  98.0,
                  floatingLiteralDoubleValue =
                  98.0}),
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:46:9",
        declId = NamePair {
          nameC = CName "FLT6_3",
          nameHsIdent = HsIdentifier
            "fLT6_3"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MTerm
              (MFloat
                FloatingLiteral {
                  floatingLiteralText =
                  "0x.63p-2f",
                  floatingLiteralType = FloatType,
                  floatingLiteralFloatValue =
                  9.9e-3,
                  floatingLiteralDoubleValue =
                  9.9e-3}),
            macroExprType =
            "FloatLike FloatType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:49:9",
        declId = NamePair {
          nameC = CName "BAD1",
          nameHsIdent = HsIdentifier
            "bAD1"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MAdd
              [
                MTerm
                  (MFloat
                    FloatingLiteral {
                      floatingLiteralText = "0.1",
                      floatingLiteralType =
                      DoubleType,
                      floatingLiteralFloatValue = 0.1,
                      floatingLiteralDoubleValue =
                      0.1}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Int Signed,
                      integerLiteralValue = 1})],
            macroExprType =
            "FloatLike DoubleType"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "macros.h:50:9",
        declId = NamePair {
          nameC = CName "BAD2",
          nameHsIdent = HsIdentifier
            "bAD2"}},
      declKind = DeclMacro
        (MacroExpr
          CheckedMacroExpr {
            macroExprArgs = [],
            macroExprBody = MApp
              MMult
              [
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "2l",
                      integerLiteralType = Long
                        Signed,
                      integerLiteralValue = 2}),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "2ul",
                      integerLiteralType = Long
                        Unsigned,
                      integerLiteralValue = 2})],
            macroExprType =
            "IntLike (CIntegralType (IntLike (Long Unsigned)))"}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = [
    "/home/edsko/wt/clients/anduril/hs-bindgen/hs-bindgen/examples/macros.h"]}
