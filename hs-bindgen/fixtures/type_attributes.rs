/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct S {
    pub f: [::std::os::raw::c_short; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S"][::std::mem::size_of::<S>() - 8usize];
    ["Alignment of S"][::std::mem::align_of::<S>() - 8usize];
    ["Offset of field: S::f"][::std::mem::offset_of!(S, f) - 0usize];
};
pub type more_aligned_int = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct S2 {
    pub f: [::std::os::raw::c_short; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S2"][::std::mem::size_of::<S2>() - 16usize];
    ["Alignment of S2"][::std::mem::align_of::<S2>() - 16usize];
    ["Offset of field: S2::f"][::std::mem::offset_of!(S2, f) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct my_unpacked_struct {
    pub c: ::std::os::raw::c_char,
    pub i: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of my_unpacked_struct"][::std::mem::size_of::<my_unpacked_struct>() - 8usize];
    [
        "Alignment of my_unpacked_struct",
    ][::std::mem::align_of::<my_unpacked_struct>() - 4usize];
    [
        "Offset of field: my_unpacked_struct::c",
    ][::std::mem::offset_of!(my_unpacked_struct, c) - 0usize];
    [
        "Offset of field: my_unpacked_struct::i",
    ][::std::mem::offset_of!(my_unpacked_struct, i) - 4usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct my_packed_struct {
    pub c: ::std::os::raw::c_char,
    pub i: ::std::os::raw::c_int,
    pub s: my_unpacked_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of my_packed_struct"][::std::mem::size_of::<my_packed_struct>() - 13usize];
    [
        "Alignment of my_packed_struct",
    ][::std::mem::align_of::<my_packed_struct>() - 1usize];
    [
        "Offset of field: my_packed_struct::c",
    ][::std::mem::offset_of!(my_packed_struct, c) - 0usize];
    [
        "Offset of field: my_packed_struct::i",
    ][::std::mem::offset_of!(my_packed_struct, i) - 1usize];
    [
        "Offset of field: my_packed_struct::s",
    ][::std::mem::offset_of!(my_packed_struct, s) - 5usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait_status_ptr_t {
    pub __ip: *mut ::std::os::raw::c_int,
    pub __up: *mut wait,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_status_ptr_t"][::std::mem::size_of::<wait_status_ptr_t>() - 8usize];
    [
        "Alignment of wait_status_ptr_t",
    ][::std::mem::align_of::<wait_status_ptr_t>() - 8usize];
    [
        "Offset of field: wait_status_ptr_t::__ip",
    ][::std::mem::offset_of!(wait_status_ptr_t, __ip) - 0usize];
    [
        "Offset of field: wait_status_ptr_t::__up",
    ][::std::mem::offset_of!(wait_status_ptr_t, __up) - 0usize];
};
pub type T1 = ::std::os::raw::c_int;
pub type short_a = ::std::os::raw::c_short;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub _address: u8,
}
