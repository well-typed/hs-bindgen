TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:10:15",
        declId = NamePair {
          nameC = Name "int16_T",
          nameHsIdent = Identifier
            "Int16_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Examples from the initial specification"]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Int16_T",
            newtypeField = Name
              "@NsVar"
              "un_Int16_T"},
          typedefType = TypePrim
            (PrimIntegral
              PrimShort
              Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:11:13",
        declId = NamePair {
          nameC = Name "int32_T",
          nameHsIdent = Identifier
            "Int32_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Int32_T",
            newtypeField = Name
              "@NsVar"
              "un_Int32_T"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:12:19",
        declId = NamePair {
          nameC = Name "int64_T",
          nameHsIdent = Identifier
            "Int64_T"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Int64_T",
            newtypeField = Name
              "@NsVar"
              "un_Int64_T"},
          typedefType = TypePrim
            (PrimIntegral
              PrimLongLong
              Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:14:9",
        declId = NamePair {
          nameC = Name "cint16_T",
          nameHsIdent = Identifier
            "Cint16_T"},
        declOrigin = NameOriginGenerated
          (AnonId "spec_examples.h:14:9"),
        declAliases = [Name "cint16_T"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Cint16_T"),
          structSizeof = 4,
          structAlignment = 2,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:15:11",
                fieldName = NamePair {
                  nameC = Name "re",
                  nameHsIdent = Identifier
                    "cint16_T_re"},
                fieldComment = Nothing},
              structFieldType = TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "int16_T",
                    nameHsIdent = Identifier
                      "Int16_T"}
                  (TypePrim
                    (PrimIntegral
                      PrimShort
                      Signed))),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:16:11",
                fieldName = NamePair {
                  nameC = Name "im",
                  nameHsIdent = Identifier
                    "cint16_T_im"},
                fieldComment = Nothing},
              structFieldType = TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "int16_T",
                    nameHsIdent = Identifier
                      "Int16_T"}
                  (TypePrim
                    (PrimIntegral
                      PrimShort
                      Signed))),
              structFieldOffset = 16,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:19:8",
        declId = NamePair {
          nameC = Name "B",
          nameHsIdent = Identifier "B"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "B"),
          structSizeof = 0,
          structAlignment = 1,
          structFields = [],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:23:8",
        declId = NamePair {
          nameC = Name "A",
          nameHsIdent = Identifier "A"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "A"),
          structSizeof = 152,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:24:10",
                fieldName = NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "a_x"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimFloating PrimDouble),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:25:9",
                fieldName = NamePair {
                  nameC = Name "label",
                  nameHsIdent = Identifier
                    "a_label"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypePrim
                  (PrimChar
                    (PrimSignImplicit
                      (Just Signed)))),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:26:8",
                fieldName = NamePair {
                  nameC = Name "samples",
                  nameHsIdent = Identifier
                    "a_samples"},
                fieldComment = Nothing},
              structFieldType = TypeConstArray
                128
                (TypePrim
                  (PrimChar
                    (PrimSignImplicit
                      (Just Signed)))),
              structFieldOffset = 128,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:27:12",
                fieldName = NamePair {
                  nameC = Name "b",
                  nameHsIdent = Identifier "a_b"},
                fieldComment = Nothing},
              structFieldType = TypeStruct
                NamePair {
                  nameC = Name "B",
                  nameHsIdent = Identifier "B"}
                NameOriginInSource,
              structFieldOffset = 1152,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "spec_examples.h:28:13",
                fieldName = NamePair {
                  nameC = Name "c",
                  nameHsIdent = Identifier "a_c"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "C",
                    nameHsIdent = Identifier "C"}
                  NameOriginInSource),
              structFieldOffset = 1152,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:28:10",
        declId = NamePair {
          nameC = Name "C",
          nameHsIdent = Identifier "C"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclOpaque
        (NameKindTagged TagKindStruct),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "spec_examples.h:31:6",
        declId = NamePair {
          nameC = Name "resample",
          nameHsIdent = Identifier
            "resample"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["spec_examples.h"],
            headerInclude =
            "spec_examples.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name
                    "res_m_num_valid_samples",
                  nameHsIdent = Identifier
                    "res_m_num_valid_samples"})
              (TypePointer
                (TypeTypedef
                  (TypedefRegular
                    NamePair {
                      nameC = Name "int32_T",
                      nameHsIdent = Identifier
                        "Int32_T"}
                    (TypePrim
                      (PrimIntegral
                        PrimInt
                        Signed))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "res_m_iq_int",
                  nameHsIdent = Identifier
                    "res_m_iq_int"})
              (TypeConstArray
                30720000
                (TypeTypedef
                  (TypedefSquashed
                    (Name "cint16_T")
                    (TypeStruct
                      NamePair {
                        nameC = Name "cint16_T",
                        nameHsIdent = Identifier
                          "Cint16_T"}
                      (NameOriginGenerated
                        (AnonId
                          "spec_examples.h:14:9")))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "res_m_old_rate",
                  nameHsIdent = Identifier
                    "res_m_old_rate"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "int64_T",
                    nameHsIdent = Identifier
                      "Int64_T"}
                  (TypePrim
                    (PrimIntegral
                      PrimLongLong
                      Signed)))),
            _×_
              (Just
                NamePair {
                  nameC = Name "res_m_new_rate",
                  nameHsIdent = Identifier
                    "res_m_new_rate"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "int64_T",
                    nameHsIdent = Identifier
                      "Int64_T"}
                  (TypePrim
                    (PrimIntegral
                      PrimLongLong
                      Signed)))),
            _×_
              (Just
                NamePair {
                  nameC = Name
                    "res_m_iq_resampled_int",
                  nameHsIdent = Identifier
                    "res_m_iq_resampled_int"})
              (TypeConstArray
                30720000
                (TypeTypedef
                  (TypedefSquashed
                    (Name "cint16_T")
                    (TypeStruct
                      NamePair {
                        nameC = Name "cint16_T",
                        nameHsIdent = Identifier
                          "Cint16_T"}
                      (NameOriginGenerated
                        (AnonId
                          "spec_examples.h:14:9"))))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["spec_examples"]}
