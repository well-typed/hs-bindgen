TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:11:5",
        declId = NamePair {
          nameC = Name "arr0",
          nameHsIdent = Identifier
            "arr0"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, complete, not initialised"]])},
      declKind = DeclGlobal
        (TypeConstArray
          3
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:14:5",
        declId = NamePair {
          nameC = Name "arr1",
          nameHsIdent = Identifier
            "arr1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, complete, initialised"]])},
      declKind = DeclGlobal
        (TypeConstArray
          3
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:17:12",
        declId = NamePair {
          nameC = Name "arr2",
          nameHsIdent = Identifier
            "arr2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, extern, complete, not initialised"]])},
      declKind = DeclGlobal
        (TypeConstArray
          3
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:20:12",
        declId = NamePair {
          nameC = Name "arr3",
          nameHsIdent = Identifier
            "arr3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, extern, complete, initialised"]])},
      declKind = DeclGlobal
        (TypeConstArray
          3
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:29:5",
        declId = NamePair {
          nameC = Name "arr6",
          nameHsIdent = Identifier
            "arr6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, incomplete"]])},
      declKind = DeclGlobal
        (TypeConstArray
          1
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:32:12",
        declId = NamePair {
          nameC = Name "arr7",
          nameHsIdent = Identifier
            "arr7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Global, extern, incomplete"]])},
      declKind = DeclGlobal
        (TypeIncompleteArray
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:41:13",
        declId = NamePair {
          nameC = Name "triplet",
          nameHsIdent = Identifier
            "Triplet"},
        declOrigin = NameOriginInSource,
        declAliases = [Name "sudoku"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Triplet",
            newtypeField = Name
              "@NsVar"
              "un_Triplet"},
          typedefType = TypeConstArray
            3
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:43:13",
        declId = NamePair {
          nameC = Name "list",
          nameHsIdent = Identifier
            "List"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "List",
            newtypeField = Name
              "@NsVar"
              "un_List"},
          typedefType =
          TypeIncompleteArray
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:45:13",
        declId = NamePair {
          nameC = Name "matrix",
          nameHsIdent = Identifier
            "Matrix"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Matrix",
            newtypeField = Name
              "@NsVar"
              "un_Matrix"},
          typedefType = TypeConstArray
            4
            (TypeConstArray
              3
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:47:13",
        declId = NamePair {
          nameC = Name "tripletlist",
          nameHsIdent = Identifier
            "Tripletlist"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Tripletlist",
            newtypeField = Name
              "@NsVar"
              "un_Tripletlist"},
          typedefType =
          TypeIncompleteArray
            (TypeConstArray
              3
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:49:8",
        declId = NamePair {
          nameC = Name "Example",
          nameHsIdent = Identifier
            "Example"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Example"),
          structSizeof = 48,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "array.h:50:9",
                fieldName = NamePair {
                  nameC = Name "triple",
                  nameHsIdent = Identifier
                    "example_triple"},
                fieldComment = Nothing},
              structFieldType = TypeConstArray
                3
                (TypePrim
                  (PrimIntegral PrimInt Signed)),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "array.h:51:9",
                fieldName = NamePair {
                  nameC = Name "sudoku",
                  nameHsIdent = Identifier
                    "example_sudoku"},
                fieldComment = Nothing},
              structFieldType = TypeConstArray
                3
                (TypeConstArray
                  3
                  (TypePrim
                    (PrimIntegral PrimInt Signed))),
              structFieldOffset = 96,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:55:17",
        declId = NamePair {
          nameC = Name "sudoku",
          nameHsIdent = Identifier
            "Sudoku"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Typedef-in-typedef"]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Sudoku",
            newtypeField = Name
              "@NsVar"
              "un_Sudoku"},
          typedefType = TypeConstArray
            3
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "triplet",
                  nameHsIdent = Identifier
                    "Triplet"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:62:12",
        declId = NamePair {
          nameC = Name "arr_1",
          nameHsIdent = Identifier
            "arr_1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size"]])},
      declKind = DeclGlobal
        (TypeConstArray
          3
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:65:16",
        declId = NamePair {
          nameC = Name "arr_2",
          nameHsIdent = Identifier
            "arr_2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size, typedef"]])},
      declKind = DeclGlobal
        (TypeTypedef
          (TypedefRegular
            NamePair {
              nameC = Name "triplet",
              nameHsIdent = Identifier
                "Triplet"})),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:68:12",
        declId = NamePair {
          nameC = Name "arr_3",
          nameHsIdent = Identifier
            "arr_3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size"]])},
      declKind = DeclGlobal
        (TypeIncompleteArray
          (TypePrim
            (PrimIntegral PrimInt Signed))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:71:13",
        declId = NamePair {
          nameC = Name "arr_4",
          nameHsIdent = Identifier
            "arr_4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size, typedef"]])},
      declKind = DeclGlobal
        (TypeTypedef
          (TypedefRegular
            NamePair {
              nameC = Name "list",
              nameHsIdent = Identifier
                "List"})),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:74:12",
        declId = NamePair {
          nameC = Name "arr_5",
          nameHsIdent = Identifier
            "arr_5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size"]])},
      declKind = DeclGlobal
        (TypeConstArray
          4
          (TypeConstArray
            3
            (TypePrim
              (PrimIntegral
                PrimInt
                Signed)))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:77:15",
        declId = NamePair {
          nameC = Name "arr_6",
          nameHsIdent = Identifier
            "arr_6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size, typedef"]])},
      declKind = DeclGlobal
        (TypeTypedef
          (TypedefRegular
            NamePair {
              nameC = Name "matrix",
              nameHsIdent = Identifier
                "Matrix"})),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:80:12",
        declId = NamePair {
          nameC = Name "arr_7",
          nameHsIdent = Identifier
            "arr_7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size"]])},
      declKind = DeclGlobal
        (TypeIncompleteArray
          (TypeConstArray
            3
            (TypePrim
              (PrimIntegral
                PrimInt
                Signed)))),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:83:20",
        declId = NamePair {
          nameC = Name "arr_8",
          nameHsIdent = Identifier
            "arr_8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size, typedef"]])},
      declKind = DeclGlobal
        (TypeTypedef
          (TypedefRegular
            NamePair {
              nameC = Name "tripletlist",
              nameHsIdent = Identifier
                "Tripletlist"})),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:90:5",
        declId = NamePair {
          nameC = Name "fun_1",
          nameHsIdent = Identifier
            "fun_1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimIntegral PrimInt Signed)),
            _×_
              (Just
                NamePair {
                  nameC = Name "xs",
                  nameHsIdent = Identifier "xs"})
              (TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:93:5",
        declId = NamePair {
          nameC = Name "fun_2",
          nameHsIdent = Identifier
            "fun_2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xs",
                  nameHsIdent = Identifier "xs"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "triplet",
                    nameHsIdent = Identifier
                      "Triplet"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:96:5",
        declId = NamePair {
          nameC = Name "fun_3",
          nameHsIdent = Identifier
            "fun_3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xs",
                  nameHsIdent = Identifier "xs"})
              (TypeIncompleteArray
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:99:5",
        declId = NamePair {
          nameC = Name "fun_4",
          nameHsIdent = Identifier
            "fun_4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xs",
                  nameHsIdent = Identifier "xs"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "list",
                    nameHsIdent = Identifier
                      "List"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:102:5",
        declId = NamePair {
          nameC = Name "fun_5",
          nameHsIdent = Identifier
            "fun_5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xss",
                  nameHsIdent = Identifier "xss"})
              (TypeConstArray
                4
                (TypeConstArray
                  3
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:105:5",
        declId = NamePair {
          nameC = Name "fun_6",
          nameHsIdent = Identifier
            "fun_6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xss",
                  nameHsIdent = Identifier "xss"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "matrix",
                    nameHsIdent = Identifier
                      "Matrix"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:108:5",
        declId = NamePair {
          nameC = Name "fun_7",
          nameHsIdent = Identifier
            "fun_7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xss",
                  nameHsIdent = Identifier "xss"})
              (TypeIncompleteArray
                (TypeConstArray
                  3
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:111:5",
        declId = NamePair {
          nameC = Name "fun_8",
          nameHsIdent = Identifier
            "fun_8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xss",
                  nameHsIdent = Identifier "xss"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "tripletlist",
                    nameHsIdent = Identifier
                      "Tripletlist"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:114:5",
        declId = NamePair {
          nameC = Name "isSolved",
          nameHsIdent = Identifier
            "isSolved"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Typedef-in-typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "xss",
                  nameHsIdent = Identifier "xss"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "sudoku",
                    nameHsIdent = Identifier
                      "Sudoku"}))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:126:7",
        declId = NamePair {
          nameC = Name "fun_9",
          nameHsIdent = Identifier
            "fun_9"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeConstArray
              3
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:129:10",
        declId = NamePair {
          nameC = Name "fun_10",
          nameHsIdent = Identifier
            "fun_10"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of known size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "triplet",
                  nameHsIdent = Identifier
                    "Triplet"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:132:7",
        declId = NamePair {
          nameC = Name "fun_11",
          nameHsIdent = Identifier
            "fun_11"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeIncompleteArray
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:135:7",
        declId = NamePair {
          nameC = Name "fun_12",
          nameHsIdent = Identifier
            "fun_12"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Array of unknown size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "list",
                  nameHsIdent = Identifier
                    "List"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:138:7",
        declId = NamePair {
          nameC = Name "fun_13",
          nameHsIdent = Identifier
            "fun_13"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeConstArray
              4
              (TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed))))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:141:9",
        declId = NamePair {
          nameC = Name "fun_14",
          nameHsIdent = Identifier
            "fun_14"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of known size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "matrix",
                  nameHsIdent = Identifier
                    "Matrix"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:144:7",
        declId = NamePair {
          nameC = Name "fun_15",
          nameHsIdent = Identifier
            "fun_15"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeIncompleteArray
              (TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed))))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:147:14",
        declId = NamePair {
          nameC = Name "fun_16",
          nameHsIdent = Identifier
            "fun_16"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Multi-dimensional array of unknown size, typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "tripletlist",
                  nameHsIdent = Identifier
                    "Tripletlist"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "array.h:150:10",
        declId = NamePair {
          nameC = Name "solve",
          nameHsIdent = Identifier
            "solve"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["array.h"],
            headerInclude = "array.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Typedef-in-typedef"]])},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "sudoku",
                  nameHsIdent = Identifier
                    "Sudoku"}))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["array"]}
