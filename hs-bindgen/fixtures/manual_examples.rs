/* automatically generated by rust-bindgen 0.70.1 */

pub const FIELD_OFFSET: u32 = 4;
pub const EPSILON: f64 = 0.1;
/** Simple struct with typedef of the same name

 Since the typedef has the same name as the struct tag, we don't
 generate a separate newtype for this.*/
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct triple {
    pub a: ::std::os::raw::c_int,
    pub b: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of triple"][::std::mem::size_of::<triple>() - 12usize];
    ["Alignment of triple"][::std::mem::align_of::<triple>() - 4usize];
    ["Offset of field: triple::a"][::std::mem::offset_of!(triple, a) - 0usize];
    ["Offset of field: triple::b"][::std::mem::offset_of!(triple, b) - 4usize];
    ["Offset of field: triple::c"][::std::mem::offset_of!(triple, c) - 8usize];
};
extern "C" {
    pub fn mk_triple(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        c: ::std::os::raw::c_int,
        triple: *mut triple,
    );
}
pub const index_A: index = 0;
pub const index_B: index = 1;
pub const index_C: index = 2;
/// Simple enumeration example
pub type index = ::std::os::raw::c_uint;
extern "C" {
    pub fn index_triple(triple: *mut triple, ix: index) -> ::std::os::raw::c_int;
}
/// Typedefs
pub type sum = ::std::os::raw::c_int;
pub type average = f64;
extern "C" {
    pub fn sum_triple(triple: *mut triple) -> sum;
}
extern "C" {
    pub fn average_triple(triple: *mut triple) -> average;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct date {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of date"][::std::mem::size_of::<date>() - 12usize];
    ["Alignment of date"][::std::mem::align_of::<date>() - 4usize];
    ["Offset of field: date::year"][::std::mem::offset_of!(date, year) - 0usize];
    ["Offset of field: date::month"][::std::mem::offset_of!(date, month) - 4usize];
    ["Offset of field: date::day"][::std::mem::offset_of!(date, day) - 8usize];
};
extern "C" {
    pub fn getYear(d: *mut date) -> ::std::os::raw::c_int;
}
/// Unions
#[repr(C)]
#[derive(Copy, Clone)]
pub union occupation {
    pub student: occupation_student,
    pub employee: occupation_employee,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct occupation_student {
    pub university: *mut ::std::os::raw::c_char,
    pub year: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of occupation_student",
    ][::std::mem::size_of::<occupation_student>() - 16usize];
    [
        "Alignment of occupation_student",
    ][::std::mem::align_of::<occupation_student>() - 8usize];
    [
        "Offset of field: occupation_student::university",
    ][::std::mem::offset_of!(occupation_student, university) - 0usize];
    [
        "Offset of field: occupation_student::year",
    ][::std::mem::offset_of!(occupation_student, year) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct occupation_employee {
    pub company: *mut ::std::os::raw::c_char,
    pub supervisor: *mut person,
    pub salary: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of occupation_employee",
    ][::std::mem::size_of::<occupation_employee>() - 24usize];
    [
        "Alignment of occupation_employee",
    ][::std::mem::align_of::<occupation_employee>() - 8usize];
    [
        "Offset of field: occupation_employee::company",
    ][::std::mem::offset_of!(occupation_employee, company) - 0usize];
    [
        "Offset of field: occupation_employee::supervisor",
    ][::std::mem::offset_of!(occupation_employee, supervisor) - 8usize];
    [
        "Offset of field: occupation_employee::salary",
    ][::std::mem::offset_of!(occupation_employee, salary) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of occupation"][::std::mem::size_of::<occupation>() - 24usize];
    ["Alignment of occupation"][::std::mem::align_of::<occupation>() - 8usize];
    [
        "Offset of field: occupation::student",
    ][::std::mem::offset_of!(occupation, student) - 0usize];
    [
        "Offset of field: occupation::employee",
    ][::std::mem::offset_of!(occupation, employee) - 0usize];
};
extern "C" {
    pub fn print_occupation(tag: ::std::os::raw::c_int, o: *mut occupation);
}
/// Anonymous types
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rect {
    pub lower_left: rect__bindgen_ty_1,
    pub upper_right: rect__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rect__bindgen_ty_1 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rect__bindgen_ty_1"][::std::mem::size_of::<rect__bindgen_ty_1>() - 8usize];
    [
        "Alignment of rect__bindgen_ty_1",
    ][::std::mem::align_of::<rect__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: rect__bindgen_ty_1::x",
    ][::std::mem::offset_of!(rect__bindgen_ty_1, x) - 0usize];
    [
        "Offset of field: rect__bindgen_ty_1::y",
    ][::std::mem::offset_of!(rect__bindgen_ty_1, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rect__bindgen_ty_2 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rect__bindgen_ty_2"][::std::mem::size_of::<rect__bindgen_ty_2>() - 8usize];
    [
        "Alignment of rect__bindgen_ty_2",
    ][::std::mem::align_of::<rect__bindgen_ty_2>() - 4usize];
    [
        "Offset of field: rect__bindgen_ty_2::x",
    ][::std::mem::offset_of!(rect__bindgen_ty_2, x) - 0usize];
    [
        "Offset of field: rect__bindgen_ty_2::y",
    ][::std::mem::offset_of!(rect__bindgen_ty_2, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rect"][::std::mem::size_of::<rect>() - 16usize];
    ["Alignment of rect"][::std::mem::align_of::<rect>() - 4usize];
    [
        "Offset of field: rect::lower_left",
    ][::std::mem::offset_of!(rect, lower_left) - 0usize];
    [
        "Offset of field: rect::upper_right",
    ][::std::mem::offset_of!(rect, upper_right) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_1"][::std::mem::size_of::<_bindgen_ty_1>() - 8usize];
    ["Alignment of _bindgen_ty_1"][::std::mem::align_of::<_bindgen_ty_1>() - 4usize];
    [
        "Offset of field: _bindgen_ty_1::width",
    ][::std::mem::offset_of!(_bindgen_ty_1, width) - 0usize];
    [
        "Offset of field: _bindgen_ty_1::height",
    ][::std::mem::offset_of!(_bindgen_ty_1, height) - 4usize];
};
pub type config = *mut _bindgen_ty_1;
/// Awkward names
pub type adiós = ::std::os::raw::c_int;
extern "C" {
    pub fn 拜拜();
}
pub type 数字 = ::std::os::raw::c_int;
extern "C" {
    pub fn ϒ();
}
pub type data = ::std::os::raw::c_int;
extern "C" {
    pub fn import();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct person {
    pub _address: u8,
}
