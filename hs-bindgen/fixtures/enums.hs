List {getList = [DeclNewtype (Newtype {newtypeName = "CFirst", newtypeConstr = "MkCFirst", newtypeField = "unCFirst", newtypeType = HsType "EnumTypeTODO"}), DeclInstance (InstanceStorable (WithStruct (Struct {structName = "CFirst", structConstr = "MkCFirst", structFields = ("unCFirst",HsType "EnumTypeTODO") ::: VNil}) (StorableInstance {storableSizeOf = 4, storableAlignment = 4, storablePeek = Lambda (\x0 -> Ap (IntroStruct (Struct {structName = "CFirst", structConstr = "MkCFirst", structFields = ("unCFirst",HsType "EnumTypeTODO") ::: VNil})) [PeekByteOff x0 0]), storablePoke = Lambda (\x0 -> ElimStruct (Struct {structName = "CFirst", structConstr = "MkCFirst", structFields = ("unCFirst",HsType "EnumTypeTODO") ::: VNil}) (\(x1 ::: VNil) -> (Seq (List {getList = [PokeByteOff x0 0 x1]}))))}))), DeclNewtype (Newtype {newtypeName = "CSecond", newtypeConstr = "MkCSecond", newtypeField = "unCSecond", newtypeType = HsType "EnumTypeTODO"}), DeclInstance (InstanceStorable (WithStruct (Struct {structName = "CSecond", structConstr = "MkCSecond", structFields = ("unCSecond",HsType "EnumTypeTODO") ::: VNil}) (StorableInstance {storableSizeOf = 4, storableAlignment = 4, storablePeek = Lambda (\x0 -> Ap (IntroStruct (Struct {structName = "CSecond", structConstr = "MkCSecond", structFields = ("unCSecond",HsType "EnumTypeTODO") ::: VNil})) [PeekByteOff x0 0]), storablePoke = Lambda (\x0 -> ElimStruct (Struct {structName = "CSecond", structConstr = "MkCSecond", structFields = ("unCSecond",HsType "EnumTypeTODO") ::: VNil}) (\(x1 ::: VNil) -> (Seq (List {getList = [PokeByteOff x0 0 x1]}))))}))), DeclNewtype (Newtype {newtypeName = "CSame", newtypeConstr = "MkCSame", newtypeField = "unCSame", newtypeType = HsType "EnumTypeTODO"}), DeclInstance (InstanceStorable (WithStruct (Struct {structName = "CSame", structConstr = "MkCSame", structFields = ("unCSame",HsType "EnumTypeTODO") ::: VNil}) (StorableInstance {storableSizeOf = 4, storableAlignment = 4, storablePeek = Lambda (\x0 -> Ap (IntroStruct (Struct {structName = "CSame", structConstr = "MkCSame", structFields = ("unCSame",HsType "EnumTypeTODO") ::: VNil})) [PeekByteOff x0 0]), storablePoke = Lambda (\x0 -> ElimStruct (Struct {structName = "CSame", structConstr = "MkCSame", structFields = ("unCSame",HsType "EnumTypeTODO") ::: VNil}) (\(x1 ::: VNil) -> (Seq (List {getList = [PokeByteOff x0 0 x1]}))))}))), DeclNewtype (Newtype {newtypeName = "CPackad", newtypeConstr = "MkCPackad", newtypeField = "unCPackad", newtypeType = HsType "EnumTypeTODO"}), DeclInstance (InstanceStorable (WithStruct (Struct {structName = "CPackad", structConstr = "MkCPackad", structFields = ("unCPackad",HsType "EnumTypeTODO") ::: VNil}) (StorableInstance {storableSizeOf = 1, storableAlignment = 1, storablePeek = Lambda (\x0 -> Ap (IntroStruct (Struct {structName = "CPackad", structConstr = "MkCPackad", structFields = ("unCPackad",HsType "EnumTypeTODO") ::: VNil})) [PeekByteOff x0 0]), storablePoke = Lambda (\x0 -> ElimStruct (Struct {structName = "CPackad", structConstr = "MkCPackad", structFields = ("unCPackad",HsType "EnumTypeTODO") ::: VNil}) (\(x1 ::: VNil) -> (Seq (List {getList = [PokeByteOff x0 0 x1]}))))})))]}
