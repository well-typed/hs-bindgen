WrapCHeader
  (Header
    [
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 1,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "INCR",
            macroArgs = [CName "x"],
            macroBody = MApp
              MAdd
              [
                MTerm (MVar (CName "x") []),
                MTerm
                  (MInt
                    IntegerLiteral {
                      integerLiteralText = "1",
                      integerLiteralType = Just
                        (PrimInt Signed),
                      integerLiteralValue = 1})]},
          macroDeclMacroTy =
          "(IntLike (PrimInt Signed) -> IntLike (PrimInt Signed))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 2,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "ADD",
            macroArgs = [
              CName "x",
              CName "y"],
            macroBody = MApp
              MAdd
              [
                MTerm (MVar (CName "x") []),
                MTerm (MVar (CName "y") [])]},
          macroDeclMacroTy =
          "(forall a. Num a => (a -> a -> a))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 4,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "ID",
            macroArgs = [CName "X"],
            macroBody = MTerm
              (MVar (CName "X") [])},
          macroDeclMacroTy =
          "(forall a. (a -> a))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 5,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "CONST",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MTerm
              (MVar (CName "X") [])},
          macroDeclMacroTy =
          "(forall a b. (a -> b -> a))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 7,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "CMP",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MApp
              MRelLT
              [
                MTerm (MVar (CName "X") []),
                MTerm (MVar (CName "Y") [])]},
          macroDeclMacroTy =
          "(forall a. Ord a => (a -> a -> Bool))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 8,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "FUN1",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MApp
              MAdd
              [
                MTerm (MVar (CName "X") []),
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "12ull",
                          integerLiteralType = Just
                            (PrimLongLong Unsigned),
                          integerLiteralValue = 12}),
                    MTerm (MVar (CName "Y") [])]]},
          macroDeclMacroTy =
          "(IntLike (PrimLongLong Unsigned) -> IntLike (PrimLongLong Unsigned) -> IntLike (PrimLongLong Unsigned))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 9,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "FUN2",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MApp
              MShiftLeft
              [
                MTerm (MVar (CName "X") []),
                MApp
                  MMult
                  [
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "3ull",
                          integerLiteralType = Just
                            (PrimLongLong Unsigned),
                          integerLiteralValue = 3}),
                    MTerm (MVar (CName "Y") [])]]},
          macroDeclMacroTy =
          "(forall a. (IntLike a -> IntLike (PrimLongLong Unsigned) -> IntLike a))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 11,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "G",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MTerm
              (MVar
                (CName "CONST")
                [
                  MTerm
                    (MVar
                      (CName "INCR")
                      [MTerm (MVar (CName "Y") [])]),
                  MTerm
                    (MVar
                      (CName "ID")
                      [
                        MTerm
                          (MVar (CName "X") [])])])},
          macroDeclMacroTy =
          "(forall a. (a -> IntLike (PrimInt Signed) -> IntLike (PrimInt Signed)))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 13,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "DIV1",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MApp
              MDiv
              [
                MTerm (MVar (CName "X") []),
                MApp
                  MAdd
                  [
                    MTerm (MVar (CName "Y") []),
                    MTerm
                      (MInt
                        IntegerLiteral {
                          integerLiteralText = "12u",
                          integerLiteralType = Just
                            (PrimInt Unsigned),
                          integerLiteralValue = 12})]]},
          macroDeclMacroTy =
          "(IntLike (PrimInt Unsigned) -> IntLike (PrimInt Unsigned) -> IntLike (PrimInt Unsigned))"},
      DeclMacro
        MacroDecl {
          macroDeclMacro = Macro {
            macroLoc = MultiLoc {
              multiLocExpansion = SingleLoc {
                singleLocPath = [
                  "examples",
                  "macro_functions.h"],
                singleLocLine = 14,
                singleLocColumn = 9},
              multiLocPresumed = Nothing,
              multiLocSpelling = Nothing,
              multiLocFile = Nothing},
            macroName = CName "DIV2",
            macroArgs = [
              CName "X",
              CName "Y"],
            macroBody = MApp
              MDiv
              [
                MApp
                  MMult
                  [
                    MTerm
                      (MFloat
                        FloatingLiteral {
                          floatingLiteralText = "10.0f",
                          floatingLiteralType = Just
                            PrimFloat,
                          floatingLiteralFloatValue =
                          10.0,
                          floatingLiteralDoubleValue =
                          10.0}),
                    MTerm (MVar (CName "X") [])],
                MTerm (MVar (CName "Y") [])]},
          macroDeclMacroTy =
          "(FloatLike PrimFloat -> FloatLike PrimFloat -> FloatLike PrimFloat)"}])
