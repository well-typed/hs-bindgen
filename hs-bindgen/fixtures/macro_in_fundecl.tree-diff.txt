TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:5:9",
        declId = NamePair {
          nameC = Name "I",
          nameHsIdent = Identifier "I"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "I",
              newtypeField = Name
                "@NsVar"
                "un_I"},
            macroType = TypePrim
              (PrimIntegral PrimInt Signed)}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:6:9",
        declId = NamePair {
          nameC = Name "C",
          nameHsIdent = Identifier "C"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "C",
              newtypeField = Name
                "@NsVar"
                "un_C"},
            macroType = TypePrim
              (PrimChar
                (PrimSignImplicit Nothing))}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:7:9",
        declId = NamePair {
          nameC = Name "F",
          nameHsIdent = Identifier "F"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "F",
              newtypeField = Name
                "@NsVar"
                "un_F"},
            macroType = TypePrim
              (PrimFloating PrimFloat)}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:8:9",
        declId = NamePair {
          nameC = Name "L",
          nameHsIdent = Identifier "L"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "L",
              newtypeField = Name
                "@NsVar"
                "un_L"},
            macroType = TypePrim
              (PrimIntegral
                PrimLong
                Signed)}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:9:9",
        declId = NamePair {
          nameC = Name "S",
          nameHsIdent = Identifier "S"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclMacro
        (MacroType
          CheckedMacroType {
            macroTypeNames = NewtypeNames {
              newtypeConstr = Name
                "@NsConstr"
                "S",
              newtypeField = Name
                "@NsVar"
                "un_S"},
            macroType = TypePrim
              (PrimIntegral
                PrimShort
                Signed)}),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:12:6",
        declId = NamePair {
          nameC = Name "quux",
          nameHsIdent = Identifier
            "quux"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "F",
                  nameHsIdent = Identifier "F"}
                NameOriginInSource),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypePrim
                (PrimChar
                  (PrimSignImplicit Nothing)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimChar
              (PrimSignImplicit Nothing))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:13:4",
        declId = NamePair {
          nameC = Name "wam",
          nameHsIdent = Identifier "wam"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "y",
                  nameHsIdent = Identifier "y"})
              (TypePointer
                (TypeMacroTypedef
                  NamePair {
                    nameC = Name "C",
                    nameHsIdent = Identifier "C"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeMacroTypedef
              NamePair {
                nameC = Name "C",
                nameHsIdent = Identifier "C"}
              NameOriginInSource)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:16:7",
        declId = NamePair {
          nameC = Name "foo1",
          nameHsIdent = Identifier
            "foo1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "g",
                  nameHsIdent = Identifier "g"})
              (TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypePrim
              (PrimChar
                (PrimSignImplicit
                  (Just Signed))))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:17:7",
        declId = NamePair {
          nameC = Name "foo2",
          nameHsIdent = Identifier
            "foo2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "F",
                  nameHsIdent = Identifier "F"}
                NameOriginInSource),
            _×_
              (Just
                NamePair {
                  nameC = Name "g",
                  nameHsIdent = Identifier "g"})
              (TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypePrim
              (PrimChar
                (PrimSignImplicit Nothing)))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:18:4",
        declId = NamePair {
          nameC = Name "foo3",
          nameHsIdent = Identifier
            "foo3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimFloating PrimFloat)),
            _×_
              (Just
                NamePair {
                  nameC = Name "g",
                  nameHsIdent = Identifier "g"})
              (TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeMacroTypedef
              NamePair {
                nameC = Name "C",
                nameHsIdent = Identifier "C"}
              NameOriginInSource)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:21:7",
        declId = NamePair {
          nameC = Name "bar1",
          nameHsIdent = Identifier
            "bar1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimIntegral
                  PrimLong
                  Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeFun
              [
                TypePrim
                  (PrimIntegral PrimShort Signed)]
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:22:7",
        declId = NamePair {
          nameC = Name "bar2",
          nameHsIdent = Identifier
            "bar2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "L",
                  nameHsIdent = Identifier "L"}
                NameOriginInSource)],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeFun
              [
                TypePrim
                  (PrimIntegral PrimShort Signed)]
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:23:7",
        declId = NamePair {
          nameC = Name "bar3",
          nameHsIdent = Identifier
            "bar3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimIntegral
                  PrimLong
                  Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeFun
              [
                TypeMacroTypedef
                  NamePair {
                    nameC = Name "S",
                    nameHsIdent = Identifier "S"}
                  NameOriginInSource]
              (TypePrim
                (PrimIntegral
                  PrimInt
                  Signed)))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:24:5",
        declId = NamePair {
          nameC = Name "bar4",
          nameHsIdent = Identifier
            "bar4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "x",
                  nameHsIdent = Identifier "x"})
              (TypePrim
                (PrimIntegral
                  PrimLong
                  Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeFun
              [
                TypePrim
                  (PrimIntegral PrimShort Signed)]
              (TypeMacroTypedef
                NamePair {
                  nameC = Name "I",
                  nameHsIdent = Identifier "I"}
                NameOriginInSource))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:27:7",
        declId = NamePair {
          nameC = Name "baz1",
          nameHsIdent = Identifier
            "baz1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier "i"})
              (TypeConst
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeConstArray
              2
              (TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed))))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:35:7",
        declId = NamePair {
          nameC = Name "baz2",
          nameHsIdent = Identifier
            "baz2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier "i"})
              (TypeConst
                (TypeMacroTypedef
                  NamePair {
                    nameC = Name "I",
                    nameHsIdent = Identifier "I"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeConstArray
              2
              (TypeConstArray
                3
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed))))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:43:5",
        declId = NamePair {
          nameC = Name "baz3",
          nameHsIdent = Identifier
            "baz3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier "i"})
              (TypeConst
                (TypePrim
                  (PrimIntegral
                    PrimInt
                    Signed)))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeConstArray
              2
              (TypeConstArray
                3
                (TypeMacroTypedef
                  NamePair {
                    nameC = Name "I",
                    nameHsIdent = Identifier "I"}
                  NameOriginInSource)))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "macro_in_fundecl.h:53:3",
        declId = NamePair {
          nameC = Name "no_args_no_void",
          nameHsIdent = Identifier
            "no_args_no_void"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["macro_in_fundecl.h"],
            headerInclude =
            "macro_in_fundecl.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeMacroTypedef
            NamePair {
              nameC = Name "I",
              nameHsIdent = Identifier "I"}
            NameOriginInSource},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["macro_in_fundecl"]}
