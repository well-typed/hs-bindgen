/* automatically generated by rust-bindgen 0.71.1 */

unsafe extern "C" {
    pub fn square(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn plus(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn apply1(
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
        x: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn apply2(
        f: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type int2int = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    ///! Basically the same as apply1(), but here for illustratory purposes.
    pub fn apply1_pointer_arg(
        arg1: int2int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    /**! A version of apply1_pointer_arg() that declares to take a argument of
! function type, rather than a pointer-to-function type.*/
    pub fn apply1_nopointer_arg(
        arg1: int2int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    ///! A function returning a pointer to a function like apply1_nopointer().
    pub fn apply1_nopointer_res() -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: int2int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
unsafe extern "C" {
    ///! A global variable pointing to a function like apply1_nopointer().
    pub static apply1_nopointer_var: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: int2int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
///! A struct field pointing to a function like apply1_nopointer().
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Apply1Struct {
    pub apply1_nopointer_struct_field: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: int2int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Apply1Struct"][::std::mem::size_of::<Apply1Struct>() - 8usize];
    ["Alignment of Apply1Struct"][::std::mem::align_of::<Apply1Struct>() - 8usize];
    [
        "Offset of field: Apply1Struct::apply1_nopointer_struct_field",
    ][::std::mem::offset_of!(Apply1Struct, apply1_nopointer_struct_field) - 0usize];
};
unsafe extern "C" {
    pub static apply1_struct: Apply1Struct;
}
///! A union field pointing to a function like apply1_nopointer().
#[repr(C)]
#[derive(Copy, Clone)]
pub union Apply1Union {
    pub apply1_nopointer_union_field: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: int2int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Apply1Union"][::std::mem::size_of::<Apply1Union>() - 8usize];
    ["Alignment of Apply1Union"][::std::mem::align_of::<Apply1Union>() - 8usize];
    [
        "Offset of field: Apply1Union::apply1_nopointer_union_field",
    ][::std::mem::offset_of!(Apply1Union, apply1_nopointer_union_field) - 0usize];
};
unsafe extern "C" {
    pub static apply1_union: Apply1Union;
}
