-- addDependentFile musl-include/x86_64/stdbool.h
-- addDependentFile examples/golden/bool.h
{-| __C declaration:__ @bools1@

    __defined at:__ @bool.h:1:8@

    __exported by:__ @bool.h@
-}
data Bools1
    = Bools1 {bools1_x :: CBool
              {- ^ __C declaration:__ @x@

                   __defined at:__ @bool.h:2:11@

                   __exported by:__ @bool.h@
              -},
              bools1_y :: CBool
              {- ^ __C declaration:__ @y@

                   __defined at:__ @bool.h:3:11@

                   __exported by:__ @bool.h@
              -}}
      {- ^ __C declaration:__ @bools1@

           __defined at:__ @bool.h:1:8@

           __exported by:__ @bool.h@
      -}
    deriving stock (Eq, Show)
instance Storable Bools1
    where sizeOf = \_ -> 2 :: Int
          alignment = \_ -> 1 :: Int
          peek = \ptr_0 -> (pure Bools1 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (1 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Bools1 bools1_x_3
                                          bools1_y_4 -> pokeByteOff ptr_1 (0 :: Int) bools1_x_3 >> pokeByteOff ptr_1 (1 :: Int) bools1_y_4
{-| __C declaration:__ @bools2@

    __defined at:__ @bool.h:8:8@

    __exported by:__ @bool.h@
-}
data Bools2
    = Bools2 {bools2_x :: CBool
              {- ^ __C declaration:__ @x@

                   __defined at:__ @bool.h:9:10@

                   __exported by:__ @bool.h@
              -},
              bools2_y :: CBool
              {- ^ __C declaration:__ @y@

                   __defined at:__ @bool.h:10:10@

                   __exported by:__ @bool.h@
              -}}
      {- ^ __C declaration:__ @bools2@

           __defined at:__ @bool.h:8:8@

           __exported by:__ @bool.h@
      -}
    deriving stock (Eq, Show)
instance Storable Bools2
    where sizeOf = \_ -> 2 :: Int
          alignment = \_ -> 1 :: Int
          peek = \ptr_0 -> (pure Bools2 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (1 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Bools2 bools2_x_3
                                          bools2_y_4 -> pokeByteOff ptr_1 (0 :: Int) bools2_x_3 >> pokeByteOff ptr_1 (1 :: Int) bools2_y_4
{-| __C declaration:__ @BOOL@

    __defined at:__ @bool.h:13:9@

    __exported by:__ @bool.h@
-}
newtype BOOL
    = BOOL {un_BOOL :: CBool}
      {- ^ __C declaration:__ @BOOL@

           __defined at:__ @bool.h:13:9@

           __exported by:__ @bool.h@
      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
{-| __C declaration:__ @bools3@

    __defined at:__ @bool.h:15:8@

    __exported by:__ @bool.h@
-}
data Bools3
    = Bools3 {bools3_x :: BOOL
              {- ^ __C declaration:__ @x@

                   __defined at:__ @bool.h:16:10@

                   __exported by:__ @bool.h@
              -},
              bools3_y :: BOOL
              {- ^ __C declaration:__ @y@

                   __defined at:__ @bool.h:17:10@

                   __exported by:__ @bool.h@
              -}}
      {- ^ __C declaration:__ @bools3@

           __defined at:__ @bool.h:15:8@

           __exported by:__ @bool.h@
      -}
    deriving stock (Eq, Show)
instance Storable Bools3
    where sizeOf = \_ -> 2 :: Int
          alignment = \_ -> 1 :: Int
          peek = \ptr_0 -> (pure Bools3 <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (1 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Bools3 bools3_x_3
                                          bools3_y_4 -> pokeByteOff ptr_1 (0 :: Int) bools3_x_3 >> pokeByteOff ptr_1 (1 :: Int) bools3_y_4
