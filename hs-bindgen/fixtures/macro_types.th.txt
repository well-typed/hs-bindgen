-- addDependentFile examples/golden/macro_types.h
newtype PtrInt
    = PtrInt {un_PtrInt :: (Ptr CInt)}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
newtype PtrPtrChar
    = PtrPtrChar {un_PtrPtrChar :: (Ptr (Ptr CChar))}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
newtype Arr1
    = Arr1 {un_Arr1 :: (ConstantArray 2 CInt)}
    deriving stock (Eq, Show)
    deriving newtype Storable
newtype Arr2
    = Arr2 {un_Arr2 :: (ConstantArray 3 (Ptr CFloat))}
    deriving stock (Eq, Show)
    deriving newtype Storable
newtype Arr3
    = Arr3 {un_Arr3 :: (ConstantArray 4
                                      (FunPtr (CDouble -> IO CFloat)))}
    deriving stock (Eq, Show)
    deriving newtype Storable
newtype Fun1 = Fun1 {un_Fun1 :: (CInt -> IO (Ptr CFloat))}
newtype Fun2
    = Fun2 {un_Fun2 :: (FunPtr (CFloat -> Ptr CDouble -> IO CInt))}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
newtype Fun3
    = Fun3 {un_Fun3 :: (FunPtr (Ptr CFloat -> IO (Ptr CInt)))}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
newtype Fun4
    = Fun4 {un_Fun4 :: (CInt ->
                        Ptr CLong ->
                        IO (FunPtr (CFloat -> Ptr CDouble -> IO (Ptr CLong))))}
newtype Fun5
    = Fun5 {un_Fun5 :: (ConstantArray 8 CChar ->
                        IO (Ptr (ConstantArray 2 (Ptr CShort))))}
newtype MTy
    = MTy {un_MTy :: CFloat}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Enum,
                      Floating,
                      Fractional,
                      Num,
                      Real,
                      RealFloat,
                      RealFrac)
newtype Tty
    = Tty {un_Tty :: MTy}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Enum,
                      Floating,
                      Fractional,
                      Num,
                      Real,
                      RealFloat,
                      RealFrac)
newtype UINT8_T
    = UINT8_T {un_UINT8_T :: CUChar}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype BOOLEAN_T
    = BOOLEAN_T {un_BOOLEAN_T :: UINT8_T}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
newtype Boolean_T
    = Boolean_T {un_Boolean_T :: BOOLEAN_T}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
