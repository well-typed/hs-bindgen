/* automatically generated by rust-bindgen 0.71.1 */

unsafe extern "C" {
    pub fn readFileWithProcessor(
        processLine: ::std::option::Option<
            unsafe extern "C" fn(lineNumber: ::std::os::raw::c_int),
        >,
        fileId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn watchTemperature(
        onTempChange: ::std::option::Option<
            unsafe extern "C" fn(degrees: ::std::os::raw::c_int),
        >,
        sensorId: ::std::os::raw::c_int,
    );
}
pub type FileOpenedNotification = ::std::option::Option<unsafe extern "C" fn()>;
pub type ProgressUpdate = ::std::option::Option<
    unsafe extern "C" fn(percentComplete: ::std::os::raw::c_int),
>;
pub type DataValidator = ::std::option::Option<
    unsafe extern "C" fn(value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn onFileOpened(notify: FileOpenedNotification);
}
unsafe extern "C" {
    pub fn onProgressChanged(update: ProgressUpdate);
}
unsafe extern "C" {
    pub fn validateInput(
        validator: DataValidator,
        rawValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Measurement {
    pub value: f64,
    pub timestamp: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Measurement"][::std::mem::size_of::<Measurement>() - 16usize];
    ["Alignment of Measurement"][::std::mem::align_of::<Measurement>() - 8usize];
    [
        "Offset of field: Measurement::value",
    ][::std::mem::offset_of!(Measurement, value) - 0usize];
    [
        "Offset of field: Measurement::timestamp",
    ][::std::mem::offset_of!(Measurement, timestamp) - 8usize];
};
pub type MeasurementReceived = ::std::option::Option<
    unsafe extern "C" fn(data: *mut Measurement),
>;
unsafe extern "C" {
    pub fn onNewMeasurement(handler: MeasurementReceived);
}
pub type MeasurementReceived2 = ::std::option::Option<
    unsafe extern "C" fn(data: Measurement),
>;
unsafe extern "C" {
    pub fn onNewMeasurement2(handler: MeasurementReceived2);
}
pub type SampleBufferFull = ::std::option::Option<
    unsafe extern "C" fn(samples: *mut ::std::os::raw::c_int),
>;
unsafe extern "C" {
    pub fn onBufferReady(handler: SampleBufferFull);
}
