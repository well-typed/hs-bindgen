newtype EnumA = EnumA {un_EnumA :: CUInt}
instance Storable EnumA
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure EnumA <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {EnumA un_EnumA_3 -> pokeByteOff ptr_1 (0 :: Int) un_EnumA_3}}
deriving stock instance Eq EnumA
deriving stock instance Ord EnumA
deriving stock instance Read EnumA
instance CEnum EnumA
    where {type CEnumZ EnumA = CUInt;
           wrap = EnumA;
           unwrap = un_EnumA;
           declaredValueMap = \_ -> fromList [(0, pure "VALA_1"),
                                              (1, pure "VALA_2")];
           sequentialValueBounds = \_ -> Just (0, 1)}
instance Show EnumA
    where {show = showCEnum "EnumA"}
pattern VALA_1 :: EnumA
pattern VALA_1 = EnumA 0
pattern VALA_2 :: EnumA
pattern VALA_2 = EnumA 1
data ExA = ExA {exA_fieldA1 :: EnumA}
instance Storable ExA
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExA <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExA exA_fieldA1_3 -> pokeByteOff ptr_1 (0 :: Int) exA_fieldA1_3}}
deriving stock instance Show ExA
deriving stock instance Eq ExA
newtype ExB_fieldB1 = ExB_fieldB1 {un_ExB_fieldB1 :: CUInt}
instance Storable ExB_fieldB1
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExB_fieldB1 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExB_fieldB1 un_ExB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) un_ExB_fieldB1_3}}
deriving stock instance Eq ExB_fieldB1
deriving stock instance Ord ExB_fieldB1
deriving stock instance Read ExB_fieldB1
instance CEnum ExB_fieldB1
    where {type CEnumZ ExB_fieldB1 = CUInt;
           wrap = ExB_fieldB1;
           unwrap = un_ExB_fieldB1;
           declaredValueMap = \_ -> fromList [(0, pure "VALB_1"),
                                              (1, pure "VALB_2")];
           sequentialValueBounds = \_ -> Just (0, 1)}
instance Show ExB_fieldB1
    where {show = showCEnum "ExB_fieldB1"}
pattern VALB_1 :: ExB_fieldB1
pattern VALB_1 = ExB_fieldB1 0
pattern VALB_2 :: ExB_fieldB1
pattern VALB_2 = ExB_fieldB1 1
data ExB = ExB {exB_fieldB1 :: ExB_fieldB1}
instance Storable ExB
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExB <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExB exB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) exB_fieldB1_3}}
deriving stock instance Show ExB
deriving stock instance Eq ExB
