newtype EnumA = EnumA {un_EnumA :: CUInt}
instance Storable EnumA
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure EnumA <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {EnumA un_EnumA_3 -> pokeByteOff ptr_1 (0 :: Int) un_EnumA_3}}
deriving stock instance Show EnumA
deriving stock instance Read EnumA
deriving stock instance Eq EnumA
deriving stock instance Ord EnumA
instance SequentialCEnum EnumA
    where {type SequentialCEnumZ EnumA = CUInt;
           toSequentialCEnum = EnumA;
           fromSequentialCEnum = un_EnumA;
           sequentialCEnumMin = \_ -> 0;
           sequentialCEnumMax = \_ -> 1}
deriving via (SeqCEnum EnumA) instance Bounded EnumA
deriving via (SeqCEnum EnumA) instance Enum EnumA
pattern VALA_1 :: EnumA
pattern VALA_1 = EnumA 0
pattern VALA_2 :: EnumA
pattern VALA_2 = EnumA 1
data ExA = ExA {exA_fieldA1 :: EnumA}
instance Storable ExA
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExA <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExA exA_fieldA1_3 -> pokeByteOff ptr_1 (0 :: Int) exA_fieldA1_3}}
deriving stock instance Show ExA
deriving stock instance Eq ExA
newtype ExB_fieldB1 = ExB_fieldB1 {un_ExB_fieldB1 :: CUInt}
instance Storable ExB_fieldB1
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExB_fieldB1 <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExB_fieldB1 un_ExB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) un_ExB_fieldB1_3}}
deriving stock instance Show ExB_fieldB1
deriving stock instance Read ExB_fieldB1
deriving stock instance Eq ExB_fieldB1
deriving stock instance Ord ExB_fieldB1
instance SequentialCEnum ExB_fieldB1
    where {type SequentialCEnumZ ExB_fieldB1 = CUInt;
           toSequentialCEnum = ExB_fieldB1;
           fromSequentialCEnum = un_ExB_fieldB1;
           sequentialCEnumMin = \_ -> 0;
           sequentialCEnumMax = \_ -> 1}
deriving via (SeqCEnum ExB_fieldB1) instance Bounded ExB_fieldB1
deriving via (SeqCEnum ExB_fieldB1) instance Enum ExB_fieldB1
pattern VALB_1 :: ExB_fieldB1
pattern VALB_1 = ExB_fieldB1 0
pattern VALB_2 :: ExB_fieldB1
pattern VALB_2 = ExB_fieldB1 1
data ExB = ExB {exB_fieldB1 :: ExB_fieldB1}
instance Storable ExB
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExB <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExB exB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) exB_fieldB1_3}}
deriving stock instance Show ExB
deriving stock instance Eq ExB
