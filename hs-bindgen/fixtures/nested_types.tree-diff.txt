TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_types.h:1:8",
        declId = NamePair {
          nameC = Name "foo",
          nameHsIdent = Identifier "Foo"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Foo"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "nested_types.h:2:9",
                fieldName = NamePair {
                  nameC = Name "i",
                  nameHsIdent = Identifier
                    "foo_i"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:3:10",
                fieldName = NamePair {
                  nameC = Name "c",
                  nameHsIdent = Identifier
                    "foo_c"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_types.h:6:8",
        declId = NamePair {
          nameC = Name "bar",
          nameHsIdent = Identifier "Bar"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Bar"),
          structSizeof = 16,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:7:16",
                fieldName = NamePair {
                  nameC = Name "foo1",
                  nameHsIdent = Identifier
                    "bar_foo1"},
                fieldComment = Nothing},
              structFieldType = TypeStruct
                NamePair {
                  nameC = Name "foo",
                  nameHsIdent = Identifier "Foo"}
                NameOriginInSource,
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:8:16",
                fieldName = NamePair {
                  nameC = Name "foo2",
                  nameHsIdent = Identifier
                    "bar_foo2"},
                fieldComment = Nothing},
              structFieldType = TypeStruct
                NamePair {
                  nameC = Name "foo",
                  nameHsIdent = Identifier "Foo"}
                NameOriginInSource,
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_types.h:12:5",
        declId = NamePair {
          nameC = Name "ex3_ex3_struct",
          nameHsIdent = Identifier
            "Ex3_ex3_struct"},
        declOrigin = NameOriginGenerated
          (AnonId "nested_types.h:12:5"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "Ex3_ex3_struct"),
          structSizeof = 8,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:13:13",
                fieldName = NamePair {
                  nameC = Name "ex3_a",
                  nameHsIdent = Identifier
                    "ex3_ex3_struct_ex3_a"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:14:14",
                fieldName = NamePair {
                  nameC = Name "ex3_b",
                  nameHsIdent = Identifier
                    "ex3_ex3_struct_ex3_b"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))),
              structFieldOffset = 32,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_types.h:11:8",
        declId = NamePair {
          nameC = Name "ex3",
          nameHsIdent = Identifier "Ex3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Ex3"),
          structSizeof = 12,
          structAlignment = 4,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:15:7",
                fieldName = NamePair {
                  nameC = Name "ex3_struct",
                  nameHsIdent = Identifier
                    "ex3_ex3_struct"},
                fieldComment = Nothing},
              structFieldType = TypeStruct
                NamePair {
                  nameC = Name "ex3_ex3_struct",
                  nameHsIdent = Identifier
                    "Ex3_ex3_struct"}
                (NameOriginGenerated
                  (AnonId "nested_types.h:12:5")),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:16:11",
                fieldName = NamePair {
                  nameC = Name "ex3_c",
                  nameHsIdent = Identifier
                    "ex3_ex3_c"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimFloating PrimFloat),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "nested_types.h:22:8",
        declId = NamePair {
          nameC = Name "ex4_odd",
          nameHsIdent = Identifier
            "Ex4_odd"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Ex4_odd"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:23:9",
                fieldName = NamePair {
                  nameC = Name "value",
                  nameHsIdent = Identifier
                    "ex4_odd_value"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:27:8",
                fieldName = NamePair {
                  nameC = Name "next",
                  nameHsIdent = Identifier
                    "ex4_odd_next"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "ex4_even",
                    nameHsIdent = Identifier
                      "Ex4_even"}
                  NameOriginInSource),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "nested_types.h:24:12",
        declId = NamePair {
          nameC = Name "ex4_even",
          nameHsIdent = Identifier
            "Ex4_even"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["nested_types.h"],
            headerInclude =
            "nested_types.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Ex4_even"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:25:16",
                fieldName = NamePair {
                  nameC = Name "value",
                  nameHsIdent = Identifier
                    "ex4_even_value"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimFloating PrimDouble),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "nested_types.h:26:25",
                fieldName = NamePair {
                  nameC = Name "next",
                  nameHsIdent = Identifier
                    "ex4_even_next"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "ex4_odd",
                    nameHsIdent = Identifier
                      "Ex4_odd"}
                  NameOriginInSource),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["nested_types"]}
