-- addDependentFile musl-include/x86_64/bits/stdint.h
-- addDependentFile musl-include/x86_64/bits/alltypes.h
-- addDependentFile musl-include/x86_64/stdint.h
-- addDependentFile musl-include/x86_64/stddef.h
-- addDependentFile musl-include/x86_64/bits/errno.h
-- addDependentFile musl-include/x86_64/features.h
-- addDependentFile musl-include/x86_64/time.h
-- addDependentFile musl-include/x86_64/stdio.h
-- addDependentFile musl-include/x86_64/errno.h
-- addDependentFile examples/golden/program_slicing_selection.h
-- #include "program_slicing_selection.h"
-- enum FileOperationStatus test_internal_read_file_chunk (FILE *arg1, void *arg2, size_t arg3) { return read_file_chunk(arg1, arg2, arg3); }
newtype FileOperationStatus
    = FileOperationStatus {un_FileOperationStatus :: CInt}
    deriving stock (Eq, Ord)
instance Storable FileOperationStatus
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure FileOperationStatus <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {FileOperationStatus un_FileOperationStatus_3 -> pokeByteOff ptr_1 (0 :: Int) un_FileOperationStatus_3}}
instance CEnum FileOperationStatus
    where {type CEnumZ FileOperationStatus = CInt;
           toCEnum = FileOperationStatus;
           fromCEnum = un_FileOperationStatus;
           declaredValues = \_ -> declaredValuesFromList [(-1,
                                                           singleton "CUSTOM_ERROR_OTHER"),
                                                          (0, singleton "SUCCESS"),
                                                          (2, singleton "NOT_FOUND"),
                                                          (12, singleton "OUT_OF_MEMORY"),
                                                          (13, singleton "PERMISSION_DENIED"),
                                                          (22, singleton "INVALID_ARGUMENT")];
           showsUndeclared = showsWrappedUndeclared "FileOperationStatus";
           readPrecUndeclared = readPrecWrappedUndeclared "FileOperationStatus"}
instance Show FileOperationStatus
    where {showsPrec = showsCEnum}
instance Read FileOperationStatus
    where {readPrec = readPrecCEnum;
           readList = readListDefault;
           readListPrec = readListPrecDefault}
pattern SUCCESS :: FileOperationStatus
pattern SUCCESS = FileOperationStatus 0
pattern NOT_FOUND :: FileOperationStatus
pattern NOT_FOUND = FileOperationStatus 2
pattern PERMISSION_DENIED :: FileOperationStatus
pattern PERMISSION_DENIED = FileOperationStatus 13
pattern INVALID_ARGUMENT :: FileOperationStatus
pattern INVALID_ARGUMENT = FileOperationStatus 22
pattern OUT_OF_MEMORY :: FileOperationStatus
pattern OUT_OF_MEMORY = FileOperationStatus 12
pattern CUSTOM_ERROR_OTHER :: FileOperationStatus
pattern CUSTOM_ERROR_OTHER = FileOperationStatus (-1)
data FileOperationRecord
    = FileOperationRecord {fileOperationRecord_status :: FileOperationStatus,
                           fileOperationRecord_bytes_processed :: HsBindgen.Runtime.Prelude.CSize}
    deriving stock (Eq, Show)
instance Storable FileOperationRecord
    where {sizeOf = \_ -> 16 :: Int;
           alignment = \_ -> 8 :: Int;
           peek = \ptr_0 -> (pure FileOperationRecord <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (8 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {FileOperationRecord fileOperationRecord_status_3
                                                         fileOperationRecord_bytes_processed_4 -> pokeByteOff ptr_1 (0 :: Int) fileOperationRecord_status_3 >> pokeByteOff ptr_1 (8 :: Int) fileOperationRecord_bytes_processed_4}}
foreign import ccall safe "test_internal_read_file_chunk" read_file_chunk :: Ptr HsBindgen.Runtime.Prelude.CFile ->
                                                                             Ptr Void ->
                                                                             HsBindgen.Runtime.Prelude.CSize ->
                                                                             IO FileOperationStatus
