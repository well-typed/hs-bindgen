-- addDependentFile examples/golden/type_attributes.h
{-| __C declaration:__ @S@

    __defined at:__ @type_attributes.h:8:8@

    __exported by:__ @type_attributes.h@
-}
data S
    = S {s_f :: (ConstantArray 3 CShort)
         {- ^ __C declaration:__ @f@

              __defined at:__ @type_attributes.h:8:18@

              __exported by:__ @type_attributes.h@
         -}}
      {- ^ __C declaration:__ @S@

           __defined at:__ @type_attributes.h:8:8@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Show)
instance Storable S
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> pure S <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   S s_f_3 -> pokeByteOff ptr_1 (0 :: Int) s_f_3
{-| __C declaration:__ @more_aligned_int@

    __defined at:__ @type_attributes.h:9:13@

    __exported by:__ @type_attributes.h@
-}
newtype More_aligned_int
    = More_aligned_int {un_More_aligned_int :: CInt}
      {- ^ __C declaration:__ @more_aligned_int@

           __defined at:__ @type_attributes.h:9:13@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
{-| __C declaration:__ @S2@

    __defined at:__ @type_attributes.h:11:8@

    __exported by:__ @type_attributes.h@
-}
data S2
    = S2 {s2_f :: (ConstantArray 3 CShort)
          {- ^ __C declaration:__ @f@

               __defined at:__ @type_attributes.h:11:19@

               __exported by:__ @type_attributes.h@
          -}}
      {- ^ __C declaration:__ @S2@

           __defined at:__ @type_attributes.h:11:8@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Show)
instance Storable S2
    where sizeOf = \_ -> 16 :: Int
          alignment = \_ -> 16 :: Int
          peek = \ptr_0 -> pure S2 <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   S2 s2_f_3 -> pokeByteOff ptr_1 (0 :: Int) s2_f_3
{-| __C declaration:__ @my_unpacked_struct@

    __defined at:__ @type_attributes.h:13:8@

    __exported by:__ @type_attributes.h@
-}
data My_unpacked_struct
    = My_unpacked_struct {my_unpacked_struct_c :: CChar
                          {- ^ __C declaration:__ @c@

                               __defined at:__ @type_attributes.h:15:8@

                               __exported by:__ @type_attributes.h@
                          -},
                          my_unpacked_struct_i :: CInt
                          {- ^ __C declaration:__ @i@

                               __defined at:__ @type_attributes.h:16:7@

                               __exported by:__ @type_attributes.h@
                          -}}
      {- ^ __C declaration:__ @my_unpacked_struct@

           __defined at:__ @type_attributes.h:13:8@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Show)
instance Storable My_unpacked_struct
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (pure My_unpacked_struct <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   My_unpacked_struct my_unpacked_struct_c_3
                                                      my_unpacked_struct_i_4 -> pokeByteOff ptr_1 (0 :: Int) my_unpacked_struct_c_3 >> pokeByteOff ptr_1 (4 :: Int) my_unpacked_struct_i_4
{-| __C declaration:__ @my_packed_struct@

    __defined at:__ @type_attributes.h:19:37@

    __exported by:__ @type_attributes.h@
-}
data My_packed_struct
    = My_packed_struct {my_packed_struct_c :: CChar
                        {- ^ __C declaration:__ @c@

                             __defined at:__ @type_attributes.h:21:9@

                             __exported by:__ @type_attributes.h@
                        -},
                        my_packed_struct_i :: CInt
                        {- ^ __C declaration:__ @i@

                             __defined at:__ @type_attributes.h:22:9@

                             __exported by:__ @type_attributes.h@
                        -},
                        my_packed_struct_s :: My_unpacked_struct
                        {- ^ __C declaration:__ @s@

                             __defined at:__ @type_attributes.h:23:30@

                             __exported by:__ @type_attributes.h@
                        -}}
      {- ^ __C declaration:__ @my_packed_struct@

           __defined at:__ @type_attributes.h:19:37@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Show)
instance Storable My_packed_struct
    where sizeOf = \_ -> 13 :: Int
          alignment = \_ -> 1 :: Int
          peek = \ptr_0 -> ((pure My_packed_struct <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (1 :: Int)) <*> peekByteOff ptr_0 (5 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   My_packed_struct my_packed_struct_c_3
                                                    my_packed_struct_i_4
                                                    my_packed_struct_s_5 -> pokeByteOff ptr_1 (0 :: Int) my_packed_struct_c_3 >> (pokeByteOff ptr_1 (1 :: Int) my_packed_struct_i_4 >> pokeByteOff ptr_1 (5 :: Int) my_packed_struct_s_5)
{-| __defined at:__ @type_attributes.h:26:9@

    __exported by:__ @type_attributes.h@
-}
newtype Wait_status_ptr_t
    = Wait_status_ptr_t {un_Wait_status_ptr_t :: ByteArray}
      {- ^ __defined at:__ @type_attributes.h:26:9@

           __exported by:__ @type_attributes.h@
      -}
deriving via (SizedByteArray 8
                             8) instance Storable Wait_status_ptr_t
{-|

  __See:__ 'set_wait_status_ptr_t___ip'

__C declaration:__ @__ip@

__defined at:__ @type_attributes.h:28:8@

__exported by:__ @type_attributes.h@
-}
get_wait_status_ptr_t___ip :: Wait_status_ptr_t -> Ptr CInt
{-|

  __See:__ 'set_wait_status_ptr_t___ip'

__C declaration:__ @__ip@

__defined at:__ @type_attributes.h:28:8@

__exported by:__ @type_attributes.h@
-}
get_wait_status_ptr_t___ip = getUnionPayload
{-|

  __See:__ 'get_wait_status_ptr_t___ip'

-}
set_wait_status_ptr_t___ip :: Ptr CInt -> Wait_status_ptr_t
{-|

  __See:__ 'get_wait_status_ptr_t___ip'

-}
set_wait_status_ptr_t___ip = setUnionPayload
{-|

  __See:__ 'set_wait_status_ptr_t___up'

__C declaration:__ @__up@

__defined at:__ @type_attributes.h:29:15@

__exported by:__ @type_attributes.h@
-}
get_wait_status_ptr_t___up :: Wait_status_ptr_t -> Ptr Wait
{-|

  __See:__ 'set_wait_status_ptr_t___up'

__C declaration:__ @__up@

__defined at:__ @type_attributes.h:29:15@

__exported by:__ @type_attributes.h@
-}
get_wait_status_ptr_t___up = getUnionPayload
{-|

  __See:__ 'get_wait_status_ptr_t___up'

-}
set_wait_status_ptr_t___up :: Ptr Wait -> Wait_status_ptr_t
{-|

  __See:__ 'get_wait_status_ptr_t___up'

-}
set_wait_status_ptr_t___up = setUnionPayload
{-| __C declaration:__ @wait@

    __defined at:__ @type_attributes.h:29:9@

    __exported by:__ @type_attributes.h@
-}
data Wait
{-| __C declaration:__ @T1@

    __defined at:__ @type_attributes.h:32:13@

    __exported by:__ @type_attributes.h@
-}
newtype T1
    = T1 {un_T1 :: CInt}
      {- ^ __C declaration:__ @T1@

           __defined at:__ @type_attributes.h:32:13@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
{-| __C declaration:__ @short_a@

    __defined at:__ @type_attributes.h:34:46@

    __exported by:__ @type_attributes.h@
-}
newtype Short_a
    = Short_a {un_Short_a :: CShort}
      {- ^ __C declaration:__ @short_a@

           __defined at:__ @type_attributes.h:34:46@

           __exported by:__ @type_attributes.h@
      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
