/* automatically generated by rust-bindgen 0.70.1 */

/// Examples for the various cases in by `HsBindgen.Frontend.Analysis.Typedefs`
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct1 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct1"][::std::mem::size_of::<struct1>() - 0usize];
    ["Alignment of struct1"][::std::mem::align_of::<struct1>() - 1usize];
};
/// Examples for the various cases in by `HsBindgen.Frontend.Analysis.Typedefs`
pub type struct1_t = struct1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct2 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct2"][::std::mem::size_of::<struct2>() - 0usize];
    ["Alignment of struct2"][::std::mem::align_of::<struct2>() - 1usize];
};
pub type struct2_t = struct2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct3 {
    _unused: [u8; 0],
}
pub type struct3_t = struct3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct4 {
    _unused: [u8; 0],
}
pub type struct4_t = struct4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct5 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct5"][::std::mem::size_of::<struct5>() - 0usize];
    ["Alignment of struct5"][::std::mem::align_of::<struct5>() - 1usize];
};
pub type struct5_t = *mut struct5;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct6 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct6"][::std::mem::size_of::<struct6>() - 0usize];
    ["Alignment of struct6"][::std::mem::align_of::<struct6>() - 1usize];
};
pub type struct6_ptr = *mut struct6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct7 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct7"][::std::mem::size_of::<struct7>() - 0usize];
    ["Alignment of struct7"][::std::mem::align_of::<struct7>() - 1usize];
};
pub type struct7a = struct7;
pub type struct7b = struct7;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct8 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct8"][::std::mem::size_of::<struct8>() - 0usize];
    ["Alignment of struct8"][::std::mem::align_of::<struct8>() - 1usize];
};
pub type struct8b = struct8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct9 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct9"][::std::mem::size_of::<struct9>() - 0usize];
    ["Alignment of struct9"][::std::mem::align_of::<struct9>() - 1usize];
};
pub type struct9_t = struct9;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct10 {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct10"][::std::mem::size_of::<struct10>() - 0usize];
    ["Alignment of struct10"][::std::mem::align_of::<struct10>() - 1usize];
};
pub type struct10_t = struct10;
pub type struct10_t_t = struct10_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct11 {
    pub x: ::std::os::raw::c_int,
    pub self_: *mut struct11,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct11"][::std::mem::size_of::<struct11>() - 16usize];
    ["Alignment of struct11"][::std::mem::align_of::<struct11>() - 8usize];
    ["Offset of field: struct11::x"][::std::mem::offset_of!(struct11, x) - 0usize];
    [
        "Offset of field: struct11::self_",
    ][::std::mem::offset_of!(struct11, self_) - 8usize];
};
pub type struct11_t = struct11;
pub type struct12_t = struct12;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct12 {
    pub x: ::std::os::raw::c_int,
    pub self_: *mut struct12_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of struct12"][::std::mem::size_of::<struct12>() - 16usize];
    ["Alignment of struct12"][::std::mem::align_of::<struct12>() - 8usize];
    ["Offset of field: struct12::x"][::std::mem::offset_of!(struct12, x) - 0usize];
    [
        "Offset of field: struct12::self_",
    ][::std::mem::offset_of!(struct12, self_) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct use_sites {
    pub useTypedef_struct1_t: struct1_t,
    pub useTypedef_struct2_t: struct2_t,
    pub useTypedef_struct3_t: *mut struct3_t,
    pub useTypedef_struct4_t: *mut struct4_t,
    pub useStruct_struct5: struct5,
    pub useTypedef_struct5_t: struct5_t,
    pub useStruct_struct6: struct6,
    pub useTypedef_struct6: struct6_ptr,
    pub useTypedef_struct7a: struct7a,
    pub useTypedef_struct7b: struct7b,
    pub useTypedef_struct8: struct8,
    pub useTypedef_struct8b: struct8b,
    pub useTypedef_struct9: struct9,
    pub useTypedef_struct9_t: struct9_t,
    pub useTypedef_struct10_t: struct10_t,
    pub useTypedef_struct10_t_t: struct10_t_t,
    pub useTypedef_struct11_t: struct11_t,
    pub useTypedef_struct12_t: struct12_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of use_sites"][::std::mem::size_of::<use_sites>() - 64usize];
    ["Alignment of use_sites"][::std::mem::align_of::<use_sites>() - 8usize];
    [
        "Offset of field: use_sites::useTypedef_struct1_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct1_t) - 0usize];
    [
        "Offset of field: use_sites::useTypedef_struct2_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct2_t) - 0usize];
    [
        "Offset of field: use_sites::useTypedef_struct3_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct3_t) - 0usize];
    [
        "Offset of field: use_sites::useTypedef_struct4_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct4_t) - 8usize];
    [
        "Offset of field: use_sites::useStruct_struct5",
    ][::std::mem::offset_of!(use_sites, useStruct_struct5) - 16usize];
    [
        "Offset of field: use_sites::useTypedef_struct5_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct5_t) - 16usize];
    [
        "Offset of field: use_sites::useStruct_struct6",
    ][::std::mem::offset_of!(use_sites, useStruct_struct6) - 24usize];
    [
        "Offset of field: use_sites::useTypedef_struct6",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct6) - 24usize];
    [
        "Offset of field: use_sites::useTypedef_struct7a",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct7a) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct7b",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct7b) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct8",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct8) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct8b",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct8b) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct9",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct9) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct9_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct9_t) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct10_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct10_t) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct10_t_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct10_t_t) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct11_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct11_t) - 32usize];
    [
        "Offset of field: use_sites::useTypedef_struct12_t",
    ][::std::mem::offset_of!(use_sites, useTypedef_struct12_t) - 48usize];
};
