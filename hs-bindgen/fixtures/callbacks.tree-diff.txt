TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:4:5",
        declId = NamePair {
          nameC = Name
            "readFileWithProcessor",
          nameHsIdent = Identifier
            "readFileWithProcessor"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "processLine",
                  nameHsIdent = Identifier
                    "processLine"})
              (TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid)),
            _×_
              (Just
                NamePair {
                  nameC = Name "fileId",
                  nameHsIdent = Identifier
                    "fileId"})
              (TypePrim
                (PrimIntegral PrimInt Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:5:6",
        declId = NamePair {
          nameC = Name "watchTemperature",
          nameHsIdent = Identifier
            "watchTemperature"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "onTempChange",
                  nameHsIdent = Identifier
                    "onTempChange"})
              (TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid)),
            _×_
              (Just
                NamePair {
                  nameC = Name "sensorId",
                  nameHsIdent = Identifier
                    "sensorId"})
              (TypePrim
                (PrimIntegral PrimInt Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:10:16",
        declId = NamePair {
          nameC = Name
            "FileOpenedNotification_Deref",
          nameHsIdent = Identifier
            "FileOpenedNotification_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:10:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name
                          "FileOpenedNotification",
                        nameHsIdent = Identifier
                          "FileOpenedNotification"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "FileOpenedNotification_Deref",
            newtypeField = Name
              "@NsVar"
              "un_FileOpenedNotification_Deref"},
          typedefType = TypeFun
            []
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:10:16",
        declId = NamePair {
          nameC = Name
            "FileOpenedNotification",
          nameHsIdent = Identifier
            "FileOpenedNotification"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "FileOpenedNotification",
            newtypeField = Name
              "@NsVar"
              "un_FileOpenedNotification"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "FileOpenedNotification_Deref",
                  nameHsIdent = Identifier
                    "FileOpenedNotification_Deref"}
                (TypeFun [] TypeVoid)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:11:16",
        declId = NamePair {
          nameC = Name
            "ProgressUpdate_Deref",
          nameHsIdent = Identifier
            "ProgressUpdate_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:11:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name "ProgressUpdate",
                        nameHsIdent = Identifier
                          "ProgressUpdate"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "ProgressUpdate_Deref",
            newtypeField = Name
              "@NsVar"
              "un_ProgressUpdate_Deref"},
          typedefType = TypeFun
            [
              TypePrim
                (PrimIntegral PrimInt Signed)]
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:11:16",
        declId = NamePair {
          nameC = Name "ProgressUpdate",
          nameHsIdent = Identifier
            "ProgressUpdate"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "ProgressUpdate",
            newtypeField = Name
              "@NsVar"
              "un_ProgressUpdate"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "ProgressUpdate_Deref",
                  nameHsIdent = Identifier
                    "ProgressUpdate_Deref"}
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:12:15",
        declId = NamePair {
          nameC = Name
            "DataValidator_Deref",
          nameHsIdent = Identifier
            "DataValidator_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:12:15"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name "DataValidator",
                        nameHsIdent = Identifier
                          "DataValidator"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "DataValidator_Deref",
            newtypeField = Name
              "@NsVar"
              "un_DataValidator_Deref"},
          typedefType = TypeFun
            [
              TypePrim
                (PrimIntegral PrimInt Signed)]
            (TypePrim
              (PrimIntegral PrimInt Signed))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:12:15",
        declId = NamePair {
          nameC = Name "DataValidator",
          nameHsIdent = Identifier
            "DataValidator"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "DataValidator",
            newtypeField = Name
              "@NsVar"
              "un_DataValidator"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "DataValidator_Deref",
                  nameHsIdent = Identifier
                    "DataValidator_Deref"}
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed)))))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:14:6",
        declId = NamePair {
          nameC = Name "onFileOpened",
          nameHsIdent = Identifier
            "onFileOpened"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "notify",
                  nameHsIdent = Identifier
                    "notify"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name
                      "FileOpenedNotification",
                    nameHsIdent = Identifier
                      "FileOpenedNotification"}
                  (TypePointer
                    (TypeFun [] TypeVoid))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:15:6",
        declId = NamePair {
          nameC = Name
            "onProgressChanged",
          nameHsIdent = Identifier
            "onProgressChanged"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "update",
                  nameHsIdent = Identifier
                    "update"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "ProgressUpdate",
                    nameHsIdent = Identifier
                      "ProgressUpdate"}
                  (TypePointer
                    (TypeFun
                      [
                        TypePrim
                          (PrimIntegral PrimInt Signed)]
                      TypeVoid))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:16:5",
        declId = NamePair {
          nameC = Name "validateInput",
          nameHsIdent = Identifier
            "validateInput"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "validator",
                  nameHsIdent = Identifier
                    "validator"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "DataValidator",
                    nameHsIdent = Identifier
                      "DataValidator"}
                  (TypePointer
                    (TypeFun
                      [
                        TypePrim
                          (PrimIntegral PrimInt Signed)]
                      (TypePrim
                        (PrimIntegral
                          PrimInt
                          Signed)))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "rawValue",
                  nameHsIdent = Identifier
                    "rawValue"})
              (TypePrim
                (PrimIntegral PrimInt Signed))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:21:8",
        declId = NamePair {
          nameC = Name "Measurement",
          nameHsIdent = Identifier
            "Measurement"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "Measurement"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:22:10",
                fieldName = NamePair {
                  nameC = Name "value",
                  nameHsIdent = Identifier
                    "measurement_value"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimFloating PrimDouble),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:23:10",
                fieldName = NamePair {
                  nameC = Name "timestamp",
                  nameHsIdent = Identifier
                    "measurement_timestamp"},
                fieldComment = Nothing},
              structFieldType = TypePrim
                (PrimFloating PrimDouble),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:26:16",
        declId = NamePair {
          nameC = Name
            "MeasurementReceived_Deref",
          nameHsIdent = Identifier
            "MeasurementReceived_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:26:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name
                          "MeasurementReceived",
                        nameHsIdent = Identifier
                          "MeasurementReceived"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "MeasurementReceived_Deref",
            newtypeField = Name
              "@NsVar"
              "un_MeasurementReceived_Deref"},
          typedefType = TypeFun
            [
              TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Measurement",
                    nameHsIdent = Identifier
                      "Measurement"}
                  NameOriginInSource)]
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:26:16",
        declId = NamePair {
          nameC = Name
            "MeasurementReceived",
          nameHsIdent = Identifier
            "MeasurementReceived"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "MeasurementReceived",
            newtypeField = Name
              "@NsVar"
              "un_MeasurementReceived"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "MeasurementReceived_Deref",
                  nameHsIdent = Identifier
                    "MeasurementReceived_Deref"}
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource)]
                  TypeVoid)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:27:6",
        declId = NamePair {
          nameC = Name "onNewMeasurement",
          nameHsIdent = Identifier
            "onNewMeasurement"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "handler",
                  nameHsIdent = Identifier
                    "handler"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name
                      "MeasurementReceived",
                    nameHsIdent = Identifier
                      "MeasurementReceived"}
                  (TypePointer
                    (TypeFun
                      [
                        TypePointer
                          (TypeStruct
                            NamePair {
                              nameC = Name "Measurement",
                              nameHsIdent = Identifier
                                "Measurement"}
                            NameOriginInSource)]
                      TypeVoid))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:29:16",
        declId = NamePair {
          nameC = Name
            "MeasurementReceived2_Deref",
          nameHsIdent = Identifier
            "MeasurementReceived2_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:29:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name
                          "MeasurementReceived2",
                        nameHsIdent = Identifier
                          "MeasurementReceived2"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "MeasurementReceived2_Deref",
            newtypeField = Name
              "@NsVar"
              "un_MeasurementReceived2_Deref"},
          typedefType = TypeFun
            [
              TypeStruct
                NamePair {
                  nameC = Name "Measurement",
                  nameHsIdent = Identifier
                    "Measurement"}
                NameOriginInSource]
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:29:16",
        declId = NamePair {
          nameC = Name
            "MeasurementReceived2",
          nameHsIdent = Identifier
            "MeasurementReceived2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "MeasurementReceived2",
            newtypeField = Name
              "@NsVar"
              "un_MeasurementReceived2"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "MeasurementReceived2_Deref",
                  nameHsIdent = Identifier
                    "MeasurementReceived2_Deref"}
                (TypeFun
                  [
                    TypeStruct
                      NamePair {
                        nameC = Name "Measurement",
                        nameHsIdent = Identifier
                          "Measurement"}
                      NameOriginInSource]
                  TypeVoid)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:30:6",
        declId = NamePair {
          nameC = Name
            "onNewMeasurement2",
          nameHsIdent = Identifier
            "onNewMeasurement2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "handler",
                  nameHsIdent = Identifier
                    "handler"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name
                      "MeasurementReceived2",
                    nameHsIdent = Identifier
                      "MeasurementReceived2"}
                  (TypePointer
                    (TypeFun
                      [
                        TypeStruct
                          NamePair {
                            nameC = Name "Measurement",
                            nameHsIdent = Identifier
                              "Measurement"}
                          NameOriginInSource]
                      TypeVoid))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:32:16",
        declId = NamePair {
          nameC = Name
            "SampleBufferFull_Deref",
          nameHsIdent = Identifier
            "SampleBufferFull_Deref"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:32:16"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Auxiliary type used by ",
                  InlineRefCommand
                    (ById
                      NamePair {
                        nameC = Name "SampleBufferFull",
                        nameHsIdent = Identifier
                          "SampleBufferFull"})]])},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "SampleBufferFull_Deref",
            newtypeField = Name
              "@NsVar"
              "un_SampleBufferFull_Deref"},
          typedefType = TypeFun
            [
              TypeConstArray
                10
                (TypePrim
                  (PrimIntegral PrimInt Signed))]
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:32:16",
        declId = NamePair {
          nameC = Name "SampleBufferFull",
          nameHsIdent = Identifier
            "SampleBufferFull"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "SampleBufferFull",
            newtypeField = Name
              "@NsVar"
              "un_SampleBufferFull"},
          typedefType = TypePointer
            (TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name
                    "SampleBufferFull_Deref",
                  nameHsIdent = Identifier
                    "SampleBufferFull_Deref"}
                (TypeFun
                  [
                    TypeConstArray
                      10
                      (TypePrim
                        (PrimIntegral PrimInt Signed))]
                  TypeVoid)))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:33:6",
        declId = NamePair {
          nameC = Name "onBufferReady",
          nameHsIdent = Identifier
            "onBufferReady"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "handler",
                  nameHsIdent = Identifier
                    "handler"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "SampleBufferFull",
                    nameHsIdent = Identifier
                      "SampleBufferFull"}
                  (TypePointer
                    (TypeFun
                      [
                        TypeConstArray
                          10
                          (TypePrim
                            (PrimIntegral PrimInt Signed))]
                      TypeVoid))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:38:6",
        declId = NamePair {
          nameC = Name
            "transformMeasurement",
          nameHsIdent = Identifier
            "transformMeasurement"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "data",
                  nameHsIdent = Identifier
                    "data'"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Measurement",
                    nameHsIdent = Identifier
                      "Measurement"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "transformer",
                  nameHsIdent = Identifier
                    "transformer"})
              (TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypePointer
                      (TypeFun
                        [
                          TypePrim
                            (PrimFloating PrimDouble),
                          TypePrim
                            (PrimIntegral PrimInt Signed)]
                        (TypePrim
                          (PrimFloating PrimDouble))),
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:43:6",
        declId = NamePair {
          nameC = Name
            "processWithCallbacks",
          nameHsIdent = Identifier
            "processWithCallbacks"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "handler",
                  nameHsIdent = Identifier
                    "handler"})
              (TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name
                            "FileOpenedNotification",
                          nameHsIdent = Identifier
                            "FileOpenedNotification"}
                        (TypePointer
                          (TypeFun [] TypeVoid))),
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:50:8",
        declId = NamePair {
          nameC = Name
            "MeasurementHandler",
          nameHsIdent = Identifier
            "MeasurementHandler"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "MeasurementHandler"),
          structSizeof = 24,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:51:10",
                fieldName = NamePair {
                  nameC = Name "onReceived",
                  nameHsIdent = Identifier
                    "measurementHandler_onReceived"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource)]
                  TypeVoid),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:52:9",
                fieldName = NamePair {
                  nameC = Name "validate",
                  nameHsIdent = Identifier
                    "measurementHandler_validate"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource)]
                  (TypePrim
                    (PrimIntegral PrimInt Signed))),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:53:10",
                fieldName = NamePair {
                  nameC = Name "onError",
                  nameHsIdent = Identifier
                    "measurementHandler_onError"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePrim
                      (PrimIntegral PrimInt Signed)]
                  TypeVoid),
              structFieldOffset = 128,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:56:6",
        declId = NamePair {
          nameC = Name "registerHandler",
          nameHsIdent = Identifier
            "registerHandler"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "handler",
                  nameHsIdent = Identifier
                    "handler"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name
                      "MeasurementHandler",
                    nameHsIdent = Identifier
                      "MeasurementHandler"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:58:8",
        declId = NamePair {
          nameC = Name "DataPipeline",
          nameHsIdent = Identifier
            "DataPipeline"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name
              "@NsConstr"
              "DataPipeline"),
          structSizeof = 24,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:59:10",
                fieldName = NamePair {
                  nameC = Name "preProcess",
                  nameHsIdent = Identifier
                    "dataPipeline_preProcess"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name "DataValidator",
                          nameHsIdent = Identifier
                            "DataValidator"}
                        (TypePointer
                          (TypeFun
                            [
                              TypePrim
                                (PrimIntegral PrimInt Signed)]
                            (TypePrim
                              (PrimIntegral
                                PrimInt
                                Signed)))))]
                  TypeVoid),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:60:10",
                fieldName = NamePair {
                  nameC = Name "process",
                  nameHsIdent = Identifier
                    "dataPipeline_process"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource)]
                  TypeVoid),
              structFieldOffset = 64,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:61:10",
                fieldName = NamePair {
                  nameC = Name "postProcess",
                  nameHsIdent = Identifier
                    "dataPipeline_postProcess"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name "ProgressUpdate",
                          nameHsIdent = Identifier
                            "ProgressUpdate"}
                        (TypePointer
                          (TypeFun
                            [
                              TypePrim
                                (PrimIntegral PrimInt Signed)]
                            TypeVoid)))]
                  TypeVoid),
              structFieldOffset = 128,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:64:6",
        declId = NamePair {
          nameC = Name "executePipeline",
          nameHsIdent = Identifier
            "executePipeline"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "data",
                  nameHsIdent = Identifier
                    "data'"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Measurement",
                    nameHsIdent = Identifier
                      "Measurement"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "pipeline",
                  nameHsIdent = Identifier
                    "pipeline"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "DataPipeline",
                    nameHsIdent = Identifier
                      "DataPipeline"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:69:7",
        declId = NamePair {
          nameC = Name
            "ProcessorCallback",
          nameHsIdent = Identifier
            "ProcessorCallback"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclUnion
        Union {
          unionNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "ProcessorCallback",
            newtypeField = Name
              "@NsVar"
              "un_ProcessorCallback"},
          unionSizeof = 8,
          unionAlignment = 8,
          unionFields = [
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:70:10",
                fieldName = NamePair {
                  nameC = Name "simple",
                  nameHsIdent = Identifier
                    "processorCallback_simple"},
                fieldComment = Nothing},
              unionFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource)]
                  TypeVoid)},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:71:10",
                fieldName = NamePair {
                  nameC = Name "withValidator",
                  nameHsIdent = Identifier
                    "processorCallback_withValidator"},
                fieldComment = Nothing},
              unionFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name "DataValidator",
                          nameHsIdent = Identifier
                            "DataValidator"}
                        (TypePointer
                          (TypeFun
                            [
                              TypePrim
                                (PrimIntegral PrimInt Signed)]
                            (TypePrim
                              (PrimIntegral
                                PrimInt
                                Signed)))))]
                  TypeVoid)},
            UnionField {
              unionFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:72:10",
                fieldName = NamePair {
                  nameC = Name "withProgress",
                  nameHsIdent = Identifier
                    "processorCallback_withProgress"},
                fieldComment = Nothing},
              unionFieldType = TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name "ProgressUpdate",
                          nameHsIdent = Identifier
                            "ProgressUpdate"}
                        (TypePointer
                          (TypeFun
                            [
                              TypePrim
                                (PrimIntegral PrimInt Signed)]
                            TypeVoid)))]
                  TypeVoid)}]},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:76:3",
        declId = NamePair {
          nameC = Name "Processor_mode",
          nameHsIdent = Identifier
            "Processor_mode"},
        declOrigin = NameOriginGenerated
          (AnonId "callbacks.h:76:3"),
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclEnum
        Enum {
          enumNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Processor_mode",
            newtypeField = Name
              "@NsVar"
              "un_Processor_mode"},
          enumType = TypePrim
            (PrimIntegral PrimInt Unsigned),
          enumSizeof = 4,
          enumAlignment = 4,
          enumConstants = [
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc = "callbacks.h:76:10",
                fieldName = NamePair {
                  nameC = Name "MODE_SIMPLE",
                  nameHsIdent = Identifier
                    "MODE_SIMPLE"},
                fieldComment = Nothing},
              enumConstantValue = 0},
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc = "callbacks.h:76:23",
                fieldName = NamePair {
                  nameC = Name "MODE_VALIDATED",
                  nameHsIdent = Identifier
                    "MODE_VALIDATED"},
                fieldComment = Nothing},
              enumConstantValue = 1},
            EnumConstant {
              enumConstantInfo = FieldInfo {
                fieldLoc = "callbacks.h:76:39",
                fieldName = NamePair {
                  nameC = Name "MODE_PROGRESS",
                  nameHsIdent = Identifier
                    "MODE_PROGRESS"},
                fieldComment = Nothing},
              enumConstantValue = 2}]},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:75:8",
        declId = NamePair {
          nameC = Name "Processor",
          nameHsIdent = Identifier
            "Processor"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "Processor"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:76:55",
                fieldName = NamePair {
                  nameC = Name "mode",
                  nameHsIdent = Identifier
                    "processor_mode"},
                fieldComment = Nothing},
              structFieldType = TypeEnum
                NamePair {
                  nameC = Name "Processor_mode",
                  nameHsIdent = Identifier
                    "Processor_mode"}
                (NameOriginGenerated
                  (AnonId "callbacks.h:76:3")),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc = "callbacks.h:77:27",
                fieldName = NamePair {
                  nameC = Name "callback",
                  nameHsIdent = Identifier
                    "processor_callback"},
                fieldComment = Nothing},
              structFieldType = TypeUnion
                NamePair {
                  nameC = Name
                    "ProcessorCallback",
                  nameHsIdent = Identifier
                    "ProcessorCallback"}
                NameOriginInSource,
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:80:6",
        declId = NamePair {
          nameC = Name "runProcessor",
          nameHsIdent = Identifier
            "runProcessor"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "data",
                  nameHsIdent = Identifier
                    "data'"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Measurement",
                    nameHsIdent = Identifier
                      "Measurement"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "processor",
                  nameHsIdent = Identifier
                    "processor"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Processor",
                    nameHsIdent = Identifier
                      "Processor"}
                  NameOriginInSource))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc = "callbacks.h:85:6",
        declId = NamePair {
          nameC = Name
            "processMeasurementWithValidation",
          nameHsIdent = Identifier
            "processMeasurementWithValidation"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["callbacks.h"],
            headerInclude = "callbacks.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "data",
                  nameHsIdent = Identifier
                    "data'"})
              (TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "Measurement",
                    nameHsIdent = Identifier
                      "Measurement"}
                  NameOriginInSource)),
            _×_
              (Just
                NamePair {
                  nameC = Name "processor",
                  nameHsIdent = Identifier
                    "processor"})
              (TypePointer
                (TypeFun
                  [
                    TypePointer
                      (TypeStruct
                        NamePair {
                          nameC = Name "Measurement",
                          nameHsIdent = Identifier
                            "Measurement"}
                        NameOriginInSource),
                    TypePointer
                      (TypeFun
                        [
                          TypePointer
                            (TypeStruct
                              NamePair {
                                nameC = Name "Measurement",
                                nameHsIdent = Identifier
                                  "Measurement"}
                              NameOriginInSource),
                          TypeTypedef
                            (TypedefRegular
                              NamePair {
                                nameC = Name "DataValidator",
                                nameHsIdent = Identifier
                                  "DataValidator"}
                              (TypePointer
                                (TypeFun
                                  [
                                    TypePrim
                                      (PrimIntegral PrimInt Signed)]
                                  (TypePrim
                                    (PrimIntegral
                                      PrimInt
                                      Signed))))),
                          TypePrim
                            (PrimIntegral PrimInt Signed)]
                        TypeVoid),
                    TypeTypedef
                      (TypedefRegular
                        NamePair {
                          nameC = Name "DataValidator",
                          nameHsIdent = Identifier
                            "DataValidator"}
                        (TypePointer
                          (TypeFun
                            [
                              TypePrim
                                (PrimIntegral PrimInt Signed)]
                            (TypePrim
                              (PrimIntegral
                                PrimInt
                                Signed)))))]
                  TypeVoid))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["callbacks"]}
