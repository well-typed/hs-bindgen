TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:17:56",
        declId = NamePair {
          nameC = Name "f0",
          nameHsIdent = Identifier "f0"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:18:56",
        declId = NamePair {
          nameC = Name "f1",
          nameHsIdent = Identifier "f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:19:56",
        declId = NamePair {
          nameC = Name "f2",
          nameHsIdent = Identifier "f2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:20:56",
        declId = NamePair {
          nameC = Name "f3",
          nameHsIdent = Identifier "f3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:21:56",
        declId = NamePair {
          nameC = Name "f4",
          nameHsIdent = Identifier "f4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:24:56",
        declId = NamePair {
          nameC = Name "f5",
          nameHsIdent = Identifier "f5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:25:56",
        declId = NamePair {
          nameC = Name "f6",
          nameHsIdent = Identifier "f6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:26:56",
        declId = NamePair {
          nameC = Name "f7",
          nameHsIdent = Identifier "f7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:27:56",
        declId = NamePair {
          nameC = Name "f8",
          nameHsIdent = Identifier "f8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:28:56",
        declId = NamePair {
          nameC = Name "f9",
          nameHsIdent = Identifier "f9"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:31:56",
        declId = NamePair {
          nameC = Name "f10",
          nameHsIdent = Identifier "f10"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:32:56",
        declId = NamePair {
          nameC = Name "f11",
          nameHsIdent = Identifier "f11"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:33:56",
        declId = NamePair {
          nameC = Name "f12",
          nameHsIdent = Identifier "f12"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:34:56",
        declId = NamePair {
          nameC = Name "f13",
          nameHsIdent = Identifier "f13"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:35:56",
        declId = NamePair {
          nameC = Name "f14",
          nameHsIdent = Identifier "f14"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:38:56",
        declId = NamePair {
          nameC = Name "f15",
          nameHsIdent = Identifier "f15"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:39:56",
        declId = NamePair {
          nameC = Name "f16",
          nameHsIdent = Identifier "f16"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:40:56",
        declId = NamePair {
          nameC = Name "f17",
          nameHsIdent = Identifier "f17"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:41:56",
        declId = NamePair {
          nameC = Name "f18",
          nameHsIdent = Identifier "f18"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:42:56",
        declId = NamePair {
          nameC = Name "f19",
          nameHsIdent = Identifier "f19"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:45:56",
        declId = NamePair {
          nameC = Name "f20",
          nameHsIdent = Identifier "f20"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:46:56",
        declId = NamePair {
          nameC = Name "f21",
          nameHsIdent = Identifier "f21"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:47:56",
        declId = NamePair {
          nameC = Name "f22",
          nameHsIdent = Identifier "f22"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:48:56",
        declId = NamePair {
          nameC = Name "f23",
          nameHsIdent = Identifier "f23"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:49:56",
        declId = NamePair {
          nameC = Name "f24",
          nameHsIdent = Identifier "f24"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:52:56",
        declId = NamePair {
          nameC = Name "f25",
          nameHsIdent = Identifier "f25"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:53:56",
        declId = NamePair {
          nameC = Name "f26",
          nameHsIdent = Identifier "f26"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:54:56",
        declId = NamePair {
          nameC = Name "f27",
          nameHsIdent = Identifier "f27"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:55:56",
        declId = NamePair {
          nameC = Name "f28",
          nameHsIdent = Identifier "f28"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:56:56",
        declId = NamePair {
          nameC = Name "f29",
          nameHsIdent = Identifier "f29"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:61:48",
        declId = NamePair {
          nameC = Name "i0",
          nameHsIdent = Identifier "i0"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:62:48",
        declId = NamePair {
          nameC = Name "i1",
          nameHsIdent = Identifier "i1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:63:48",
        declId = NamePair {
          nameC = Name "i2",
          nameHsIdent = Identifier "i2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:64:48",
        declId = NamePair {
          nameC = Name "i3",
          nameHsIdent = Identifier "i3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:65:48",
        declId = NamePair {
          nameC = Name "i4",
          nameHsIdent = Identifier "i4"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:68:48",
        declId = NamePair {
          nameC = Name "i5",
          nameHsIdent = Identifier "i5"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:69:48",
        declId = NamePair {
          nameC = Name "i6",
          nameHsIdent = Identifier "i6"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:70:48",
        declId = NamePair {
          nameC = Name "i7",
          nameHsIdent = Identifier "i7"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:71:48",
        declId = NamePair {
          nameC = Name "i8",
          nameHsIdent = Identifier "i8"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:72:48",
        declId = NamePair {
          nameC = Name "i9",
          nameHsIdent = Identifier "i9"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:75:55",
        declId = NamePair {
          nameC = Name "i10",
          nameHsIdent = Identifier "i10"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:76:55",
        declId = NamePair {
          nameC = Name "i11",
          nameHsIdent = Identifier "i11"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:77:55",
        declId = NamePair {
          nameC = Name "i12",
          nameHsIdent = Identifier "i12"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:78:55",
        declId = NamePair {
          nameC = Name "i13",
          nameHsIdent = Identifier "i13"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:79:55",
        declId = NamePair {
          nameC = Name "i14",
          nameHsIdent = Identifier "i14"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:82:55",
        declId = NamePair {
          nameC = Name "i15",
          nameHsIdent = Identifier "i15"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:83:55",
        declId = NamePair {
          nameC = Name "i16",
          nameHsIdent = Identifier "i16"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:84:55",
        declId = NamePair {
          nameC = Name "i17",
          nameHsIdent = Identifier "i17"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:85:55",
        declId = NamePair {
          nameC = Name "i18",
          nameHsIdent = Identifier "i18"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "visibility_attributes.h:86:55",
        declId = NamePair {
          nameC = Name "i19",
          nameHsIdent = Identifier "i19"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["visibility_attributes.h"],
            headerInclude =
            "visibility_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = ModuleName
            "Example",
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = [
    "visibility_attributes"]}
