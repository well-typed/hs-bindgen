-- addDependentFile musl-include/x86_64/stdbool.h
-- addDependentFile musl-include/x86_64/bits/stdint.h
-- addDependentFile musl-include/x86_64/bits/alltypes.h
-- addDependentFile musl-include/x86_64/stddef.h
-- addDependentFile musl-include/x86_64/stdint.h
-- addDependentFile examples/golden/doxygen_docs.h
-- #include <doxygen_docs.h>
-- /* get_global_counter_ptr */ __attribute__ ((const)) signed int *hs_bindgen_test_doxygen_docs_7c3b3bc7cc470742 (void) { return &global_counter; } 
-- /* get_version_string_ptr */ __attribute__ ((const)) char **hs_bindgen_test_doxygen_docs_a8499810bd5203c6 (void) { return &version_string; } 
-- signed int hs_bindgen_test_doxygen_docs_d3011436e073569c (uint8_t *arg1, uint8_t *arg2, size_t *arg3) { return process_data(arg1, arg2, arg3); }
-- _Bool hs_bindgen_test_doxygen_docs_4e9b999ed81440c0 (char *arg1) { return process_file(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_788bfbb9e824261c (signed int arg1, signed int arg2) { return calculate_value(arg1, arg2); }
-- _Bool hs_bindgen_test_doxygen_docs_3763cc54606bc611 (signed int arg1) { return html_example(arg1); }
-- _Bool hs_bindgen_test_doxygen_docs_9d6d039971edcd60 (char **arg1, size_t arg2) { return list_example(arg1, arg2); }
-- void *hs_bindgen_test_doxygen_docs_b9c683fb9a695cc9 (void *arg1) { return dangerous_function(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_fb3e3158714e01f5 (char *arg1) { return detailed_return_codes(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_84140a44d1bd8380 (signed int arg1) { return old_function(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_7549924ba8d1e7b8 (signed int arg1) { return versioned_function(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_1ce818d0ed47ea3e (char *arg1, size_t arg2) { return process_buffer(arg1, arg2); }
-- void *hs_bindgen_test_doxygen_docs_bcbe640b60445a4f (void *arg1, void *arg2, size_t arg3) { return my_memcpy(arg1, arg2, arg3); }
-- signed int hs_bindgen_test_doxygen_docs_1c952f01cc07bb64 (signed int arg1) { return double_value(arg1); }
-- status_code_t hs_bindgen_test_doxygen_docs_a9d86cb54c7498fe (config_t *arg1, uint8_t *arg2, size_t arg3) { return complex_function(arg1, arg2, arg3); }
-- signed int hs_bindgen_test_doxygen_docs_71214e4420f53a0e (char *arg1) { return hash(arg1); }
-- signed int hs_bindgen_test_doxygen_docs_8effe939268709e4 (signed int arg1) { return square(arg1); }
mAX_NAME_LENGTH :: CInt
mAX_NAME_LENGTH = 64 :: CInt
{-| This is the comment __title__

  > size_type

  Size type for this library

-}
newtype Size_type
    = Size_type {un_Size_type :: HsBindgen.Runtime.Prelude.CSize}
      {- ^ This is the comment __title__

         > size_type

         Size type for this library

      -}
    deriving stock (Eq, Ord, Read, Show)
    deriving newtype (Storable,
                      Bits,
                      Bounded,
                      Enum,
                      FiniteBits,
                      Integral,
                      Ix,
                      Num,
                      Real)
{-|

  > extern int global_counter

  Global counter variable

  This variable tracks the number of operations performed.

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_7c3b3bc7cc470742" global_counter_ptr :: Ptr CInt
{-|

  > extern const char* version_string

  Version string constant

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_a8499810bd5203c6" version_string_ptr :: Ptr (Ptr CChar)
{-| This is the comment @title@

  Forward declaration with documentation

-}
data Forward_declared_struct
{-|

  Forward declaration of union

-}
data Forward_declared_union
{-|

  > color_enum

  Color enumeration without typedef

-}
newtype Color_enum
    = Color_enum {un_Color_enum :: CUInt}
      {- ^

         > color_enum

         Color enumeration without typedef

      -}
    deriving stock (Eq, Ord)
instance Storable Color_enum
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> pure Color_enum <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Color_enum un_Color_enum_3 -> pokeByteOff ptr_1 (0 :: Int) un_Color_enum_3
instance CEnum Color_enum
    where type CEnumZ Color_enum = CUInt
          toCEnum = Color_enum
          fromCEnum = un_Color_enum
          declaredValues = \_ -> declaredValuesFromList [(0,
                                                          singleton "COLOR_RED"),
                                                         (1, singleton "COLOR_GREEN"),
                                                         (2, singleton "COLOR_BLUE")]
          showsUndeclared = showsWrappedUndeclared "Color_enum"
          readPrecUndeclared = readPrecWrappedUndeclared "Color_enum"
          isDeclared = seqIsDeclared
          mkDeclared = seqMkDeclared
instance SequentialCEnum Color_enum
    where minDeclaredValue = COLOR_RED
          maxDeclaredValue = COLOR_BLUE
instance Show Color_enum
    where showsPrec = showsCEnum
instance Read Color_enum
    where readPrec = readPrecCEnum
          readList = readListDefault
          readListPrec = readListPrecDefault
{-| Red color

-}
pattern COLOR_RED :: Color_enum
{-| Red color

-}
pattern COLOR_RED = Color_enum 0
{-| Green color

-}
pattern COLOR_GREEN :: Color_enum
{-| Green color

-}
pattern COLOR_GREEN = Color_enum 1
{-| Blue color

-}
pattern COLOR_BLUE :: Color_enum
{-| Blue color

-}
pattern COLOR_BLUE = Color_enum 2
{-|

  Function with detailed parameter documentation

  This function shows different parameter directions and types.

  [__@input_data@ /(input)/__]: Input data buffer

  [__@output_data@ /(output)/__]: Output data buffer

  [__@size@ /(input,output)/__]: Size of data, updated on return

  __returns:__ Status code (0 = success, -1 = error)

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_d3011436e073569c" process_data :: Ptr HsBindgen.Runtime.Prelude.Word8 ->
                                                                                          Ptr HsBindgen.Runtime.Prelude.Word8 ->
                                                                                          Ptr HsBindgen.Runtime.Prelude.CSize ->
                                                                                          IO CInt
{-|

  Function with inline commands and formatting

  This function uses @inline@ @code@ formatting and __bold__ text. It also demonstrates /emphasized/ text.

  [__@filename@ /(input)/__]: The @char*@ filename to process

  __returns:__ @true@ if successful, @false@ otherwise

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_4e9b999ed81440c0" process_file :: Ptr CChar ->
                                                                                          IO CBool
{-|

  Function with verbatim code blocks

  Example usage:

  @
  int result = calculate_value(10, 20);
  printf("Result: %d@n", result);
  @

  [__@base@ /(input)/__]: Base value

  [__@multiplier@ /(input)/__]: Multiplier value

  __returns:__ Calculated result

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_788bfbb9e824261c" calculate_value :: CInt ->
                                                                                             CInt ->
                                                                                             IO CInt
{-|

  Function with HTML formatting

  This function demonstrates HTML bold and italic text. It also shows HTML code formatting.

  Input Output 0 false 1 true

  [__@value@ /(input)/__]: Input value

  __returns:__ Boolean result

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_3763cc54606bc611" html_example :: CInt ->
                                                                                          IO CBool
{-|

  Function with lists and special formatting

  This function demonstrates:

  * Bullet point lists

  * Nested list item 1

  * Nested list item 2

  * Multiple items

  * Nested formatting

  Numbered list:

  1. First @item@

  1. item

  2. Second __item__

  3. Third item

  Other numbered list:

  1. A

  2. B

  3. C

  [__@items@ /(input)/__]: Array of items

  [__@count@ /(input)/__]: Number of items

  __returns:__ Success status

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_9d6d039971edcd60" list_example :: Ptr (Ptr CChar) ->
                                                                                          HsBindgen.Runtime.Prelude.CSize ->
                                                                                          IO CBool
{-|

  Function with warnings and notes

  __/WARNING:/__ This function may cause side effects

  __Note:__ Use with caution in multithreaded environments

  __see:__ related_function() for similar functionality

  [__@ptr@ /(input)/__]: Pointer to data

  __returns:__ Modified pointer

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_b9c683fb9a695cc9" dangerous_function :: Ptr Void ->
                                                                                                IO (Ptr Void)
{-|

  Function with return value details

  [__@input@ /(input)/__]: Input string

  __returns:__ 0 Success

  __returns:__ -1 Invalid input

  __returns:__ -2 Memory allocation failed

  __returns:__ -3 Processing error

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_fb3e3158714e01f5" detailed_return_codes :: Ptr CChar ->
                                                                                                   IO CInt
{-|

  Function with deprecated annotation

  __deprecated:__ Use new_function() instead

  [__@old_param@ /(input)/__]: Legacy parameter

  __returns:__ Legacy result

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_84140a44d1bd8380" old_function :: CInt ->
                                                                                          IO CInt
{-|

  Function with version information

  @since:  1.0

  [__@data@ /(input)/__]: Input data

  __returns:__ Processed data

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_7549924ba8d1e7b8" versioned_function :: CInt ->
                                                                                                IO CInt
{-|

  Callback function type

  [__@event_type@ /(input)/__]: Type of event

  [__@user_data@ /(input)/__]: User-provided data

  __returns:__ Handling result

-}
newtype Event_callback_t
    = Event_callback_t {un_Event_callback_t :: (FunPtr (CInt ->
                                                        Ptr Void -> IO CInt))}
      {- ^

         Callback function type

         [__@event_type@ /(input)/__]: Type of event

         [__@user_data@ /(input)/__]: User-provided data

         __returns:__ Handling result

      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-|

  Structure with documented fields

  This structure demonstrates field documentation.

-}
data Config_t
    = Config_t {config_t_id :: HsBindgen.Runtime.Prelude.Word32
                {- ^

                   Unique identifier

                -},
                config_t_name :: (ConstantArray 64 CChar)
                {- ^

                   Human-readable name

                -},
                config_t_flags :: HsBindgen.Runtime.Prelude.Word32
                {- ^

                   Configuration flags

                -},
                config_t_callback :: Event_callback_t
                {- ^

                   Optional callback function

                   See also: 'Event_callback_t'

                -},
                config_t_user_data :: (Ptr Void)
                {- ^

                   User data for callback

                -}}
      {- ^

         Structure with documented fields

         This structure demonstrates field documentation.

      -}
    deriving stock (Eq, Show)
instance Storable Config_t
    where sizeOf = \_ -> 88 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> ((((pure Config_t <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (4 :: Int)) <*> peekByteOff ptr_0 (68 :: Int)) <*> peekByteOff ptr_0 (72 :: Int)) <*> peekByteOff ptr_0 (80 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Config_t config_t_id_3
                                            config_t_name_4
                                            config_t_flags_5
                                            config_t_callback_6
                                            config_t_user_data_7 -> pokeByteOff ptr_1 (0 :: Int) config_t_id_3 >> (pokeByteOff ptr_1 (4 :: Int) config_t_name_4 >> (pokeByteOff ptr_1 (68 :: Int) config_t_flags_5 >> (pokeByteOff ptr_1 (72 :: Int) config_t_callback_6 >> pokeByteOff ptr_1 (80 :: Int) config_t_user_data_7)))
{-|

  Enumeration with documented values

  This enum shows different status codes.

-}
newtype Status_code_t
    = Status_code_t {un_Status_code_t :: CInt}
      {- ^

         Enumeration with documented values

         This enum shows different status codes.

      -}
    deriving stock (Eq, Ord)
instance Storable Status_code_t
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> pure Status_code_t <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Status_code_t un_Status_code_t_3 -> pokeByteOff ptr_1 (0 :: Int) un_Status_code_t_3
instance CEnum Status_code_t
    where type CEnumZ Status_code_t = CInt
          toCEnum = Status_code_t
          fromCEnum = un_Status_code_t
          declaredValues = \_ -> declaredValuesFromList [(-99,
                                                          singleton "STATUS_ERROR"),
                                                         (-3, singleton "STATUS_TIMEOUT"),
                                                         (-2, singleton "STATUS_NO_MEMORY"),
                                                         (-1, singleton "STATUS_INVALID_PARAM"),
                                                         (0, singleton "STATUS_OK")]
          showsUndeclared = showsWrappedUndeclared "Status_code_t"
          readPrecUndeclared = readPrecWrappedUndeclared "Status_code_t"
instance Show Status_code_t
    where showsPrec = showsCEnum
instance Read Status_code_t
    where readPrec = readPrecCEnum
          readList = readListDefault
          readListPrec = readListPrecDefault
{-|

  Operation successful

-}
pattern STATUS_OK :: Status_code_t
{-|

  Operation successful

-}
pattern STATUS_OK = Status_code_t 0
{-|

  Invalid parameter provided

-}
pattern STATUS_INVALID_PARAM :: Status_code_t
{-|

  Invalid parameter provided

-}
pattern STATUS_INVALID_PARAM = Status_code_t (-1)
{-|

  Memory allocation failed

-}
pattern STATUS_NO_MEMORY :: Status_code_t
{-|

  Memory allocation failed

-}
pattern STATUS_NO_MEMORY = Status_code_t (-2)
{-|

  Operation timed out

-}
pattern STATUS_TIMEOUT :: Status_code_t
{-|

  Operation timed out

-}
pattern STATUS_TIMEOUT = Status_code_t (-3)
{-|

  Generic error

-}
pattern STATUS_ERROR :: Status_code_t
{-|

  Generic error

-}
pattern STATUS_ERROR = Status_code_t (-99)
{-|

  Structured representation

  Allows access to high and low parts separately

-}
data Data_union_t_as_parts
    = Data_union_t_as_parts {data_union_t_as_parts_low :: HsBindgen.Runtime.Prelude.Word16
                             {- ^

                                Low 16 bits

                             -},
                             data_union_t_as_parts_high :: HsBindgen.Runtime.Prelude.Word16
                             {- ^

                                High 16 bits

                             -}}
      {- ^

         Structured representation

         Allows access to high and low parts separately

      -}
    deriving stock (Eq, Show)
instance Storable Data_union_t_as_parts
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 2 :: Int
          peek = \ptr_0 -> (pure Data_union_t_as_parts <*> peekByteOff ptr_0 (0 :: Int)) <*> peekByteOff ptr_0 (2 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Data_union_t_as_parts data_union_t_as_parts_low_3
                                                         data_union_t_as_parts_high_4 -> pokeByteOff ptr_1 (0 :: Int) data_union_t_as_parts_low_3 >> pokeByteOff ptr_1 (2 :: Int) data_union_t_as_parts_high_4
{-|

  > data_union_t

  Union with documented fields

  This union demonstrates different data representations.

-}
newtype Data_union_t
    = Data_union_t {un_Data_union_t :: ByteArray}
      {- ^

         > data_union_t

         Union with documented fields

         This union demonstrates different data representations.

      -}
deriving via (SizedByteArray 4 4) instance Storable Data_union_t
{-|

  Integer representation

  __See:__ 'set_data_union_t_as_int'

-}
get_data_union_t_as_int :: Data_union_t ->
                           HsBindgen.Runtime.Prelude.Int32
{-|

  Integer representation

  __See:__ 'set_data_union_t_as_int'

-}
get_data_union_t_as_int = getUnionPayload
{-|

  __See:__ 'get_data_union_t_as_int'

-}
set_data_union_t_as_int :: HsBindgen.Runtime.Prelude.Int32 ->
                           Data_union_t
{-|

  __See:__ 'get_data_union_t_as_int'

-}
set_data_union_t_as_int = setUnionPayload
{-|

  Float representation

  __See:__ 'set_data_union_t_as_float'

-}
get_data_union_t_as_float :: Data_union_t -> CFloat
{-|

  Float representation

  __See:__ 'set_data_union_t_as_float'

-}
get_data_union_t_as_float = getUnionPayload
{-|

  __See:__ 'get_data_union_t_as_float'

-}
set_data_union_t_as_float :: CFloat -> Data_union_t
{-|

  __See:__ 'get_data_union_t_as_float'

-}
set_data_union_t_as_float = setUnionPayload
{-|

  Byte array representation

  __See:__ 'set_data_union_t_as_bytes'

-}
get_data_union_t_as_bytes :: Data_union_t ->
                             ConstantArray 4 HsBindgen.Runtime.Prelude.Word8
{-|

  Byte array representation

  __See:__ 'set_data_union_t_as_bytes'

-}
get_data_union_t_as_bytes = getUnionPayload
{-|

  __See:__ 'get_data_union_t_as_bytes'

-}
set_data_union_t_as_bytes :: ConstantArray 4
                                           HsBindgen.Runtime.Prelude.Word8 ->
                             Data_union_t
{-|

  __See:__ 'get_data_union_t_as_bytes'

-}
set_data_union_t_as_bytes = setUnionPayload
{-| As Parts Struct

  __See:__ 'set_data_union_t_as_parts'

-}
get_data_union_t_as_parts :: Data_union_t -> Data_union_t_as_parts
{-| As Parts Struct

  __See:__ 'set_data_union_t_as_parts'

-}
get_data_union_t_as_parts = getUnionPayload
{-|

  __See:__ 'get_data_union_t_as_parts'

-}
set_data_union_t_as_parts :: Data_union_t_as_parts -> Data_union_t
{-|

  __See:__ 'get_data_union_t_as_parts'

-}
set_data_union_t_as_parts = setUnionPayload
{-|

  > bitfield_t

  Bit field structure

  Demonstrates bit field documentation.

-}
data Bitfield_t
    = Bitfield_t {bitfield_t_flag1 :: CUInt
                  {- ^

                     First flag (1 bit)

                  -},
                  bitfield_t_flag2 :: CUInt
                  {- ^

                     Second flag (1 bit)

                  -},
                  bitfield_t_counter :: CUInt
                  {- ^

                     Counter value (6 bits)

                  -},
                  bitfield_t_reserved :: CUInt
                  {- ^

                     Reserved bits (24 bits)

                  -}}
      {- ^

         > bitfield_t

         Bit field structure

         Demonstrates bit field documentation.

      -}
    deriving stock (Eq, Show)
instance Storable Bitfield_t
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> (((pure Bitfield_t <*> peekBitOffWidth ptr_0 (0 :: Int) (1 :: Int)) <*> peekBitOffWidth ptr_0 (1 :: Int) (1 :: Int)) <*> peekBitOffWidth ptr_0 (2 :: Int) (6 :: Int)) <*> peekBitOffWidth ptr_0 (8 :: Int) (24 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Bitfield_t bitfield_t_flag1_3
                                              bitfield_t_flag2_4
                                              bitfield_t_counter_5
                                              bitfield_t_reserved_6 -> pokeBitOffWidth ptr_1 (0 :: Int) (1 :: Int) bitfield_t_flag1_3 >> (pokeBitOffWidth ptr_1 (1 :: Int) (1 :: Int) bitfield_t_flag2_4 >> (pokeBitOffWidth ptr_1 (2 :: Int) (6 :: Int) bitfield_t_counter_5 >> pokeBitOffWidth ptr_1 (8 :: Int) (24 :: Int) bitfield_t_reserved_6))
{-|

  > processor_fn_t

  Function pointer typedef

  [__@input@ /(input)/__]: Input value

  [__@context@ /(input)/__]: Context pointer

  __returns:__ Processed value

-}
newtype Processor_fn_t
    = Processor_fn_t {un_Processor_fn_t :: (FunPtr (CInt ->
                                                    Ptr Void -> IO CInt))}
      {- ^

         > processor_fn_t

         Function pointer typedef

         [__@input@ /(input)/__]: Input value

         [__@context@ /(input)/__]: Context pointer

         __returns:__ Processed value

      -}
    deriving stock (Eq, Ord, Show)
    deriving newtype Storable
{-|

  > filename_t

  Array typedef with size

-}
newtype Filename_t
    = Filename_t {un_Filename_t :: (ConstantArray 256 CChar)}
      {- ^

         > filename_t

         Array typedef with size

      -}
    deriving stock (Eq, Show)
    deriving newtype Storable
{-|

  Static array parameter

  [__@buffer@ /(input)/__]: Buffer with minimum size

  [__@size@ /(input)/__]: Actual buffer size

  __returns:__ Number of bytes written

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_1ce818d0ed47ea3e" process_buffer_wrapper :: Ptr CChar ->
                                                                                                    HsBindgen.Runtime.Prelude.CSize ->
                                                                                                    IO CInt
process_buffer :: ConstantArray 64 CChar ->
                  HsBindgen.Runtime.Prelude.CSize -> IO CInt
process_buffer = \x_0 -> \x_1 -> withPtr x_0 (\ptr_2 -> process_buffer_wrapper ptr_2 x_1)
{-|

  Function with restrict pointers

  [__@dest@ /(input)/__]: Destination buffer (restrict)

  [__@src@ /(input)/__]: Source buffer (restrict)

  [__@n@ /(input)/__]: Number of bytes

  __returns:__ Destination pointer

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_bcbe640b60445a4f" my_memcpy :: Ptr Void ->
                                                                                       Ptr Void ->
                                                                                       HsBindgen.Runtime.Prelude.CSize ->
                                                                                       IO (Ptr Void)
{-|

  Inline function

  [__@x@ /(input)/__]: Input value

  __returns:__ Doubled value

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_1c952f01cc07bb64" double_value :: CInt ->
                                                                                          IO CInt
{-|

  Function with flexible array member

  [__@count@ /(input)/__]: Number of elements

  __returns:__ Allocated structure

-}
data Flexible_array
    = Flexible_array {flexible_array_count :: HsBindgen.Runtime.Prelude.CSize
                      {- ^

                         Number of elements

                      -}}
      {- ^

         Function with flexible array member

         [__@count@ /(input)/__]: Number of elements

         __returns:__ Allocated structure

      -}
    deriving stock (Eq, Show)
instance Storable Flexible_array
    where sizeOf = \_ -> 8 :: Int
          alignment = \_ -> 8 :: Int
          peek = \ptr_0 -> pure Flexible_array <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   Flexible_array flexible_array_count_3 -> pokeByteOff ptr_1 (0 :: Int) flexible_array_count_3
instance HasFlexibleArrayMember CInt Flexible_array
    where flexibleArrayMemberOffset = \_ty_0 -> 8
{-|

  Function with complex documentation

  This function demonstrates multiple documentation features:

  __Description:__

  Performs complex data processing with multiple steps.

  __Algorithm:__

  10. Validate input parameters

  200. Allocate temporary buffers

  3000. Process data in chunks

  41235. Clean up resources

  __Algorithm2:__

  * Validate input parameters

  * Allocate temporary buffers

  * Process data in chunks

  * Clean up resources

  __Example:__

  @
  config_t cfg = {
  .id = 1,
  .name = "test",
  .flags = 0,
  .callback = my_callback,
  .user_data = NULL
  };

  status_code_t result = complex_function(&cfg, data, size);
  if (result != STATUS_OK) {
  handle_error(result);
  }
  @

  [__@config@ /(input)/__]: Configuration structure (see 'Config_t' )

  [__@data@ /(input)/__]: Input data buffer

  [__@size@ /(input)/__]: Size of input data

  __returns:__ Status code indicating success or failure

  __pre condition:__ config must not be NULL

  __pre condition:__ data must not be NULL if size > 0

  __post condition:__ Output data is written to config->user_data

  __/WARNING:/__ May return NULL if memory allocation fails

  __/WARNING:/__ Sets errno to EINVAL if parameters are invalid

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_a9d86cb54c7498fe" complex_function :: Ptr Config_t ->
                                                                                              Ptr HsBindgen.Runtime.Prelude.Word8 ->
                                                                                              HsBindgen.Runtime.Prelude.CSize ->
                                                                                              IO Status_code_t
{-|

  Marked @__attribute((pure))__@

-}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_71214e4420f53a0e" hash :: Ptr CChar ->
                                                                                  IO CInt
{-| -}
foreign import ccall safe "hs_bindgen_test_doxygen_docs_8effe939268709e4" square :: CInt ->
                                                                                    CInt
