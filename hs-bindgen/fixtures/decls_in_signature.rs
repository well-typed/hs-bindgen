/* automatically generated by rust-bindgen 0.71.1 */

/// If Bindgen could only determine the size and alignment of a
/// type, it is represented like this.
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct opaque {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct outside {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of outside"][::std::mem::size_of::<outside>() - 8usize];
    ["Alignment of outside"][::std::mem::align_of::<outside>() - 4usize];
    ["Offset of field: outside::x"][::std::mem::offset_of!(outside, x) - 0usize];
    ["Offset of field: outside::y"][::std::mem::offset_of!(outside, y) - 4usize];
};
unsafe extern "C" {
    pub fn normal(
        ptr_to_opaque: *mut opaque,
        ptr_to_defined: *mut outside,
        by_value: outside,
    );
}
unsafe extern "C" {
    /** Error cases

 See 'UnexpectedAnonInSignature' for discussion (of both these error cases
 and the edge cases below).*/
    pub fn f1(arg: __BindgenOpaqueArray<u32, 2usize>);
}
unsafe extern "C" {
    pub fn f2(arg: u32);
}
/** Edge cases: these result in warnings from clang, but in principle we can
 generate bindings for these.*/
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_1"][::std::mem::size_of::<_bindgen_ty_1>() - 8usize];
    ["Alignment of _bindgen_ty_1"][::std::mem::align_of::<_bindgen_ty_1>() - 4usize];
    [
        "Offset of field: _bindgen_ty_1::x",
    ][::std::mem::offset_of!(_bindgen_ty_1, x) - 0usize];
    [
        "Offset of field: _bindgen_ty_1::y",
    ][::std::mem::offset_of!(_bindgen_ty_1, y) - 4usize];
};
unsafe extern "C" {
    /** Edge cases: these result in warnings from clang, but in principle we can
 generate bindings for these.*/
    pub fn f3(arg: _bindgen_ty_1);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_2"][::std::mem::size_of::<_bindgen_ty_2>() - 8usize];
    ["Alignment of _bindgen_ty_2"][::std::mem::align_of::<_bindgen_ty_2>() - 4usize];
    [
        "Offset of field: _bindgen_ty_2::x",
    ][::std::mem::offset_of!(_bindgen_ty_2, x) - 0usize];
    [
        "Offset of field: _bindgen_ty_2::y",
    ][::std::mem::offset_of!(_bindgen_ty_2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_3"][::std::mem::size_of::<_bindgen_ty_3>() - 8usize];
    ["Alignment of _bindgen_ty_3"][::std::mem::align_of::<_bindgen_ty_3>() - 4usize];
    [
        "Offset of field: _bindgen_ty_3::x",
    ][::std::mem::offset_of!(_bindgen_ty_3, x) - 0usize];
    [
        "Offset of field: _bindgen_ty_3::y",
    ][::std::mem::offset_of!(_bindgen_ty_3, y) - 4usize];
};
unsafe extern "C" {
    pub fn f4(p1: _bindgen_ty_2, p2: _bindgen_ty_3);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _bindgen_ty_4 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_4"][::std::mem::size_of::<_bindgen_ty_4>() - 4usize];
    ["Alignment of _bindgen_ty_4"][::std::mem::align_of::<_bindgen_ty_4>() - 4usize];
    [
        "Offset of field: _bindgen_ty_4::x",
    ][::std::mem::offset_of!(_bindgen_ty_4, x) - 0usize];
    [
        "Offset of field: _bindgen_ty_4::y",
    ][::std::mem::offset_of!(_bindgen_ty_4, y) - 0usize];
};
unsafe extern "C" {
    pub fn f5(arg: _bindgen_ty_4);
}
