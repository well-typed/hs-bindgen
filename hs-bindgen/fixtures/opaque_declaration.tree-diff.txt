TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "opaque_declaration.h:1:8",
        declId = NamePair {
          nameC = Name "foo",
          nameHsIdent = HsIdentifier
            "Foo"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["opaque_declaration.h"],
            headerInclude =
            "opaque_declaration.h"},
        declComment = Nothing},
      declKind = DeclStructOpaque,
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "opaque_declaration.h:4:8",
        declId = NamePair {
          nameC = Name "bar",
          nameHsIdent = HsIdentifier
            "Bar"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["opaque_declaration.h"],
            headerInclude =
            "opaque_declaration.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName "@NsConstr" "Bar"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "opaque_declaration.h:5:17",
                fieldName = NamePair {
                  nameC = Name "ptrA",
                  nameHsIdent = HsIdentifier
                    "bar_ptrA"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "foo",
                    nameHsIdent = HsIdentifier
                      "Foo"}
                  NameOriginInSource),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldInfo = FieldInfo {
                fieldLoc =
                "opaque_declaration.h:6:17",
                fieldName = NamePair {
                  nameC = Name "ptrB",
                  nameHsIdent = HsIdentifier
                    "bar_ptrB"},
                fieldComment = Nothing},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = Name "bar",
                    nameHsIdent = HsIdentifier
                      "Bar"}
                  NameOriginInSource),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "opaque_declaration.h:9:8",
        declId = NamePair {
          nameC = Name "baz",
          nameHsIdent = HsIdentifier
            "Baz"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["opaque_declaration.h"],
            headerInclude =
            "opaque_declaration.h"},
        declComment = Nothing},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName "@NsConstr" "Baz"),
          structSizeof = 0,
          structAlignment = 1,
          structFields = [],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "opaque_declaration.h:11:6",
        declId = NamePair {
          nameC = Name "quu",
          nameHsIdent = HsIdentifier
            "Quu"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["opaque_declaration.h"],
            headerInclude =
            "opaque_declaration.h"},
        declComment = Nothing},
      declKind = DeclEnumOpaque,
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "opaque_declaration.h:13:7",
        declId = NamePair {
          nameC = Name "opaque_union",
          nameHsIdent = HsIdentifier
            "Opaque_union"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["opaque_declaration.h"],
            headerInclude =
            "opaque_declaration.h"},
        declComment = Nothing},
      declKind = DeclUnionOpaque,
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = [
    "opaque_declaration"]}
