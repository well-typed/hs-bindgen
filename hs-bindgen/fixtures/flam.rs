/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct pascal {
    pub len: ::std::os::raw::c_int,
    pub data: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pascal"][::std::mem::size_of::<pascal>() - 4usize];
    ["Alignment of pascal"][::std::mem::align_of::<pascal>() - 4usize];
    ["Offset of field: pascal::len"][::std::mem::offset_of!(pascal, len) - 0usize];
    ["Offset of field: pascal::data"][::std::mem::offset_of!(pascal, data) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct foo {
    pub len: ::std::os::raw::c_int,
    pub bar: __IncompleteArrayField<foo__bindgen_ty_1>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct foo__bindgen_ty_1 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of foo__bindgen_ty_1"][::std::mem::size_of::<foo__bindgen_ty_1>() - 8usize];
    [
        "Alignment of foo__bindgen_ty_1",
    ][::std::mem::align_of::<foo__bindgen_ty_1>() - 4usize];
    [
        "Offset of field: foo__bindgen_ty_1::x",
    ][::std::mem::offset_of!(foo__bindgen_ty_1, x) - 0usize];
    [
        "Offset of field: foo__bindgen_ty_1::y",
    ][::std::mem::offset_of!(foo__bindgen_ty_1, y) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of foo"][::std::mem::size_of::<foo>() - 4usize];
    ["Alignment of foo"][::std::mem::align_of::<foo>() - 4usize];
    ["Offset of field: foo::len"][::std::mem::offset_of!(foo, len) - 0usize];
    ["Offset of field: foo::bar"][::std::mem::offset_of!(foo, bar) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct diff {
    pub first: ::std::os::raw::c_long,
    pub second: ::std::os::raw::c_char,
    pub flam: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of diff"][::std::mem::size_of::<diff>() - 16usize];
    ["Alignment of diff"][::std::mem::align_of::<diff>() - 8usize];
    ["Offset of field: diff::first"][::std::mem::offset_of!(diff, first) - 0usize];
    ["Offset of field: diff::second"][::std::mem::offset_of!(diff, second) - 8usize];
    ["Offset of field: diff::flam"][::std::mem::offset_of!(diff, flam) - 9usize];
};
