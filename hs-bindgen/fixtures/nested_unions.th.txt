-- addDependentFile examples/golden/nested_unions.h
{-| __C declaration:__ @unionA@

    __defined at:__ @nested_unions.h:2:15@

    __exported by:__ @nested_unions.h@
-}
newtype UnionA
    = UnionA {un_UnionA :: ByteArray}
      {- ^ __C declaration:__ @unionA@

           __defined at:__ @nested_unions.h:2:15@

           __exported by:__ @nested_unions.h@
      -}
deriving via (SizedByteArray 4 4) instance Storable UnionA
{-|

  __See:__ 'set_unionA_a'

__C declaration:__ @a@

__defined at:__ @nested_unions.h:3:21@

__exported by:__ @nested_unions.h@
-}
get_unionA_a :: UnionA -> CInt
{-|

  __See:__ 'set_unionA_a'

__C declaration:__ @a@

__defined at:__ @nested_unions.h:3:21@

__exported by:__ @nested_unions.h@
-}
get_unionA_a = getUnionPayload
{-|

  __See:__ 'get_unionA_a'

-}
set_unionA_a :: CInt -> UnionA
{-|

  __See:__ 'get_unionA_a'

-}
set_unionA_a = setUnionPayload
{-|

  __See:__ 'set_unionA_b'

__C declaration:__ @b@

__defined at:__ @nested_unions.h:4:22@

__exported by:__ @nested_unions.h@
-}
get_unionA_b :: UnionA -> CChar
{-|

  __See:__ 'set_unionA_b'

__C declaration:__ @b@

__defined at:__ @nested_unions.h:4:22@

__exported by:__ @nested_unions.h@
-}
get_unionA_b = getUnionPayload
{-|

  __See:__ 'get_unionA_b'

-}
set_unionA_b :: CChar -> UnionA
{-|

  __See:__ 'get_unionA_b'

-}
set_unionA_b = setUnionPayload
{-| __C declaration:__ @exA@

    __defined at:__ @nested_unions.h:1:8@

    __exported by:__ @nested_unions.h@
-}
data ExA
    = ExA {exA_fieldA1 :: UnionA
           {- ^ __C declaration:__ @fieldA1@

                __defined at:__ @nested_unions.h:5:11@

                __exported by:__ @nested_unions.h@
           -}}
      {- ^ __C declaration:__ @exA@

           __defined at:__ @nested_unions.h:1:8@

           __exported by:__ @nested_unions.h@
      -}
instance Storable ExA
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> pure ExA <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   ExA exA_fieldA1_3 -> pokeByteOff ptr_1 (0 :: Int) exA_fieldA1_3
{-| __defined at:__ @nested_unions.h:9:9@

    __exported by:__ @nested_unions.h@
-}
newtype ExB_fieldB1
    = ExB_fieldB1 {un_ExB_fieldB1 :: ByteArray}
      {- ^ __defined at:__ @nested_unions.h:9:9@

           __exported by:__ @nested_unions.h@
      -}
deriving via (SizedByteArray 4 4) instance Storable ExB_fieldB1
{-|

  __See:__ 'set_exB_fieldB1_a'

__C declaration:__ @a@

__defined at:__ @nested_unions.h:10:21@

__exported by:__ @nested_unions.h@
-}
get_exB_fieldB1_a :: ExB_fieldB1 -> CInt
{-|

  __See:__ 'set_exB_fieldB1_a'

__C declaration:__ @a@

__defined at:__ @nested_unions.h:10:21@

__exported by:__ @nested_unions.h@
-}
get_exB_fieldB1_a = getUnionPayload
{-|

  __See:__ 'get_exB_fieldB1_a'

-}
set_exB_fieldB1_a :: CInt -> ExB_fieldB1
{-|

  __See:__ 'get_exB_fieldB1_a'

-}
set_exB_fieldB1_a = setUnionPayload
{-|

  __See:__ 'set_exB_fieldB1_b'

__C declaration:__ @b@

__defined at:__ @nested_unions.h:11:22@

__exported by:__ @nested_unions.h@
-}
get_exB_fieldB1_b :: ExB_fieldB1 -> CChar
{-|

  __See:__ 'set_exB_fieldB1_b'

__C declaration:__ @b@

__defined at:__ @nested_unions.h:11:22@

__exported by:__ @nested_unions.h@
-}
get_exB_fieldB1_b = getUnionPayload
{-|

  __See:__ 'get_exB_fieldB1_b'

-}
set_exB_fieldB1_b :: CChar -> ExB_fieldB1
{-|

  __See:__ 'get_exB_fieldB1_b'

-}
set_exB_fieldB1_b = setUnionPayload
{-| __C declaration:__ @exB@

    __defined at:__ @nested_unions.h:8:8@

    __exported by:__ @nested_unions.h@
-}
data ExB
    = ExB {exB_fieldB1 :: ExB_fieldB1
           {- ^ __C declaration:__ @fieldB1@

                __defined at:__ @nested_unions.h:12:11@

                __exported by:__ @nested_unions.h@
           -}}
      {- ^ __C declaration:__ @exB@

           __defined at:__ @nested_unions.h:8:8@

           __exported by:__ @nested_unions.h@
      -}
instance Storable ExB
    where sizeOf = \_ -> 4 :: Int
          alignment = \_ -> 4 :: Int
          peek = \ptr_0 -> pure ExB <*> peekByteOff ptr_0 (0 :: Int)
          poke = \ptr_1 -> \s_2 -> case s_2 of
                                   ExB exB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) exB_fieldB1_3
