-- addDependentFile examples/nested_unions.h
newtype UnionA = UnionA {un_UnionA :: ByteArray}
deriving via (SizedByteArray 4 4) instance Storable UnionA
get_unionA_a :: UnionA -> CInt
get_unionA_a = getUnionPayload
set_unionA_a :: CInt -> UnionA
set_unionA_a = setUnionPayload
get_unionA_b :: UnionA -> CChar
get_unionA_b = getUnionPayload
set_unionA_b :: CChar -> UnionA
set_unionA_b = setUnionPayload
data ExA = ExA {exA_fieldA1 :: UnionA}
instance Storable ExA
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExA <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExA exA_fieldA1_3 -> pokeByteOff ptr_1 (0 :: Int) exA_fieldA1_3}}
deriving stock instance Show ExA
deriving stock instance Eq ExA
newtype ExB_fieldB1 = ExB_fieldB1 {un_ExB_fieldB1 :: ByteArray}
deriving via (SizedByteArray 4 4) instance Storable ExB_fieldB1
get_exB_fieldB1_a :: ExB_fieldB1 -> CInt
get_exB_fieldB1_a = getUnionPayload
set_exB_fieldB1_a :: CInt -> ExB_fieldB1
set_exB_fieldB1_a = setUnionPayload
get_exB_fieldB1_b :: ExB_fieldB1 -> CChar
get_exB_fieldB1_b = getUnionPayload
set_exB_fieldB1_b :: CChar -> ExB_fieldB1
set_exB_fieldB1_b = setUnionPayload
data ExB = ExB {exB_fieldB1 :: ExB_fieldB1}
instance Storable ExB
    where {sizeOf = \_ -> 4 :: Int;
           alignment = \_ -> 4 :: Int;
           peek = \ptr_0 -> pure ExB <*> peekByteOff ptr_0 (0 :: Int);
           poke = \ptr_1 -> \s_2 -> case s_2 of
                                    {ExB exB_fieldB1_3 -> pokeByteOff ptr_1 (0 :: Int) exB_fieldB1_3}}
deriving stock instance Show ExB
deriving stock instance Eq ExB
