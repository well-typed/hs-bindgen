TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:7:9",
        declId = NamePair {
          nameC = Name "FILE",
          nameHsIdent = HsIdentifier
            "FILE"},
        declOrigin = NameOriginGenerated
          (AnonId "fun_attributes.h:7:9"),
        declAliases = [Name "FILE"],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName "@NsConstr" "FILE"),
          structSizeof = 0,
          structAlignment = 1,
          structFields = [],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:8:13",
        declId = NamePair {
          nameC = Name "size_t",
          nameHsIdent = HsIdentifier
            "Size_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Size_t",
            newtypeField = HsName
              "@NsVar"
              "un_Size_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:16:6",
        declId = NamePair {
          nameC = Name "__f1",
          nameHsIdent = HsIdentifier
            "__f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:17:6",
        declId = NamePair {
          nameC = Name "f1",
          nameHsIdent = HsIdentifier
            "f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:21:7",
        declId = NamePair {
          nameC = Name "my_memalign",
          nameHsIdent = HsIdentifier
            "my_memalign"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"}),
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:26:7",
        declId = NamePair {
          nameC = Name "my_calloc",
          nameHsIdent = HsIdentifier
            "my_calloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"}),
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:27:7",
        declId = NamePair {
          nameC = Name "my_realloc",
          nameHsIdent = HsIdentifier
            "my_realloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer TypeVoid,
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:32:7",
        declId = NamePair {
          nameC = Name "my_alloc1",
          nameHsIdent = HsIdentifier
            "my_alloc1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:33:7",
        declId = NamePair {
          nameC = Name "my_alloc2",
          nameHsIdent = HsIdentifier
            "my_alloc2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:37:5",
        declId = NamePair {
          nameC = Name "square",
          nameHsIdent = HsIdentifier
            "square"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePrim
              (PrimIntegral PrimInt Signed)],
          functionAttrs =
          FunctionAttributes
            HaskellPureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:46:5",
        declId = NamePair {
          nameC = Name "old_fn",
          nameHsIdent = HsIdentifier
            "old_fn"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:57:1",
        declId = NamePair {
          nameC = Name "my_dgettext",
          nameHsIdent = HsIdentifier
            "my_dgettext"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer
              (TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed)))),
            TypePointer
              (TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypePrim
              (PrimChar
                (PrimSignImplicit
                  (Just Signed))))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:68:9",
        declId = NamePair {
          nameC = Name "fdopen",
          nameHsIdent = HsIdentifier
            "fdopen"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePrim
              (PrimIntegral PrimInt Signed),
            TypePointer
              (TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefSquashed
                (Name "FILE")
                (TypeStruct
                  NamePair {
                    nameC = Name "FILE",
                    nameHsIdent = HsIdentifier
                      "FILE"}
                  (NameOriginGenerated
                    (AnonId
                      "fun_attributes.h:7:9")))))},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:72:65",
        declId = NamePair {
          nameC = Name "f2",
          nameHsIdent = HsIdentifier
            "f2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:78:1",
        declId = NamePair {
          nameC = Name "my_memcpy",
          nameHsIdent = HsIdentifier
            "my_memcpy"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer TypeVoid,
            TypePointer TypeVoid,
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:95:6",
        declId = NamePair {
          nameC = Name "fatal",
          nameHsIdent = HsIdentifier
            "fatal"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:103:5",
        declId = NamePair {
          nameC = Name "hash",
          nameHsIdent = HsIdentifier
            "hash"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypePointer
              (TypePrim
                (PrimChar
                  (PrimSignImplicit
                    (Just Signed))))],
          functionAttrs =
          FunctionAttributes
            CPureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:108:1",
        declId = NamePair {
          nameC = Name "mymalloc",
          nameHsIdent = HsIdentifier
            "mymalloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [
            TypeTypedef
              (TypedefRegular
                NamePair {
                  nameC = Name "size_t",
                  nameHsIdent = HsIdentifier
                    "Size_t"})],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:112:13",
        declId = NamePair {
          nameC = Name "foobar",
          nameHsIdent = HsIdentifier
            "foobar"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:119:5",
        declId = NamePair {
          nameC = Name "core2_func",
          nameHsIdent = HsIdentifier
            "core2_func"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:120:5",
        declId = NamePair {
          nameC = Name "sse3_func",
          nameHsIdent = HsIdentifier
            "sse3_func"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:124:49",
        declId = NamePair {
          nameC = Name "f3",
          nameHsIdent = HsIdentifier
            "f3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:125:5",
        declId = NamePair {
          nameC = Name "i",
          nameHsIdent = HsIdentifier "i"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclExtern
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:129:5",
        declId = NamePair {
          nameC = Name "fn",
          nameHsIdent = HsIdentifier
            "fn"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:135:12",
        declId = NamePair {
          nameC = Name "y",
          nameHsIdent = HsIdentifier "y"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:138:12",
        declId = NamePair {
          nameC = Name "x1",
          nameHsIdent = HsIdentifier
            "x1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:141:12",
        declId = NamePair {
          nameC = Name "x2",
          nameHsIdent = HsIdentifier
            "x2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeader =
        "fun_attributes.h"},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps = ["fun_attributes"]}
