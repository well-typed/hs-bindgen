TranslationUnit {
  unitDecls =
  [
    Decl {
      declInfo =
      DeclInfo {
        declLoc =
        "fun_attributes.h:7:9",
        declId = NamePair {
          nameC = Name "FILE",
          nameHsIdent = Identifier
            "FILE"},
        declOrigin = NameOriginGenerated
          (AnonId "fun_attributes.h:7:9"),
        declAliases = [Name "FILE"],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment =
        Just
          (Comment
            [
              Paragraph
                [
                  TextContent
                    "Attributes on functions"],
              Paragraph
                [
                  TextContent
                    "Examples from https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html"]])},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (Name "@NsConstr" "FILE"),
          structSizeof = 0,
          structAlignment = 1,
          structFields = [],
          structFlam = Nothing},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:8:13",
        declId = NamePair {
          nameC = Name "size_t",
          nameHsIdent = Identifier
            "Size_t"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = Name
              "@NsConstr"
              "Size_t",
            newtypeField = Name
              "@NsVar"
              "un_Size_t"},
          typedefType = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:16:6",
        declId = NamePair {
          nameC = Name "__f1",
          nameHsIdent = Identifier
            "__f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:17:6",
        declId = NamePair {
          nameC = Name "f1",
          nameHsIdent = Identifier "f1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:21:7",
        declId = NamePair {
          nameC = Name "my_memalign",
          nameHsIdent = Identifier
            "my_memalign"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed)))),
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:26:7",
        declId = NamePair {
          nameC = Name "my_calloc",
          nameHsIdent = Identifier
            "my_calloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed)))),
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:27:7",
        declId = NamePair {
          nameC = Name "my_realloc",
          nameHsIdent = Identifier
            "my_realloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypePointer TypeVoid),
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:32:7",
        declId = NamePair {
          nameC = Name "my_alloc1",
          nameHsIdent = Identifier
            "my_alloc1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:33:7",
        declId = NamePair {
          nameC = Name "my_alloc2",
          nameHsIdent = Identifier
            "my_alloc2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:37:5",
        declId = NamePair {
          nameC = Name "square",
          nameHsIdent = Identifier
            "square"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypePrim
                (PrimIntegral PrimInt Signed))],
          functionAttrs =
          FunctionAttributes
            HaskellPureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:46:5",
        declId = NamePair {
          nameC = Name
            "old_fn_deprecated",
          nameHsIdent = Identifier
            "old_fn_deprecated"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:62:1",
        declId = NamePair {
          nameC = Name "my_dgettext",
          nameHsIdent = Identifier
            "my_dgettext"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "my_domain",
                  nameHsIdent = Identifier
                    "my_domain"})
              (TypePointer
                (TypePrim
                  (PrimChar
                    (PrimSignImplicit
                      (Just Signed))))),
            _×_
              (Just
                NamePair {
                  nameC = Name "my_format",
                  nameHsIdent = Identifier
                    "my_format"})
              (TypePointer
                (TypeQualified
                  TypeQualifierConst
                  (TypePrim
                    (PrimChar
                      (PrimSignImplicit
                        (Just Signed))))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypePrim
              (PrimChar
                (PrimSignImplicit
                  (Just Signed))))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:73:9",
        declId = NamePair {
          nameC = Name "fdopen",
          nameHsIdent = Identifier
            "fdopen"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypePrim
                (PrimIntegral PrimInt Signed)),
            _×_
              Nothing
              (TypePointer
                (TypeQualified
                  TypeQualifierConst
                  (TypePrim
                    (PrimChar
                      (PrimSignImplicit
                        (Just Signed))))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            (TypeTypedef
              (TypedefSquashed
                (Name "FILE")
                (TypeStruct
                  NamePair {
                    nameC = Name "FILE",
                    nameHsIdent = Identifier "FILE"}
                  (NameOriginGenerated
                    (AnonId
                      "fun_attributes.h:7:9")))))},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:77:65",
        declId = NamePair {
          nameC = Name "f2",
          nameHsIdent = Identifier "f2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:83:1",
        declId = NamePair {
          nameC = Name "my_memcpy",
          nameHsIdent = Identifier
            "my_memcpy"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "dest",
                  nameHsIdent = Identifier
                    "dest"})
              (TypePointer TypeVoid),
            _×_
              (Just
                NamePair {
                  nameC = Name "src",
                  nameHsIdent = Identifier "src"})
              (TypePointer
                (TypeQualified
                  TypeQualifierConst
                  TypeVoid)),
            _×_
              (Just
                NamePair {
                  nameC = Name "len",
                  nameHsIdent = Identifier "len"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:100:6",
        declId = NamePair {
          nameC = Name "fatal",
          nameHsIdent = Identifier
            "fatal"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:108:5",
        declId = NamePair {
          nameC = Name "hash",
          nameHsIdent = Identifier
            "hash"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              Nothing
              (TypePointer
                (TypePrim
                  (PrimChar
                    (PrimSignImplicit
                      (Just Signed)))))],
          functionAttrs =
          FunctionAttributes
            CPureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:113:1",
        declId = NamePair {
          nameC = Name "mymalloc",
          nameHsIdent = Identifier
            "mymalloc"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [
            _×_
              (Just
                NamePair {
                  nameC = Name "len",
                  nameHsIdent = Identifier "len"})
              (TypeTypedef
                (TypedefRegular
                  NamePair {
                    nameC = Name "size_t",
                    nameHsIdent = Identifier
                      "Size_t"}
                  (TypePrim
                    (PrimIntegral
                      PrimInt
                      Signed))))],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePointer
            TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:117:13",
        declId = NamePair {
          nameC = Name "foobar",
          nameHsIdent = Identifier
            "foobar"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:124:5",
        declId = NamePair {
          nameC = Name "core2_func",
          nameHsIdent = Identifier
            "core2_func"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:125:5",
        declId = NamePair {
          nameC = Name "sse3_func",
          nameHsIdent = Identifier
            "sse3_func"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:129:49",
        declId = NamePair {
          nameC = Name "f3",
          nameHsIdent = Identifier "f3"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypeVoid},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:130:5",
        declId = NamePair {
          nameC = Name "i",
          nameHsIdent = Identifier "i"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclGlobal
        (TypePrim
          (PrimIntegral PrimInt Signed)),
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:134:5",
        declId = NamePair {
          nameC = Name "fn",
          nameHsIdent = Identifier "fn"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:140:12",
        declId = NamePair {
          nameC = Name "y",
          nameHsIdent = Identifier "y"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:143:12",
        declId = NamePair {
          nameC = Name "x1",
          nameHsIdent = Identifier "x1"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "fun_attributes.h:146:12",
        declId = NamePair {
          nameC = Name "x2",
          nameHsIdent = Identifier "x2"},
        declOrigin = NameOriginInSource,
        declAliases = [],
        declHeaderInfo = Just
          HeaderInfo {
            headerMainHeaders = NE.fromList
              ["fun_attributes.h"],
            headerInclude =
            "fun_attributes.h"},
        declComment = Nothing},
      declKind = DeclFunction
        Function {
          functionArgs = [],
          functionAttrs =
          FunctionAttributes
            ImpureFunction,
          functionRes = TypePrim
            (PrimIntegral PrimInt Signed)},
      declSpec = DeclSpec
        CTypeSpec {
          cTypeSpecModule = Nothing,
          cTypeSpecIdentifier = Nothing,
          cTypeSpecInstances =
          Map.fromList []}}],
  unitDeps = ["fun_attributes"]}
