TranslationUnit {
  unitDecls = [
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "recursive_struct.h:1:16",
        declId = NamePair {
          nameC = CName "linked_list_A_s",
          nameHsIdent = HsIdentifier
            "Linked_list_A_s"}},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "Linked_list_A_s"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldLoc =
              "recursive_struct.h:2:7",
              structFieldName = NamePair {
                nameC = CName "x",
                nameHsIdent = HsIdentifier
                  "linked_list_A_s_x"},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "recursive_struct.h:3:27",
              structFieldName = NamePair {
                nameC = CName "next",
                nameHsIdent = HsIdentifier
                  "linked_list_A_s_next"},
              structFieldType = TypePointer
                (TypeStruct
                  NamePair {
                    nameC = CName "linked_list_A_s",
                    nameHsIdent = HsIdentifier
                      "Linked_list_A_s"}),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "recursive_struct.h:4:3",
        declId = NamePair {
          nameC = CName "linked_list_A_t",
          nameHsIdent = HsIdentifier
            "Linked_list_A_t"}},
      declKind = DeclTypedef
        Typedef {
          typedefNames = NewtypeNames {
            newtypeConstr = HsName
              "@NsConstr"
              "Linked_list_A_t",
            newtypeField = HsName
              "@NsVar"
              "un_Linked_list_A_t"},
          typedefType = TypeStruct
            NamePair {
              nameC = CName "linked_list_A_s",
              nameHsIdent = HsIdentifier
                "Linked_list_A_s"}},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}},
    Decl {
      declInfo = DeclInfo {
        declLoc =
        "recursive_struct.h:9:8",
        declId = NamePair {
          nameC = CName "linked_list_B_t",
          nameHsIdent = HsIdentifier
            "Linked_list_B_t"}},
      declKind = DeclStruct
        Struct {
          structNames = RecordNames
            (HsName
              "@NsConstr"
              "Linked_list_B_t"),
          structSizeof = 16,
          structAlignment = 8,
          structFields = [
            StructField {
              structFieldLoc =
              "recursive_struct.h:10:7",
              structFieldName = NamePair {
                nameC = CName "x",
                nameHsIdent = HsIdentifier
                  "linked_list_B_t_x"},
              structFieldType = TypePrim
                (PrimIntegral PrimInt Signed),
              structFieldOffset = 0,
              structFieldWidth = Nothing},
            StructField {
              structFieldLoc =
              "recursive_struct.h:11:20",
              structFieldName = NamePair {
                nameC = CName "next",
                nameHsIdent = HsIdentifier
                  "linked_list_B_t_next"},
              structFieldType = TypePointer
                (TypeTypedef
                  (TypedefSquashed
                    (CName "linked_list_B_t")
                    (TypeStruct
                      NamePair {
                        nameC = CName "linked_list_B_t",
                        nameHsIdent = HsIdentifier
                          "Linked_list_B_t"}))),
              structFieldOffset = 64,
              structFieldWidth = Nothing}],
          structFlam = Nothing},
      declSpec = DeclSpec
        TypeSpec {
          typeSpecModule = Nothing,
          typeSpecIdentifier = Nothing,
          typeSpecInstances = Map.fromList
            []}}],
  unitDeps =
  [
    "/home/edsko/wt/clients/anduril/hs-bindgen/hs-bindgen/examples/recursive_struct.h"]}
