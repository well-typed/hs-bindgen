-- | Bindings to the C API for shapes
--
-- These bindings were generated by @hs-bindgen@ and then modified by hand.
-- Only the definition of 'Shape_details' is significantly different (the rest
-- is only cleaned up for formatting).
module Shape (
    -- * Types
    Shape_tag(Shape_tag, un_Shape_tag, RECT, CIRCLE)
  , Rectangle(..)
  , Circle(..)
  , Shape_details(..)
  , Shape(..)
    -- * Functions
  , new_rect
  , new_circle
  , print_shape
  ) where

import Data.Proxy
import Foreign
import Foreign.C

import UnionInfrastructure

{-------------------------------------------------------------------------------
  The critical 'Storable' code, different to what we do currently.

  This is code that would be generated by hs-bindgen
-------------------------------------------------------------------------------}

data Shape_details =
    ShapeRectangle Rectangle
  | ShapeCircle Circle
  deriving stock (Show)

instance WriteRaw Shape_details where
  writeRaw p (ShapeRectangle x) = poke (castPtr p) x
  writeRaw p (ShapeCircle    x) = poke (castPtr p) x

instance StructHasUnionTag Shape "shape.tag"
      => StorableInContext Shape Shape_details where
  peekInCtxt ctxt p =
      case structUnionTag (Proxy @"shape.tag") ctxt of
        0 -> ShapeRectangle <$> peek (castPtr p)
        1 -> ShapeCircle    <$> peek (castPtr p)
        n -> error $ "Shape_details: invalid tag " ++ show n

instance StructHasUnionTag Shape "shape.tag"
      => Storable Shape where
  sizeOf    _ = 20
  alignment _ = 4

  peek p = do
      shape_tag <- peekByteOff p 0
      let partialShape = Shape{shape_tag, shape_details = undefined}
      shape_details <- peekByteOffInCtxt partialShape p 4
      return Shape{shape_tag, shape_details}

  poke p Shape{shape_tag, shape_details} =
          pokeByteOff p 0 shape_tag
       >> writeRawOff p 4 shape_details

{-------------------------------------------------------------------------------
  Regular datatypes (all of this is hs-bindgen generated)
-------------------------------------------------------------------------------}

newtype Shape_tag = Shape_tag {
      un_Shape_tag :: CUInt
    }
  deriving stock (Show)

pattern RECT :: Shape_tag
pattern RECT = Shape_tag 0

pattern CIRCLE :: Shape_tag
pattern CIRCLE = Shape_tag 1

data Rectangle = Rectangle {
      rectangle_x1 :: CInt
    , rectangle_y1 :: CInt
    , rectangle_x2 :: CInt
    , rectangle_y2 :: CInt
    }
  deriving stock (Show)

data Circle = Circle {
      circle_x :: CInt
    , circle_y :: CInt
    , circle_d :: CFloat
    }
  deriving stock (Show)

data Shape = Shape {
      shape_tag     :: Shape_tag
    , shape_details :: Shape_details
    }
  deriving stock (Show)

{-------------------------------------------------------------------------------
  Regular storable instances (hs-bindgen generated)
-------------------------------------------------------------------------------}

instance Storable Shape_tag where
  sizeOf    _ = 4
  alignment _ = 4

  peek p =
          pure Shape_tag
      <*> peekByteOff p 0

  poke p Shape_tag{un_Shape_tag} =
         pokeByteOff p 0 un_Shape_tag

instance Storable Rectangle where
  sizeOf    _ = 16
  alignment _ = 4

  peek p =
          pure Rectangle
      <*> peekByteOff p 0
      <*> peekByteOff p 4
      <*> peekByteOff p 8
      <*> peekByteOff p 12

  poke p Rectangle{rectangle_x1, rectangle_y1, rectangle_x2, rectangle_y2} =
          pokeByteOff p 0 rectangle_x1
       >> pokeByteOff p 4 rectangle_y1
       >> pokeByteOff p 8 rectangle_x2
       >> pokeByteOff p 12 rectangle_y2

instance Storable Circle where
  sizeOf    _ = 12
  alignment _ = 4

  peek p =
          pure Circle
      <*> peekByteOff p 0
      <*> peekByteOff p 4
      <*> peekByteOff p 8

  poke p Circle{circle_x, circle_y, circle_d} =
          pokeByteOff p 0 circle_x
       >> pokeByteOff p 4 circle_y
       >> pokeByteOff p 8 circle_d

{-------------------------------------------------------------------------------
  Function imports (hs-bindgen generated)
-------------------------------------------------------------------------------}

foreign import capi safe "shape.h new_rect"
  new_rect :: CInt -> CInt -> CInt -> CInt -> IO (Ptr Shape)

foreign import capi safe "shape.h new_circle"
  new_circle :: CInt -> CInt -> CFloat -> IO (Ptr Shape)

foreign import capi safe "shape.h print_shape"
  print_shape :: Ptr Shape -> IO ()