-- | Bindings to the C API for shapes
--
-- These bindings were generated by @hs-bindgen@ and then modified by hand.
-- Only the definition of 'Shape_details' is significantly different (the rest
-- is only cleaned up for formatting).
module Shape (
    -- * Types
    Shape_tag(Shape_tag, un_Shape_tag, RECT, CIRCLE)
  , Rectangle(..)
  , Circle(..)
  , Shape_details(..)
  , Shape(..)
  , Double_shape(..)
    -- * Functions
  , new_rect
  , new_circle
  , print_shape
  , print_shape_details
  , random_shape_details
  , double_it
  ) where

import Foreign
import Foreign.C

import Prelims
import UnionInfrastructure

{-------------------------------------------------------------------------------
  The critical 'Storable' code, different to what we do currently.

  This is code that would be generated by hs-bindgen
-------------------------------------------------------------------------------}

data Shape_details =
    ShapeRectangle Rectangle
  | ShapeCircle Circle
  deriving stock (Show)

instance StaticSize Shape_details where
  staticSizeOf    _ = 16
  staticAlignment _ = 4

instance WriteRaw Shape_details where
  writeRaw p (ShapeRectangle x) = poke (castPtr p) x
  writeRaw p (ShapeCircle    x) = poke (castPtr p) x

instance ReadRawWithCtxt CUInt Shape_details where
  readRawWithCtxt 0 p = ShapeRectangle <$> peek (castPtr p)
  readRawWithCtxt 1 p = ShapeCircle    <$> peek (castPtr p)
  readRawWithCtxt n _ = error $ "Shape_details: invalid tag " ++ show n

instance ReadRawWithCtxt Shape Shape_details => Storable Shape where
  sizeOf    _ = 20
  alignment _ = 4

  poke p Shape{shape_tag, shape_details} = do
      pokeByteOff p 0 shape_tag
      writeRawOff p 4 shape_details

  peek p = do
      shape_tag <- peekByteOff p 0
      let partial = Shape{shape_tag, shape_details = undefined}
      shape_details <- readRawWithCtxtOff partial p 4
      return Shape{shape_tag, shape_details}

instance ( ReadRawWithCtxt
             (StructField "double_shape.details1" Double_shape)
             Shape_details
         , ReadRawWithCtxt
             (StructField "double_shape.details2" Double_shape)
             Shape_details
         ) => Storable Double_shape where
  sizeOf    _ = 40
  alignment _ = 4

  poke p Double_shape{
             double_shape_tag1
           , double_shape_details1
           , double_shape_tag2
           , double_shape_details2
           } = do
      pokeByteOff p 0  double_shape_tag1
      writeRawOff p 4  double_shape_details1
      pokeByteOff p 20 double_shape_tag2
      writeRawOff p 24 double_shape_details2

  peek p = do
      double_shape_tag1 <- peekByteOff p 0
      double_shape_tag2 <- peekByteOff p 20
      let partial = Double_shape{
              double_shape_tag1
            , double_shape_details1 = undefined
            , double_shape_tag2
            , double_shape_details2 = undefined
            }
          ctxt_details1 = StructField @"double_shape.details1" partial
          ctxt_details2 = StructField @"double_shape.details2" partial
      double_shape_details1 <- readRawWithCtxtOff ctxt_details1 p 4
      double_shape_details2 <- readRawWithCtxtOff ctxt_details2 p 24
      return Double_shape{
          double_shape_tag1
        , double_shape_details1
        , double_shape_tag2
        , double_shape_details2
        }

{-------------------------------------------------------------------------------
  Regular datatypes (all of this is hs-bindgen generated)
-------------------------------------------------------------------------------}

newtype Shape_tag = Shape_tag {
      un_Shape_tag :: CUInt
    }
  deriving stock (Show)

pattern RECT :: Shape_tag
pattern RECT = Shape_tag 0

pattern CIRCLE :: Shape_tag
pattern CIRCLE = Shape_tag 1

data Rectangle = Rectangle {
      rectangle_x1 :: CInt
    , rectangle_y1 :: CInt
    , rectangle_x2 :: CInt
    , rectangle_y2 :: CInt
    }
  deriving stock (Show)

data Circle = Circle {
      circle_x :: CInt
    , circle_y :: CInt
    , circle_d :: CFloat
    }
  deriving stock (Show)

data Shape = Shape {
      shape_tag     :: Shape_tag
    , shape_details :: Shape_details
    }
  deriving stock (Show)

data Double_shape = Double_shape {
      double_shape_tag1     :: Shape_tag
    , double_shape_details1 :: Shape_details
    , double_shape_tag2     :: Shape_tag
    , double_shape_details2 :: Shape_details
    }
  deriving stock (Show)

{-------------------------------------------------------------------------------
  Regular storable instances (hs-bindgen generated)
-------------------------------------------------------------------------------}

instance Storable Shape_tag where
  sizeOf    _ = 4
  alignment _ = 4

  peek p =
          pure Shape_tag
      <*> peekByteOff p 0

  poke p Shape_tag{un_Shape_tag} =
         pokeByteOff p 0 un_Shape_tag

instance Storable Rectangle where
  sizeOf    _ = 16
  alignment _ = 4

  peek p =
          pure Rectangle
      <*> peekByteOff p 0
      <*> peekByteOff p 4
      <*> peekByteOff p 8
      <*> peekByteOff p 12

  poke p Rectangle{rectangle_x1, rectangle_y1, rectangle_x2, rectangle_y2} =
          pokeByteOff p 0 rectangle_x1
       >> pokeByteOff p 4 rectangle_y1
       >> pokeByteOff p 8 rectangle_x2
       >> pokeByteOff p 12 rectangle_y2

instance Storable Circle where
  sizeOf    _ = 12
  alignment _ = 4

  peek p =
          pure Circle
      <*> peekByteOff p 0
      <*> peekByteOff p 4
      <*> peekByteOff p 8

  poke p Circle{circle_x, circle_y, circle_d} =
          pokeByteOff p 0 circle_x
       >> pokeByteOff p 4 circle_y
       >> pokeByteOff p 8 circle_d

{-------------------------------------------------------------------------------
  Function imports (hs-bindgen generated)
-------------------------------------------------------------------------------}

foreign import capi safe "shape.h new_rect"
  new_rect :: CInt -> CInt -> CInt -> CInt -> IO (Ptr Shape)

foreign import capi safe "shape.h new_circle"
  new_circle :: CInt -> CInt -> CFloat -> IO (Ptr Shape)

foreign import capi safe "shape.h print_shape"
  print_shape :: Ptr Shape -> IO ()

foreign import capi safe "shape.h print_shape_details"
  print_shape_details :: CUInt -> Ptr Shape_details -> IO ()

foreign import capi safe "shape.h random_shape_details"
  random_shape_details :: Ptr CUInt -> Ptr Shape_details -> IO ()

foreign import capi safe "shape.h double_it"
  double_it :: Ptr Shape -> IO (Ptr Double_shape)
