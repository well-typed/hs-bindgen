# .github/workflows/build-manual-ubuntu.yml
#
# This CI job specifically checks that the 'manual' can be generated,
# built, and run from a clean state on Ubuntu.
#
name: Build and run the Manual (Ubuntu)

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# If needed, this action allows one to SSH into the CI Job machine and
# figure out what's going on.
# - name: Setup tmate session
#   uses: mxschmitt/action-tmate@v3

# Ubuntu doesn't have an issue with Unicode characters so we set
# SUPPORTS_UNICODE flag for Ubuntu
env:
  SUPPORTS_UNICODE: 1

jobs:
  build-manual-ubuntu:
    name: Build and run the manual on Ubuntu and GHC ${{ matrix.ghc }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        llvm: ['16']
        ghc: ['9.12.2']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # This forces Git to always check out shell scripts with the correct
      # Linux-style (LF) line endings.
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'

      - name: Debug (Haskell)
        shell: bash
        run: |
          echo '### ghc --version'
          ghc --version
          echo '### ghc-pkg list'
          ghc-pkg list
          echo '### ghc --info'
          ghc --info

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2.0.7
        with:
          version: ${{ matrix.llvm }}
          # For linux, this needs to be set to false, because this
          # action's default env path is wrong for some reason.
          env: false
          # LLVM_PATH will be this one
          directory: ${{ runner.temp }}/llvm

      # Given that we disabled the setting of the env flags above, we need
      # to set the right LLVM_CONFIG and LIBCLANG_PATH.
      - name: Set LLVM_CONFIG and LIBCLANG_PATH Environment Variable
        run: |
          echo "LLVM_CONFIG=$LLVM_PATH/bin/llvm-config" >> "$GITHUB_ENV"
          echo "LIBCLANG_PATH=$LLVM_PATH/lib/" >> "$GITHUB_ENV"

      # Note also that we are passing '-DSUPPORTS_UNICODE' this option passes
      # SUPPORTS_UNICODE macro to libclang preprocessor.
      - name: Set -DSUPPORTS_UNICODE in BINDGEN_EXTRA_CLANG_ARGS
        run: |
          echo "BINDGEN_EXTRA_CLANG_ARGS=-DSUPPORTS_UNICODE" >> "$GITHUB_ENV"

      - name: Debug (LLVM/Clang)
        shell: bash
        run: |
          echo '### which clang'
          which clang
          echo '### clang --version'
          clang --version

      # This file only the first part of this file is needed to build the
      # whole project, the others are needed to build the manual as they
      # ensure subsequent cabal commands (like in generate.sh) can find the
      # necessary C headers and libraries.
      #
      # Note that -DSUPPORTS_UNICODE is set, but is only needed to run the
      # manual, not to actually compile the project.
      - name: Create cabal.project.local
        run: |
          echo "Writing cabal.project.local to configure C paths..."
          cat <<EOF > cabal.project.local
          package *
            ghc-options:
              -optc-DSUPPORTS_UNICODE
              -DSUPPORTS_UNICODE
          package manual
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c

          package hs-game
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c

          package hs-vector
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c
          EOF

      - name: Generate Cabal plan
        run: |
          cabal build all --dry-run

      - name: Cache Cabal dependencies
        uses: actions/cache@v4
        env:
          key: build-manual-${{ runner.os }}-${{ matrix.ghc }}
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.key }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: |
            ${{ env.key }}-

      - name: Build hs-bindgen
        run: cabal build all

      - name: Debug (hs-bindgen)
        shell: bash
        run: |
          echo '### Version'
          cabal run hs-bindgen-cli -- --version
          echo '### libclang -v'
          cabal run hs-bindgen-cli -- dev clang --clang-option=-v
          echo '### Resolve (clang)'
          cabal run hs-bindgen-cli -- dev resolve -v4 --builtin-include-dir=clang stdint.h

      - name: Build the C libraries
        working-directory: ./manual/c
        run: make

      - name: Run binding generation script
        working-directory: ./manual
        run: ./generate.sh

      - name: Run the manual executable
        working-directory: ./manual/hs
        run: |
          export LD_LIBRARY_PATH=${{ github.workspace }}/manual/c/:$LD_LIBRARY_PATH
          cp ../../cabal.project.local .
          cabal run manual
