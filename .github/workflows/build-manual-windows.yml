# .github/workflows/build-manual-windows.yml
#
# This CI job specifically checks that the 'manual' can be generated,
# built, and run from a clean state on Windows.
#
name: Build and run the Manual (Windows)

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# If needed, this action allows one to SSH into the CI Job machine and
# figure out what's going on.
# - name: Setup tmate session
#   uses: mxschmitt/action-tmate@v3

# Since Windows assembler has an issue with Unicode characters so we don't set
# SUPPORTS_UNICODE flag

jobs:
  build-manual-windows:
    name: Build and run the manual on Windows and GHC ${{ matrix.ghc }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc: ['9.12.2']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # This forces Git to always check out shell scripts with the correct
      # Linux-style (LF) line endings.
      - name: Set git to use LF
        shell: bash
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      # The GHC installation on Windows already comes with a compatible
      # CLANG and LLVM.
      - name: Set up LLVM_PATH
        shell: bash
        run: |
          echo "LLVM_PATH=/c/ghcup/ghc/${{matrix.ghc}}/mingw" >> "$GITHUB_ENV"

      - name: Set LLVM_CONFIG and LIBCLANG_PATH Environment Variable
        shell: bash
        run: |
          echo "LLVM_CONFIG=$LLVM_PATH/bin/llvm-config" >> "$GITHUB_ENV"
          echo "LIBCLANG_PATH=$LLVM_PATH/lib/" >> "$GITHUB_ENV"

      # Windows doesn't require to set BINDGEN_CLANG_ARGS in the same way Linux
      # does.
      #
      # Note also that we are not passing '-DSUPPORTS_UNICODE', via
      # BINDGEN_CLANG_ARGS. This option passes SUPPORTS_UNICODE macro to
      # libclang preprocessor. In manual_examples.{c,h} and
      # manual/app/RunManual.hs we have some CPP to replace 拜拜 and ϒ
      # functions by ByeBye and Gamma. This is needed when building with LLVM
      # or (non-LLVM) MacOS. The former because LLVM IR does not support
      # Unicode characters and the latter because Apple's assembler also does
      # not support Unicode characters. In this case we are enabling it
      # because we are building with LLVM backend. This is only needed because
      # when hs-bindgen-cli runs it creates a C-wrapper around functions which
      # need to be compiled, however if it would be something other than a
      # function like 'typedef int 数字;' it would work[^1].
      #
      # [^1]: It would work in all OSs except Windows.

      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'

      # This file only the first part of this file ('package *') is needed to
      # build the whole project, the others are needed to build the manual as
      # they ensure subsequent cabal commands (like in generate.sh) can find
      # the necessary C headers and libraries.
      #
      # Note that -DSUPPORTS_UNICODE is not set because Windows assembler
      # doesn't support Unicode characters.
      - name: Create cabal.project.local
        shell: bash
        run: |
          echo "Writing cabal.project.local to configure C paths..."
          cat <<EOF > cabal.project.local
          package manual
            extra-include-dirs:
                ${{ github.workspace }}\\manual\\c
            extra-lib-dirs:
                ${{ github.workspace }}\\manual\\c

          package hs-game
            extra-include-dirs:
                ${{ github.workspace }}\\manual\\c
            extra-lib-dirs:
                ${{ github.workspace }}\\manual\\c

          package hs-vector
            extra-include-dirs:
                ${{ github.workspace }}\\manual\\c
            extra-lib-dirs:
                ${{ github.workspace }}\\manual\\c
          EOF

      - name: Generate Cabal plan
        run: |
          cabal build all --dry-run

      - name: Cache Cabal dependencies
        uses: actions/cache@v4
        env:
          key: build-manual-${{ runner.os }}-${{ matrix.ghc }}
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ env.key }}-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: |
            ${{ env.key }}-

      - name: Build hs-bindgen
        run: cabal build all

      - name: Build the C libraries
        working-directory: ./manual/c
        run: make

      - name: Run binding generation script
        working-directory: ./manual
        shell: bash
        run: ./generate.sh

      # Adding manual/c to the PATH is needed. The dynamic-link library search
      # order indicates that it searches directories listed in PATH for DLLs
      # as a last resort. When we execute run-manual, this PATH setting is
      # what allows it to find the needed DLLs.
      - name: Add manual/c to the PATH
        shell: bash
        run: |
          echo "PATH=${{ github.workspace }}\\manual\\c;$PATH" >> "$GITHUB_ENV"

      - name: Run the manual executable
        working-directory: ./manual/hs
        shell: bash
        run: |
          cp ../../cabal.project.local .
          cabal run manual

