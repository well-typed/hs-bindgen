# This GitHub workflow config has been generated by a script via
#
#   haskell-ci 'github' 'cabal.project.ci'
#
# To regenerate the script (for example after adjusting tested-with) run
#
#   haskell-ci regenerate
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.19.20250216
#
# REGENDATA ("0.19.20250216",["github","cabal.project.ci"])
#
name: Haskell-CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  linux:
    name: Haskell-CI - Linux - ${{ matrix.compiler }}
    runs-on: ubuntu-24.04
    timeout-minutes:
      60
    container:
      image: buildpack-deps:jammy
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.10.1
            compilerKind: ghc
            compilerVersion: 9.10.1
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.8.2
            compilerKind: ghc
            compilerVersion: 9.8.2
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.6.6
            compilerKind: ghc
            compilerVersion: 9.6.6
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.8
            compilerKind: ghc
            compilerVersion: 9.4.8
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.8
            compilerKind: ghc
            compilerVersion: 9.2.8
            setup-method: ghcup
            allow-failure: false
      fail-fast: false
    steps:
      - name: apt-get install
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5
          apt-get install -y libclang-dev llvm
      - name: Install GHCup
        run: |
          mkdir -p "$HOME/.ghcup/bin"
          curl -sL https://downloads.haskell.org/ghcup/0.1.30.0/x86_64-linux-ghcup-0.1.30.0 > "$HOME/.ghcup/bin/ghcup"
          chmod a+x "$HOME/.ghcup/bin/ghcup"
      - name: Install cabal-install
        run: |
          "$HOME/.ghcup/bin/ghcup" install cabal 3.12.1.0 || (cat "$HOME"/.ghcup/logs/*.* && false)
          echo "CABAL=$HOME/.ghcup/bin/cabal-3.12.1.0 -vnormal+nowrap" >> "$GITHUB_ENV"
      - name: Install GHC (GHCup)
        if: matrix.setup-method == 'ghcup'
        run: |
          "$HOME/.ghcup/bin/ghcup" install ghc "$HCVER" || (cat "$HOME"/.ghcup/logs/*.* && false)
          HC=$("$HOME/.ghcup/bin/ghcup" whereis ghc "$HCVER")
          HCPKG=$(echo "$HC" | sed 's#ghc$#ghc-pkg#')
          HADDOCK=$(echo "$HC" | sed 's#ghc$#haddock#')
          echo "HC=$HC" >> "$GITHUB_ENV"
          echo "HCPKG=$HCPKG" >> "$GITHUB_ENV"
          echo "HADDOCK=$HADDOCK" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=$HOME/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> "$GITHUB_ENV"
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV"
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          echo "HEADHACKAGE=false" >> "$GITHUB_ENV"
          echo "ARG_COMPILER=--$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          cat >> $CABAL_CONFIG <<EOF
          program-default-options
            ghc-options: $GHCJOBS +RTS -M3G -RTS
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.7.3.0/cabal-plan-0.7.3.0-x86_64-linux.xz > cabal-plan.xz
          echo 'f62ccb2971567a5f638f2005ad3173dba14693a45154c1508645c52289714cb2  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: checkout
        uses: actions/checkout@v4
        with:
          path: source
      - name: initial cabal.project for sdist
        run: |
          touch cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/hs-bindgen-runtime" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/hs-bindgen" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/hs-bindgen-libclang" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/ansi-diff" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/c-expr" >> cabal.project
          echo "packages: $GITHUB_WORKSPACE/source/clang-ast-dump" >> cabal.project
          cat cabal.project
      - name: sdist
        run: |
          mkdir -p sdist
          $CABAL sdist all --output-dir $GITHUB_WORKSPACE/sdist
      - name: unpack
        run: |
          mkdir -p unpacked
          find sdist -maxdepth 1 -type f -name '*.tar.gz' -exec tar -C $GITHUB_WORKSPACE/unpacked -xzvf {} \;
      - name: generate cabal.project
        run: |
          PKGDIR_hs_bindgen_runtime="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/hs-bindgen-runtime-[0-9.]*')"
          echo "PKGDIR_hs_bindgen_runtime=${PKGDIR_hs_bindgen_runtime}" >> "$GITHUB_ENV"
          PKGDIR_hs_bindgen="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/hs-bindgen-[0-9.]*')"
          echo "PKGDIR_hs_bindgen=${PKGDIR_hs_bindgen}" >> "$GITHUB_ENV"
          PKGDIR_hs_bindgen_libclang="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/hs-bindgen-libclang-[0-9.]*')"
          echo "PKGDIR_hs_bindgen_libclang=${PKGDIR_hs_bindgen_libclang}" >> "$GITHUB_ENV"
          PKGDIR_ansi_diff="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/ansi-diff-[0-9.]*')"
          echo "PKGDIR_ansi_diff=${PKGDIR_ansi_diff}" >> "$GITHUB_ENV"
          PKGDIR_c_expr="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/c-expr-[0-9.]*')"
          echo "PKGDIR_c_expr=${PKGDIR_c_expr}" >> "$GITHUB_ENV"
          PKGDIR_clang_ast_dump="$(find "$GITHUB_WORKSPACE/unpacked" -maxdepth 1 -type d -regex '.*/clang-ast-dump-[0-9.]*')"
          echo "PKGDIR_clang_ast_dump=${PKGDIR_clang_ast_dump}" >> "$GITHUB_ENV"
          rm -f cabal.project cabal.project.local
          touch cabal.project
          touch cabal.project.local
          echo "packages: ${PKGDIR_hs_bindgen_runtime}" >> cabal.project
          echo "packages: ${PKGDIR_hs_bindgen}" >> cabal.project
          echo "packages: ${PKGDIR_hs_bindgen_libclang}" >> cabal.project
          echo "packages: ${PKGDIR_ansi_diff}" >> cabal.project
          echo "packages: ${PKGDIR_c_expr}" >> cabal.project
          echo "packages: ${PKGDIR_clang_ast_dump}" >> cabal.project
          echo "package hs-bindgen-runtime" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          echo "package hs-bindgen" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          echo "package hs-bindgen-libclang" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          echo "package ansi-diff" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          echo "package c-expr" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          echo "package clang-ast-dump" >> cabal.project
          echo "    ghc-options: -Werror=missing-methods" >> cabal.project
          cat >> cabal.project <<EOF
          package hs-bindgen
            ghc-options: -Werror

          package hs-bindgen-libclang
            ghc-options: -Werror

          package hs-bindgen-runtime
            ghc-options: -Werror

          package ansi-diff
            ghc-options: -Werror
          EOF
          $HCPKG list --simple-output --names-only | perl -ne 'for (split /\s+/) { print "constraints: any.$_ installed\n" unless /^(ansi-diff|c-expr|clang-ast-dump|hs-bindgen|hs-bindgen-libclang|hs-bindgen-runtime)$/; }' >> cabal.project.local
          cat cabal.project
          cat cabal.project.local
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: restore cache
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: install dependencies
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks --dependencies-only -j2 all
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dependencies-only -j2 all
      - name: build w/o tests
        run: |
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: build
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --write-ghc-environment-files=always
      - name: tests
        run: |
          $CABAL v2-test $ARG_COMPILER $ARG_TESTS $ARG_BENCH all --test-show-details=direct
      - name: cabal check
        run: |
          cd ${PKGDIR_hs_bindgen_runtime} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_hs_bindgen} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_hs_bindgen_libclang} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_ansi_diff} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_c_expr} || false
          ${CABAL} -vnormal check
          cd ${PKGDIR_clang_ast_dump} || false
          ${CABAL} -vnormal check
      - name: haddock
        run: |
          $CABAL v2-haddock --disable-documentation --haddock-all $ARG_COMPILER --with-haddock $HADDOCK $ARG_TESTS $ARG_BENCH all
      - name: unconstrained build
        run: |
          rm -f cabal.project.local
          $CABAL v2-build $ARG_COMPILER --disable-tests --disable-benchmarks all
      - name: save cache
        if: always()
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
