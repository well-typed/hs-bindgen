# .github/workflows/build-manual-ubuntu.yml
#
# This CI job specifically checks that the 'manual' can be generated,
# built, and run from a clean state on Ubuntu.
#
name: Build and run the Manual (Ubuntu)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Since we want to compile with LLVM backend and LLVM IR does not allow
# Unicode characters we enable this flag which is going to replace all Unicode
# characters on the manual code with valid characters.
#
# This is needed when compiling the Makefile (see manual/c/Makefile)
env:
  LLVM_BACKEND: 1

jobs:
  build-manual-ubuntu:
    name: Build and run the manual on Ubuntu and GHC ${{ matrix.ghc }} using LLVM
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Be extra careful because this LLVM version needs to be compatible
        # with the LLVM backend on GHC. Version 19 is the maximum version
        # supported by GHC 9.12.2
        llvm: ['16']
        ghc: ['9.12.2']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # This forces Git to always check out shell scripts with the correct
      # Linux-style (LF) line endings.
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v2.0.7
        with:
          version: ${{ matrix.llvm }}
          # For linux, this needs to be set to false, because this action's
          # default env path is wrong for some reason.
          env: false
          # LLVM_PATH will be this one
          directory: ${{ runner.temp }}/llvm

      # Given that we disabled the setting of the env flags above, we need to
      # set the right LLVM_CONFIG and LIBCLANG_PATH.
      - name: Set LLVM_CONFIG and LIBCLANG_PATH Environment Variable
        shell: bash
        run: |
          echo "LLVM_CONFIG=$LLVM_PATH/bin/llvm-config" >> "$GITHUB_ENV"
          echo "LIBCLANG_PATH=$LLVM_PATH/lib/" >> "$GITHUB_ENV"

      # For some reason in Ubuntu we need to pass C header files via this flag
      #
      # This incantation is a bit awkward because we have to parse clang's
      # output.
      #
      # Note that we set -nostdinc because we want to override the default
      # paths that clang uses, this is to make sure it finds them correctly.
      #
      # Note also that we are not passing '-DSUPPORTS_UNICODE' this option
      # pass SUPPORTS_UNICODE macro to libclang preprocessor. In
      # manual_examples.{c,h} and manual/app/RunManual.hs we have some CPP to
      # replace 拜拜 and ϒ functions by ByeBye and Gamma. This is needed when
      # building with LLVM or (non-LLVM) MacOS. The former because LLVM IR
      # does not support Unicode characters and the latter because Apple's
      # assembler also does not support Unicode characters. In this case we
      # are enabling it because we are building with LLVM backend. This is
      # only needed because when hs-bindgen-cli runs it creates a C-wrapper
      # around functions which need to be compiled, however if it would be
      # something other than a function like 'typedef int 数字;' it would
      # work[^1].
      #
      # [^1]: It would work in all OSs except Windows.
      #
      - name: Set Set BINDGEN_EXTRA_CLANG_ARGS using Clang
        shell: bash
        run: |
          CLANG_ARGS=$(clang -v -E -xc /dev/null 2>&1 | awk '/#include <...> search starts here/{f=1;next}/End of search list./{f=0}f{sub(/^[ \t]*/,"",$0);s=s " -I"$0}END{print substr(s,2)}')
          echo "BINDGEN_EXTRA_CLANG_ARGS=-nostdinc $CLANG_ARGS" >> "$GITHUB_ENV"

      # See https://minoki.github.io/posts/2025-01-06-ghc-llvm-backend.html
      - name: Set up correct PATHs to set up LLVM backend
        shell: bash
        run: |
          echo "OPT=$LLVM_PATH/bin/opt" >> "${GITHUB_ENV}"
          echo "LLC=$LLVM_PATH/bin/llc" >> "${GITHUB_ENV}"
          echo "LLVMAS=$LLVM_PATH/bin/clang" >> "${GITHUB_ENV}"

      - uses: haskell/ghcup-setup@v1.2.2
      - name: Install GHC and cabal-install
        shell: bash
        run: |
          ghcup install ghc ${{ matrix.ghc }} --set --force
          ghcup install cabal latest --set
          cabal update

      # This file only the first part of this file is needed to build the
      # whole project, the others are needed to build the manual as they
      # ensure subsequent cabal commands (like in generate.sh) can find the
      # necessary C headers and libraries.
      #
      # Note that -DSUPPORTS_UNICODE is not set
      - name: Create cabal.project.local
        shell: bash
        run: |
          echo "Writing cabal.project.local to configure C paths..."
          cat <<EOF > manual/cabal.project.local
          package *
            ghc-options:
              -fllvm
          package manual
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c

          package hs-game
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c

          package hs-vector
            extra-include-dirs:
                ${{ github.workspace }}/manual/c
            extra-lib-dirs:
                ${{ github.workspace }}/manual/c
          EOF

      - name: Build the C libraries
        working-directory: ./manual/c
        run: make

      # We avoid running a `cabal build all` intermediate step because it
      # fails on windows when compiling with -fllvm flag
      #
      - name: Run binding generation script
        working-directory: ./manual
        shell: bash
        run: ./generate.sh

      - name: Run the manual executable
        working-directory: ./manual/hs
        shell: bash
        run: |
          export LD_LIBRARY_PATH=${{ github.workspace }}/manual/c/:$LD_LIBRARY_PATH
          cp ../cabal.project.local .
          cabal run manual

