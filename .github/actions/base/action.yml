name: Base
description: Build and test `hs-bindgen`, build and run manual

inputs:
  runner:
    description: 'The used runner'
    required: true
  ghc:
    description: ""
    required: true
  llvm:
    description: 'LLVM version'
    required: true

runs:
  using: composite
  steps:
    # `clang` version 18 fails to find `libtinfo5`.
    # https://askubuntu.com/questions/1531760/how-to-install-libtinfo5-on-ubuntu24-04
    - name: Ubuntu LLVM 18 quirks - Install libtinfo5
      shell: bash
      if: ${{ runner.os == 'Linux' && inputs.llvm == '18' }}
      run: |
        wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb
        sudo apt install ./libtinfo5_6.3-2ubuntu0.1_amd64.deb

    - name: Setup Haskell
      id: setup-haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ inputs.ghc }}
        cabal-version: 3.16

    - name: Debug (Haskell)
      shell: bash
      run: |
        echo '### ghc --version'
        ghc --version
        echo '### ghc-pkg list'
        ghc-pkg list
        echo '### ghc --info'
        ghc --info

    - name: Install LLVM/Clang
      uses: KyleMayes/install-llvm-action@v2.0.8
      with:
        version: ${{ inputs.llvm }}
        directory: ${{ runner.temp }}/llvm
        env: false

    - name: macOS quirks - Configure environment variables
      shell: bash
      if: ${{ startsWith(inputs.runner, 'macos') }}
      run: |
        echo "LLVM_CONFIG=$LLVM_PATH/bin/llvm-config" >> "$GITHUB_ENV"
        echo "LIBCLANG_PATH=$LLVM_PATH/lib/" >> "$GITHUB_ENV"
        # https://stackoverflow.com/questions/63342521/clang-on-macos-having-problems-with-its-includes
        export SDKROOT=$(xcrun --show-sdk-path --sdk macosx)
        echo $SDKROOT
        echo "SDKROOT=$SDKROOT" >> "$GITHUB_ENV"

    - name: Debug (LLVM/Clang)
      shell: bash
      run: |
        echo '### which clang'
        which clang
        echo '### clang --version'
        clang --version
        echo '### $LLVM_PATH'
        echo "$LLVM_PATH"
        echo '### ls $LLVM_PATH'
        ls "$LLVM_PATH"
        echo '### ls $LLVM_PATH/bin'
        ls "$LLVM_PATH/bin"

    - name: cabal.project
      shell: bash
      run: cp cabal.project.ci cabal.project

    - name: Dry build (for cache key)
      shell: bash
      run: cabal build all --dry-run

    - name: Restore cache
      id: cache-cabal-restore
      uses: actions/cache/restore@v4
      env:
        key: build-and-test-${{ inputs.runner }}-ghc-${{ steps.setup-haskell.outputs.ghc-version }}-cabal-${{ steps.setup-haskell.outputs.cabal-version }}-llvm-${{ inputs.llvm}}
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: ${{ env.key }}-plan-${{ hashFiles('dist-newstyle/cache/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Dependencies
      shell: bash
      run: cabal build all --only-dependencies -j4

    - name: Build
      shell: bash
      run: cabal build all -j4

    - name: Debug (hs-bindgen)
      shell: bash
      run: |
        echo '### Version'
        cabal run hs-bindgen-cli -- --version
        echo '### libclang -v'
        cabal run hs-bindgen-cli -- info libclang --clang-option=-v
        echo '### Resolve (clang)'
        cabal run hs-bindgen-cli -- info resolve-header -v4 --builtin-include-dir=clang stdint.h

    - name: Test
      shell: bash
      run: cabal test all --test-show-details=direct

    - name: Build manual (macOS)
      if: runner.os == 'macOS'
      uses: ./.github/actions/build-manual-macos

    - name: Build manual (Ubuntu)
      if: runner.os == 'Linux'
      uses: ./.github/actions/build-manual-ubuntu

    - name: Windows quirks - Manual requires Clang version coming with GHC
      shell: bash
      if: ${{ startsWith(inputs.runner, 'windows') }}
      run: |
          echo '### ls "C:\tools\ghc-${{ inputs.ghc }}\mingw\bin"'
          ls "C:\tools\ghc-${{ inputs.ghc }}\mingw\bin"
          echo "C:\tools\ghc-${{ inputs.ghc }}\mingw\bin" >> "$GITHUB_PATH"

    - name: Build manual (Windows)
      if: runner.os == 'Windows'
      uses: ./.github/actions/build-manual-windows

    - name: Build c-rogueutil example (Ubuntu)
      if: runner.os == 'Linux'
      uses: ./.github/actions/examples/c-rogueutil
      
    - name: Build c-minisat example (Ubuntu)
      if: runner.os == 'Linux'
      uses: ./.github/actions/examples/c-minisat

    # Save the cache after building the project AND the manual.
    - name: Save cache
      uses: actions/cache/save@v4
      # Even save the cache, even when a previous job failed. Do not save the
      # cache when the job gets canceled.
      if: ${{ !cancelled() }}
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: ${{ steps.cache-cabal-restore.outputs.cache-primary-key }}
