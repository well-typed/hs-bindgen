{-# LANGUAGE TemplateHaskell #-}

-- | Code generated by @hs-bindgen@ and then cleaned up for better presentation
module Generated where

import Data.Array.Byte (ByteArray)
import Foreign
import Foreign.C

import HsBindgen.Runtime.ByteArray qualified as ByteArray
import HsBindgen.Runtime.CAPI as CAPI
import HsBindgen.Runtime.ConstantArray (ConstantArray)
import HsBindgen.Runtime.SizedByteArray (SizedByteArray(..))

$(CAPI.addCSource "#include \"cbits.h\"\nvoid Generated_show_rect (struct rect *arg1) { show_rect(arg1); }\n")

{-------------------------------------------------------------------------------
  Structs
-------------------------------------------------------------------------------}

data Point = Point {
      x :: CInt
    , y :: CInt
    }
  deriving stock (Show, Eq)

data Rect = Rect {
      topleft     :: Point
    , bottomright :: Point
    }
  deriving stock (Show, Eq)

instance Storable Point where
  sizeOf    _ = 8
  alignment _ = 4

  peek ptr =
          pure Point
      <*> peekByteOff ptr 0
      <*> peekByteOff ptr 4

  poke ptr Point{x, y} = do
      pokeByteOff ptr 0 x
      pokeByteOff ptr 4 y

instance Storable Rect where
  sizeOf    _ = 16
  alignment _ = 4

  peek ptr =
          pure Rect
      <*> peekByteOff ptr (0 :: Int)
      <*> peekByteOff ptr (8 :: Int)

  poke ptr Rect{topleft, bottomright} = do
      pokeByteOff ptr (0 :: Int) topleft
      pokeByteOff ptr (8 :: Int) bottomright

foreign import ccall safe "Generated_show_rect"
  show_rect :: Ptr Rect -> IO ()

{-------------------------------------------------------------------------------
  Union
-------------------------------------------------------------------------------}

newtype PointVsArray = PointVsArray ByteArray
  deriving Storable via SizedByteArray 8 4

get_pointVsArray_asPoint :: PointVsArray -> Point
get_pointVsArray_asPoint = ByteArray.getUnionPayload

set_pointVsArray_asPoint :: Point -> PointVsArray
set_pointVsArray_asPoint = ByteArray.setUnionPayload

get_pointVsArray_asArray :: PointVsArray -> ConstantArray 2 CInt
get_pointVsArray_asArray = ByteArray.getUnionPayload

set_pointVsArray_asArray :: ConstantArray 2 CInt -> PointVsArray
set_pointVsArray_asArray = ByteArray.setUnionPayload
