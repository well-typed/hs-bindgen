{-| this module is autogenerated with cabal run hs-bindgen-bootstrap -}
module HsBindgen.Clang.LowLevel.FFI (module HsBindgen.Clang.LowLevel.FFI) where
import Foreign.C.Types
import HsBindgen.Clang.Internal.ByValue
import HsBindgen.Clang.LowLevel.Core.Enums
import HsBindgen.Clang.LowLevel.Core.Structs
import HsBindgen.Runtime.Patterns
-- Type information for CXCursors https://clang.llvm.org/doxygen/group__CINDEX__TYPES.html

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorType :: R CXCursor_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getTypeSpelling :: R CXType_ -> W CXString_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getTypedefDeclUnderlyingType :: R CXCursor_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getEnumDeclIntegerType :: R CXCursor_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getEnumConstantDeclValue :: R CXCursor_ -> IO CLLong

foreign import capi unsafe "clang_wrappers.h"
  wrap_getEnumConstantDeclUnsignedValue :: R CXCursor_ -> IO CULLong

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isBitField :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getFieldDeclBitWidth :: R CXCursor_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_getNumArguments :: R CXCursor_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_getArgument :: R CXCursor_ -> CUInt -> W CXCursor_ -> IO ()

-- int clang_Cursor_getNumTemplateArguments (CXCursor C); // C++

-- enum CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind (CXCursor C, unsigned I); // C++

-- CXType clang_Cursor_getTemplateArgumentType (CXCursor C, unsigned I); // C++

-- long long clang_Cursor_getTemplateArgumentValue (CXCursor C, unsigned I); // C++

-- unsigned long long clang_Cursor_getTemplateArgumentUnsignedValue (CXCursor C, unsigned I); // C++

foreign import capi unsafe "clang_wrappers.h"
  wrap_equalTypes :: R CXType_ -> R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCanonicalType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_isConstQualifiedType :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isMacroFunctionLike :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isMacroBuiltin :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isFunctionInlined :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_isVolatileQualifiedType :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_isRestrictQualifiedType :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getAddressSpace :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getTypedefName :: R CXType_ -> W CXString_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getPointeeType :: R CXType_ -> W CXType_ -> IO ()

-- CXType clang_getUnqualifiedType (CXType CT); // this is special case

-- CXType clang_getNonReferenceType (CXType CT); // this is apparently special case as well (not available in older libclang)

foreign import capi unsafe "clang_wrappers.h"
  wrap_getTypeDeclaration :: R CXType_ -> W CXCursor_ -> IO ()

-- CXString clang_getDeclObjCTypeEncoding (CXCursor C); // Objective C

-- CXString clang_Type_getObjCEncoding (CXType type); // Objective C

foreign import capi unsafe "clang_wrappers.h"
  wrap_getTypeKindSpelling :: SimpleEnum CXTypeKind -> W CXString_ -> IO ()

-- enum CXCallingConv clang_getFunctionTypeCallingConv (CXType T); // no enum

foreign import capi unsafe "clang_wrappers.h"
  wrap_getResultType :: R CXType_ -> W CXType_ -> IO ()

-- int clang_getExceptionSpecificationType (CXType T); // C++

foreign import capi unsafe "clang_wrappers.h"
  wrap_getNumArgTypes :: R CXType_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getArgType :: R CXType_ -> CUInt -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getObjCObjectBaseType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getNumObjCProtocolRefs :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getObjCProtocolDecl :: R CXType_ -> CUInt -> W CXCursor_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getNumObjCTypeArgs :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getObjCTypeArg :: R CXType_ -> CUInt -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_isFunctionTypeVariadic :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorResultType :: R CXCursor_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorExceptionSpecificationType :: R CXCursor_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_isPODType :: R CXType_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getElementType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getNumElements :: R CXType_ -> IO CLLong

foreign import capi unsafe "clang_wrappers.h"
  wrap_getArrayElementType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getArraySize :: R CXType_ -> IO CLLong

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getNamedType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_isTransparentTagTypedef :: R CXType_ -> IO CUInt

-- enum CXTypeNullabilityKind clang_Type_getNullability (CXType T); // no enum

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getAlignOf :: R CXType_ -> IO CLLong

-- CXType clang_Type_getClassType (CXType T); // C++

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getSizeOf :: R CXType_ -> IO CLLong

-- long long clang_Type_getOffsetOf (CXType T, const char *S) // TODO: generator doesn't know * yet

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getModifiedType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Type_getValueType :: R CXType_ -> W CXType_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_getOffsetOfField :: R CXCursor_ -> IO CLLong

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isAnonymous :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isAnonymousRecordDecl :: R CXCursor_ -> IO CUInt

-- unsigned clang_Cursor_isInlineNamespace (CXCursor C); // C++

-- int clang_Type_getNumTemplateArguments (CXType T); // C++

-- CXType clang_Type_getTemplateArgumentAsType (CXType T, unsigned i); // C++

-- enum CXRefQualifierKind clang_Type_getCXXRefQualifier (CXType T); // C++

-- unsigned clang_isVirtualBase (CXCursor); // C++

-- enum CX_CXXAccessSpecifier clang_getCXXAccessSpecifier (CXCursor); // C++

-- enum CX_BinaryOperatorKind clang_Cursor_getBinaryOpcode (CXCursor C); // C++

-- CXString clang_Cursor_getBinaryOpcodeStr (enum CX_BinaryOperatorKind Op); // C++

-- enum CX_StorageClass clang_Cursor_getStorageClass (CXCursor); // no enum

-- unsigned clang_getNumOverloadedDecls (CXCursor cursor); // C++

-- CXCursor clang_getOverloadedDecl (CXCursor cursor, unsigned index); // C++

-- Cursor manipulations https://clang.llvm.org/doxygen/group__CINDEX__CURSOR__MANIP.html

foreign import capi unsafe "clang_wrappers.h"
  wrap_getNullCursor :: W CXCursor_ -> IO ()

-- CXCursor clang_getTranslationUnitCursor (CXTranslationUnit unit); CXTranslationUnit is defined in LowLevel.Core

foreign import capi unsafe "clang_wrappers.h"
  wrap_equalCursors :: R CXCursor_ -> R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_isNull :: R CXCursor_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_hashCursor :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorKind :: R CXCursor_ -> IO (SimpleEnum CXCursorKind)

foreign import capi unsafe "clang_wrappers.h clang_isDeclaration"
  nowrapper_isDeclaration :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_isInvalidDeclaration :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isReference"
  nowrapper_isReference :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isExpression"
  nowrapper_isExpression :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isStatement"
  nowrapper_isStatement :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isAttribute"
  nowrapper_isAttribute :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_hasAttrs :: R CXCursor_ -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isInvalid"
  nowrapper_isInvalid :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isTranslationUnit"
  nowrapper_isTranslationUnit :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isPreprocessing"
  nowrapper_isPreprocessing :: SimpleEnum CXCursorKind -> IO CUInt

foreign import capi unsafe "clang_wrappers.h clang_isUnexposed"
  nowrapper_isUnexposed :: SimpleEnum CXCursorKind -> IO CUInt

-- enum CXLinkageKind clang_getCursorLinkage (CXCursor cursor); // no enum

-- enum CXVisibilityKind clang_getCursorVisibility (CXCursor cursor); // no enum

-- enum CXAvailabilityKind clang_getCursorAvailability (CXCursor cursor); // no enum

-- int clang_getCursorPlatformAvailability (CXCursor cursor, int *always_deprecated, CXString *deprecated_message, int *always_unavailable, CXString *unavailable_message, CXPlatformAvailability *availability, int availability_size);

-- void clang_disposeCXPlatformAvailability (CXPlatformAvailability *availability);

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_getVarDeclInitializer :: R CXCursor_ -> W CXCursor_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_hasVarDeclGlobalStorage :: R CXCursor_ -> IO CInt

foreign import capi unsafe "clang_wrappers.h"
  wrap_Cursor_hasVarDeclExternalStorage :: R CXCursor_ -> IO CInt

-- enum CXLanguageKind clang_getCursorLanguage (CXCursor cursor); // no enum

-- enum CXTLSKind clang_getCursorTLSKind (CXCursor cursor); // no enum

-- CXTranslationUnit clang_Cursor_getTranslationUnit (CXCursor cursor); CXTranslationUnit is defined in LowLevel.Core

-- CXCursorSet clang_createCXCursorSet (void); // no cursor set

-- void clang_disposeCXCursorSet (CXCursorSet cset); // no cursor set

-- unsigned clang_CXCursorSet_contains (CXCursorSet cset, CXCursor cursor); // no cursor set

-- unsigned clang_CXCursorSet_insert (CXCursorSet cset, CXCursor cursor); // no cursor set

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorSemanticParent :: R CXCursor_ -> W CXCursor_ -> IO ()

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorLexicalParent :: R CXCursor_ -> W CXCursor_ -> IO ()

-- void clang_getOverriddenCursors (CXCursor cursor, CXCursor **overridden, unsigned *num_overridden); // C++?

-- void clang_disposeOverriddenCursors (CXCursor *overridden); // C++?

-- CXFile clang_getIncludedFile (CXCursor cursor); // CXFile is defined in LowLevel.Core

-- Debugging facilities https://clang.llvm.org/doxygen/group__CINDEX__DEBUG.html

foreign import capi unsafe "clang_wrappers.h"
  wrap_getCursorKindSpelling :: SimpleEnum CXCursorKind -> W CXString_ -> IO ()

-- void clang_getDefinitionSpellingAndExtent (CXCursor, const char **startBuf, const char **endBuf, unsigned *startLine, unsigned *startColumn, unsigned *endLine, unsigned *endColumn);

-- void clang_enableStackTraces (void);

-- void clang_executeOnThread (void(*fn)(void *), void *user_data, unsigned stack_size);

